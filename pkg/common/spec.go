package common

import (
	"go/types"
	"regexp"
)

var (
	MAGIC_MARKER     = regexp.MustCompile(`^//go:enum[ ]?`)
	GEN_ENUMER_FILE  = regexp.MustCompile(`^// Code generated by "go-enumer \(github\.com/mvrahden/go-enumer\)"; DO NOT EDIT\.$`)
	IS_NUMERIC_VALUE = regexp.MustCompile(`^\-?\d+`)
	IS_TYPED_HEADER  = regexp.MustCompile(`^.+(\(.+\))$`) // e.g. uint32(xyz)
)

type SpecType uint8

const (
	SimpleBlockSpec SpecType = iota
	FilebasedSpec
)

type EnumTypeSpec struct {
	Type           SpecType
	Values         []*EnumTypeSpecValue
	AdditionalData *AdditionalData
}

type EnumTypeSpecValue struct {
	ID        uint64
	EnumValue string
}

type AdditionalData struct {
	Headers []*AdditionalDataHeader
	Rows    [][]*AdditionalDataCell
}

type AdditionalDataHeader struct {
	Name string          // hint: the column name as-is (from CSV)
	Type types.BasicKind // hint: the type infered by type syntax
}

type AdditionalDataCell struct {
	LiteralValue string // hint: formatted source representation of the value, e.g. literal strings are quoted
	TypedValue   any    // hint: parsed value; actual type depends on header type
}
