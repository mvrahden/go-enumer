// Code generated by "%s"; DO NOT EDIT.

package booking

import (
	"fmt"
)

const (
	_BookingStateString          = "CreatedUnavailableFailedCanceledNotFoundDeleted"
	_BookingStateLowerString     = "createdunavailablefailedcancelednotfounddeleted"
	_BookingStateCanonicalString = "The booking was created successfullyThe booking was not availableThe booking failedThe booking was canceledThe booking was not foundThe booking was deleted"
)

var (
	_BookingStateValueRange       = [2]BookingState{0, 5}
	_BookingStateValues           = []BookingState{0, 1, 2, 3, 4, 5}
	_BookingStateStrings          = []string{_BookingStateString[0:7], _BookingStateString[7:18], _BookingStateString[18:24], _BookingStateString[24:32], _BookingStateString[32:40], _BookingStateString[40:47]}
	_BookingStateCanonicalValues = []string{_BookingStateCanonicalString[0:36], _BookingStateCanonicalString[7:18], _BookingStateCanonicalString[18:24], _BookingStateCanonicalString[24:32], _BookingStateCanonicalString[32:40], _BookingStateCanonicalString[40:47]}
)

// _BookingStateNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of BookingState.
func _BookingStateNoOp() {
	var x [1]struct{}
	_ = x[BookingStateCreated-(0)]
	_ = x[BookingStateUnavailable-(1)]
	_ = x[BookingStateFailed-(2)]
	_ = x[BookingStateCanceled-(3)]
	_ = x[BookingStateNotFound-(4)]
	_ = x[BookingStateDeleted-(5)]
}

// BookingStateValues returns all values of the enum.
func BookingStateValues() []BookingState {
	strs := make([]BookingState, len(_BookingStateValues))
	copy(strs, _BookingStateValues)
	return _BookingStateValues
}

// BookingStateStrings returns a slice of all String values of the enum.
func BookingStateStrings() []string {
	strs := make([]string, len(_BookingStateStrings))
	copy(strs, _BookingStateStrings)
	return strs
}

// IsValid inspects whether the value is valid enum value.
func (_b BookingState) IsValid() bool {
	return _b >= _BookingStateValueRange[0] && _b <= _BookingStateValueRange[1]
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern BookingState(%d) instead.
func (_b BookingState) String() string {
	if !_b.IsValid() {
		return fmt.Sprintf("BookingState(%d)", _b)
	}
	idx := int(_b)
	return _BookingStateStrings[idx]
}

// CanonicalValue returns the canonical string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern BookingState(%d) instead.
func (_b BookingState) CanonicalValue() string {
	if !_b.IsValid() {
		return fmt.Sprintf("BookingState(%d)", _b)
	}
	idx := int(_b)
	return _BookingStateCanonicalValues[idx]
}

var (
	_BookingStateStringToValueMap = map[string]BookingState{
		_BookingStateString[0:7]:   BookingStateCreated,
		_BookingStateString[7:18]:  BookingStateUnavailable,
		_BookingStateString[18:24]: BookingStateFailed,
		_BookingStateString[24:32]: BookingStateCanceled,
		_BookingStateString[32:40]: BookingStateNotFound,
		_BookingStateString[40:47]: BookingStateDeleted,
	}
	_BookingStateLowerStringToValueMap = map[string]BookingState{
		_BookingStateLowerString[0:7]:   BookingStateCreated,
		_BookingStateLowerString[7:18]:  BookingStateUnavailable,
		_BookingStateLowerString[18:24]: BookingStateFailed,
		_BookingStateLowerString[24:32]: BookingStateCanceled,
		_BookingStateLowerString[32:40]: BookingStateNotFound,
		_BookingStateLowerString[40:47]: BookingStateDeleted,
	}
)

// BookingStateFromString determines the enum value with an exact case match.
func BookingStateFromString(raw string) (BookingState, bool) {
	v, ok := _BookingStateStringToValueMap[raw]
	if !ok {
		return BookingState(0), false
	}
	return v, true
}

// BookingStateFromStringIgnoreCase determines the enum value with a case-insensitive match.
func BookingStateFromStringIgnoreCase(raw string) (BookingState, bool) {
	v, ok := BookingStateFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _BookingStateLowerStringToValueMap[raw]
	if !ok {
		return BookingState(0), false
	}
	return v, true
}

// MarshalYAML implements a YAML Marshaler for BookingState.
func (_b BookingState) MarshalYAML() (interface{}, error) {
	if !_b.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as BookingState", _b)
	}
	return _b.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BookingState.
func (_b *BookingState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("BookingState cannot be derived from empty string")
	}

	var ok bool
	*_b, ok = BookingStateFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a BookingState", str)
	}
	return nil
}

// Values returns a slice of all String values of the enum.
func (BookingState) Values() []string {
	return BookingStateStrings()
}
