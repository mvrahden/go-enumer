// Code generated by "go-enumer (github.com/mvrahden/go-enumer)"; DO NOT EDIT.

package greeting

import (
	"errors"
	"fmt"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

const (
	_GreetingString      = "WorldMars"
	_GreetingLowerString = "worldmars"
)

var (
	_GreetingValueRange = [2]Greeting{0, 1}
	_GreetingValues     = []Greeting{0, 1}
	_GreetingStrings    = []string{_GreetingString[0:5], _GreetingString[5:9]}
)

// _GreetingNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of Greeting.
func _GreetingNoOp() {
	var x [1]struct{}
	_ = x[GreetingWorld-(0)]
	_ = x[GreetingMars-(1)]
}

// GreetingValues returns all values of the enum.
func GreetingValues() []Greeting {
	cp := make([]Greeting, len(_GreetingValues))
	copy(cp, _GreetingValues)
	return cp
}

// GreetingStrings returns a slice of all String values of the enum.
func GreetingStrings() []string {
	cp := make([]string, len(_GreetingStrings))
	copy(cp, _GreetingStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_g Greeting) IsValid() bool {
	return _g >= _GreetingValueRange[0] && _g <= _GreetingValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_g Greeting) Validate() error {
	if !_g.IsValid() {
		return fmt.Errorf("Greeting(%d) is %w", _g, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Greeting(%d) instead.
func (_g Greeting) String() string {
	if !_g.IsValid() {
		return fmt.Sprintf("Greeting(%d)", _g)
	}
	idx := uint(_g)
	return _GreetingStrings[idx]
}

var (
	_GreetingStringToValueMap = map[string]Greeting{
		_GreetingString[0:5]: GreetingWorld,
		_GreetingString[5:9]: GreetingMars,
	}
	_GreetingLowerStringToValueMap = map[string]Greeting{
		_GreetingLowerString[0:5]: GreetingWorld,
		_GreetingLowerString[5:9]: GreetingMars,
	}
)

// GreetingFromString determines the enum value with an exact case match.
func GreetingFromString(raw string) (Greeting, bool) {
	v, ok := _GreetingStringToValueMap[raw]
	if !ok {
		return Greeting(0), false
	}
	return v, true
}

// GreetingFromStringIgnoreCase determines the enum value with a case-insensitive match.
func GreetingFromStringIgnoreCase(raw string) (Greeting, bool) {
	v, ok := GreetingFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _GreetingLowerStringToValueMap[raw]
	if !ok {
		return Greeting(0), false
	}
	return v, true
}

// Values returns a slice of all String values of the enum.
func (Greeting) Values() []string {
	return GreetingStrings()
}
