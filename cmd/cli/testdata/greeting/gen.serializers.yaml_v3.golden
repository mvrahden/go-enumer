// Code generated by "go-enumer (github.com/mvrahden/go-enumer)"; DO NOT EDIT.

package greeting

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"gopkg.in/yaml.v3"
	"io"
	"strconv"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

const (
	_GreetingString      = "WorldMars"
	_GreetingLowerString = "worldmars"
)

var (
	_GreetingValueRange = [2]Greeting{0, 1}
	_GreetingValues     = [2]Greeting{0, 1}
	_GreetingStrings    = [2]string{_GreetingString[0:5], _GreetingString[5:9]}
)

// _GreetingNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of Greeting.
func _GreetingNoOp() {
	var x [1]struct{}
	_ = x[GreetingWorld-(0)]
	_ = x[GreetingMars-(1)]
}

// GreetingValues returns all values of the enum.
func GreetingValues() []Greeting {
	cp := _GreetingValues
	return cp[:]
}

// GreetingStrings returns a slice of all String values of the enum.
func GreetingStrings() []string {
	cp := _GreetingStrings
	return cp[:]
}

// IsValid inspects whether the value is valid enum value.
func (_g Greeting) IsValid() bool {
	return _g >= _GreetingValueRange[0] && _g <= _GreetingValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_g Greeting) Validate() error {
	if !_g.IsValid() {
		return fmt.Errorf("Greeting(%d) is %w", _g, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Greeting(%d) instead.
func (_g Greeting) String() string {
	if !_g.IsValid() {
		return fmt.Sprintf("Greeting(%d)", _g)
	}
	idx := uint(_g)
	return _GreetingStrings[idx]
}

var (
	_GreetingStringToValueMap = map[string]Greeting{
		_GreetingString[0:5]: GreetingWorld,
		_GreetingString[5:9]: GreetingMars,
	}
	_GreetingLowerStringToValueMap = map[string]Greeting{
		_GreetingLowerString[0:5]: GreetingWorld,
		_GreetingLowerString[5:9]: GreetingMars,
	}
)

// GreetingFromString determines the enum value with an exact case match.
func GreetingFromString(raw string) (Greeting, bool) {
	v, ok := _GreetingStringToValueMap[raw]
	if !ok {
		return Greeting(0), false
	}
	return v, true
}

// GreetingFromStringIgnoreCase determines the enum value with a case-insensitive match.
func GreetingFromStringIgnoreCase(raw string) (Greeting, bool) {
	v, ok := GreetingFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _GreetingLowerStringToValueMap[raw]
	if !ok {
		return Greeting(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Greeting.
func (_g Greeting) MarshalBinary() ([]byte, error) {
	if err := _g.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Greeting. %w", _g, err)
	}
	return []byte(_g.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Greeting.
func (_g *Greeting) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Greeting.
func (_g Greeting) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_g.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Greeting.
func (_g *Greeting) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Greeting: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Greeting.
func (_g Greeting) MarshalJSON() ([]byte, error) {
	if err := _g.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Greeting. %w", _g, err)
	}
	return json.Marshal(_g.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Greeting.
func (_g *Greeting) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("Greeting should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}

func (_g Greeting) Value() (driver.Value, error) {
	if err := _g.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as Greeting. %w", _g, err)
	}
	return _g.String(), nil
}

func (_g *Greeting) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Greeting: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Greeting.
func (_g Greeting) MarshalText() ([]byte, error) {
	if err := _g.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Greeting. %w", _g, err)
	}
	return []byte(_g.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Greeting.
func (_g *Greeting) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for Greeting.
func (_g Greeting) MarshalYAML() (interface{}, error) {
	if err := _g.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Greeting. %w", _g, err)
	}
	return _g.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Greeting.
func (_g *Greeting) UnmarshalYAML(n *yaml.Node) error {
	const stringTag = "!!str"
	if n.ShortTag() != stringTag {
		return fmt.Errorf("Greeting must be derived from a string node")
	}
	str := n.Value
	if len(str) == 0 {
		return fmt.Errorf("Greeting cannot be derived from empty string")
	}

	var ok bool
	*_g, ok = GreetingFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Greeting", str)
	}
	return nil
}
