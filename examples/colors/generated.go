// Code generated by "go-enumer (github.com/mvrahden/go-enumer)"; DO NOT EDIT.

package colors

import (
	"errors"
	"fmt"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

const (
	_ColorString      = "BlackWhiteRedLimeBlueYellowCyanMagentaSilverGrayGreyMaroonOliveGreenPurpleTealNavy"
	_ColorLowerString = "blackwhiteredlimeblueyellowcyanmagentasilvergraygreymaroonolivegreenpurpletealnavy"
)

var (
	_ColorValues         = [16]Color{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
	_ColorStrings        = [16]string{_ColorString[0:5], _ColorString[5:10], _ColorString[10:13], _ColorString[13:17], _ColorString[17:21], _ColorString[21:27], _ColorString[27:31], _ColorString[31:38], _ColorString[38:44], _ColorString[44:48], _ColorString[52:58], _ColorString[58:63], _ColorString[63:68], _ColorString[68:74], _ColorString[74:78], _ColorString[78:82]}
	_ColorAdditionalData = [16]struct {
		Red   uint8
		Green uint8
		Blue  uint8
		Alpha float32
	}{
		{0, 0, 0, 1},
		{255, 255, 255, 1},
		{255, 0, 0, 1},
		{0, 255, 0, 1},
		{0, 0, 255, 1},
		{255, 255, 0, 1},
		{0, 255, 255, 1},
		{255, 0, 255, 1},
		{192, 192, 192, 1},
		{128, 128, 128, 1},
		{128, 0, 0, 1},
		{128, 128, 0, 1},
		{0, 128, 0, 1},
		{128, 0, 128, 1},
		{0, 128, 128, 1},
		{0, 0, 128, 1},
	}
)

// ColorValues returns all values of the enum.
func ColorValues() []Color {
	cp := _ColorValues
	return cp[:]
}

// ColorStrings returns a slice of all String values of the enum.
func ColorStrings() []string {
	cp := _ColorStrings
	return cp[:]
}

// IsValid tests whether the value is a valid enum value.
func (_c Color) IsValid() bool {
	return _c >= 0 && _c <= 15
}

// Validate whether the value is within the range of enum values.
func (_c Color) Validate() error {
	if !_c.IsValid() {
		return fmt.Errorf("Color(%d) is %w", _c, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Color(%d) instead.
func (_c Color) String() string {
	if !_c.IsValid() {
		return fmt.Sprintf("Color(%d)", _c)
	}
	idx := uint(_c)
	return _ColorStrings[idx]
}

// GetRed returns the "red" of the enum value.
func (_c Color) GetRed() uint8 {
	if !_c.IsValid() {
		panic(fmt.Errorf("Forbidden access to additional enum data of %q. err: %w", _c, ErrNoValidEnum))
	}
	idx := uint(_c)
	d := _ColorAdditionalData[idx]
	return d.Red
}

// GetGreen returns the "green" of the enum value.
func (_c Color) GetGreen() uint8 {
	if !_c.IsValid() {
		panic(fmt.Errorf("Forbidden access to additional enum data of %q. err: %w", _c, ErrNoValidEnum))
	}
	idx := uint(_c)
	d := _ColorAdditionalData[idx]
	return d.Green
}

// GetBlue returns the "blue" of the enum value.
func (_c Color) GetBlue() uint8 {
	if !_c.IsValid() {
		panic(fmt.Errorf("Forbidden access to additional enum data of %q. err: %w", _c, ErrNoValidEnum))
	}
	idx := uint(_c)
	d := _ColorAdditionalData[idx]
	return d.Blue
}

// GetAlpha returns the "alpha" of the enum value.
func (_c Color) GetAlpha() float32 {
	if !_c.IsValid() {
		panic(fmt.Errorf("Forbidden access to additional enum data of %q. err: %w", _c, ErrNoValidEnum))
	}
	idx := uint(_c)
	d := _ColorAdditionalData[idx]
	return d.Alpha
}

var (
	_ColorStringToValueMap = map[string]Color{
		_ColorString[0:5]:   0,
		_ColorString[5:10]:  1,
		_ColorString[10:13]: 2,
		_ColorString[13:17]: 3,
		_ColorString[17:21]: 4,
		_ColorString[21:27]: 5,
		_ColorString[27:31]: 6,
		_ColorString[31:38]: 7,
		_ColorString[38:44]: 8,
		_ColorString[44:48]: 9,
		_ColorString[48:52]: 9,
		_ColorString[52:58]: 10,
		_ColorString[58:63]: 11,
		_ColorString[63:68]: 12,
		_ColorString[68:74]: 13,
		_ColorString[74:78]: 14,
		_ColorString[78:82]: 15,
	}
	_ColorLowerStringToValueMap = map[string]Color{
		_ColorLowerString[0:5]:   0,
		_ColorLowerString[5:10]:  1,
		_ColorLowerString[10:13]: 2,
		_ColorLowerString[13:17]: 3,
		_ColorLowerString[17:21]: 4,
		_ColorLowerString[21:27]: 5,
		_ColorLowerString[27:31]: 6,
		_ColorLowerString[31:38]: 7,
		_ColorLowerString[38:44]: 8,
		_ColorLowerString[44:48]: 9,
		_ColorLowerString[48:52]: 9,
		_ColorLowerString[52:58]: 10,
		_ColorLowerString[58:63]: 11,
		_ColorLowerString[63:68]: 12,
		_ColorLowerString[68:74]: 13,
		_ColorLowerString[74:78]: 14,
		_ColorLowerString[78:82]: 15,
	}
)

// ColorFromString determines the enum value with an exact case match.
func ColorFromString(raw string) (Color, bool) {
	v, ok := _ColorStringToValueMap[raw]
	if !ok {
		return Color(0), false
	}
	return v, true
}

// ColorFromStringIgnoreCase determines the enum value with a case-insensitive match.
func ColorFromStringIgnoreCase(raw string) (Color, bool) {
	v, ok := ColorFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _ColorLowerStringToValueMap[raw]
	if !ok {
		return Color(0), false
	}
	return v, true
}
