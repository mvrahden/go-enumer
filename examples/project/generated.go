// Code generated by "%s"; DO NOT EDIT.

package project

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strconv"
)

var (
	ErrNoValidEnum = errors.New("not a valid enum")
)

const (
	_AccountStateString      = "STAGEDPROVISIONEDACTIVATEDDEACTIVATEDDEPROVISIONED"
	_AccountStateLowerString = "stagedprovisionedactivateddeactivateddeprovisioned"
)

var (
	_AccountStateValueRange = [2]AccountState{0, 4}
	_AccountStateValues     = []AccountState{0, 1, 2, 3, 4}
	_AccountStateStrings    = []string{_AccountStateString[0:6], _AccountStateString[6:17], _AccountStateString[17:26], _AccountStateString[26:37], _AccountStateString[37:50]}
)

// _AccountStateNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of AccountState.
func _AccountStateNoOp() {
	var x [1]struct{}
	_ = x[AccountStateStaged-(0)]
	_ = x[AccountStateProvisioned-(1)]
	_ = x[AccountStateActivated-(2)]
	_ = x[AccountStateDeactivated-(3)]
	_ = x[AccountStateDeprovisioned-(4)]
}

// AccountStateValues returns all values of the enum.
func AccountStateValues() []AccountState {
	cp := make([]AccountState, len(_AccountStateValues))
	copy(cp, _AccountStateValues)
	return cp
}

// AccountStateStrings returns a slice of all String values of the enum.
func AccountStateStrings() []string {
	cp := make([]string, len(_AccountStateStrings))
	copy(cp, _AccountStateStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_a AccountState) IsValid() bool {
	return _a >= _AccountStateValueRange[0] && _a <= _AccountStateValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_a AccountState) Validate() error {
	if !_a.IsValid() {
		return fmt.Errorf("AccountState(%d) is %w", _a, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern AccountState(%d) instead.
func (_a AccountState) String() string {
	if !_a.IsValid() {
		return fmt.Sprintf("AccountState(%d)", _a)
	}
	idx := uint(_a)
	return _AccountStateStrings[idx]
}

var (
	_AccountStateStringToValueMap = map[string]AccountState{
		_AccountStateString[0:6]:   AccountStateStaged,
		_AccountStateString[6:17]:  AccountStateProvisioned,
		_AccountStateString[17:26]: AccountStateActivated,
		_AccountStateString[26:37]: AccountStateDeactivated,
		_AccountStateString[37:50]: AccountStateDeprovisioned,
	}
	_AccountStateLowerStringToValueMap = map[string]AccountState{
		_AccountStateLowerString[0:6]:   AccountStateStaged,
		_AccountStateLowerString[6:17]:  AccountStateProvisioned,
		_AccountStateLowerString[17:26]: AccountStateActivated,
		_AccountStateLowerString[26:37]: AccountStateDeactivated,
		_AccountStateLowerString[37:50]: AccountStateDeprovisioned,
	}
)

// AccountStateFromString determines the enum value with an exact case match.
func AccountStateFromString(raw string) (AccountState, bool) {
	v, ok := _AccountStateStringToValueMap[raw]
	if !ok {
		return AccountState(0), false
	}
	return v, true
}

// AccountStateFromStringIgnoreCase determines the enum value with a case-insensitive match.
func AccountStateFromStringIgnoreCase(raw string) (AccountState, bool) {
	v, ok := AccountStateFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _AccountStateLowerStringToValueMap[raw]
	if !ok {
		return AccountState(0), false
	}
	return v, true
}

// MarshalJSON implements the json.Marshaler interface for AccountState.
func (_a AccountState) MarshalJSON() ([]byte, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as AccountState. %w", _a, err)
	}
	return json.Marshal(_a.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountState.
func (_a *AccountState) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("AccountState should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("AccountState cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AccountStateFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AccountState", str)
	}
	return nil
}

func (_a AccountState) Value() (driver.Value, error) {
	if err := _a.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as AccountState. %w", _a, err)
	}
	return _a.String(), nil
}

func (_a *AccountState) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AccountState: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("AccountState cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AccountStateFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AccountState", str)
	}
	return nil
}

const (
	_CountryCodeString      = "AFGALBDZAASMANDAGOAIAATAATGARGARMABWAUSAUTAZEBHSBHRBGDBRBBLRBELBLZBENBMUBTNBOLBIHBWABRAIOTVGBBRNBGRBFABDIKHMCMRCANCPVCYMCAFTCDCHLCHNCXRCCKCOLCOMCOKCRIHRVCUBCUWCYPCZECODDNKDJIDMADOMTLSECUEGYSLVGNQERIESTETHFLKFROFJIFINFRAPYFGABGMBGEODEUGHAGIBGRCGRLGRDGUMGTMGGYGINGNBGUYHTIHNDHKGHUNISLINDIDNIRNIRQIRLIMNISRITACIVJAMJPNJEYJORKAZKENKIRXKXKWTKGZLAOLVALBNLSOLBRLBYLIELTULUXMACMKDMDGMWIMYSMDVMLIMLTMHLMRTMUSMYTMEXFSMMDAMCOMNGMNEMSRMARMOZMMRNAMNRUNPLNLDANTNCLNZLNICNERNGANIUPRKMNPNOROMNPAKPLWPSEPANPNGPRYPERPHLPCNPOLPRTPRIQATCOGREUROURUSRWABLMSHNKNALCAMAFSPMVCTWSMSMRSTPSAUSENSRBSYCSLESGPSXMSVKSVNSLBSOMZAFKORSSDESPLKASDNSURSJMSWZSWECHESYRTWNTJKTZATHATGOTKLTONTTOTUNTURTKMTCATUVVIRUGAUKRAREGBRUSAURYUZBVUTVATVENVNMWLFESHYEMZMBZWE"
	_CountryCodeLowerString = "afgalbdzaasmandagoaiaataatgargarmabwausautazebhsbhrbgdbrbblrbelblzbenbmubtnbolbihbwabraiotvgbbrnbgrbfabdikhmcmrcancpvcymcaftcdchlchncxrcckcolcomcokcrihrvcubcuwcypczecoddnkdjidmadomtlsecuegyslvgnqeriestethflkfrofjifinfrapyfgabgmbgeodeughagibgrcgrlgrdgumgtmggygingnbguyhtihndhkghunislindidnirnirqirlimnisritacivjamjpnjeyjorkazkenkirxkxkwtkgzlaolvalbnlsolbrlbylieltuluxmacmkdmdgmwimysmdvmlimltmhlmrtmusmytmexfsmmdamcomngmnemsrmarmozmmrnamnrunplnldantnclnzlnicnernganiuprkmnpnoromnpakplwpsepanpngpryperphlpcnpolprtpriqatcogreurourusrwablmshnknalcamafspmvctwsmsmrstpsausensrbsycslesgpsxmsvksvnslbsomzafkorssdesplkasdnsursjmswzswechesyrtwntjktzathatgotkltonttotunturtkmtcatuvvirugaukraregbrusauryuzbvutvatvenvnmwlfeshyemzmbzwe"
)

var (
	_CountryCodeValueRange     = [2]CountryCode{1, 240}
	_CountryCodeValues         = []CountryCode{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240}
	_CountryCodeStrings        = []string{_CountryCodeString[0:3], _CountryCodeString[3:6], _CountryCodeString[6:9], _CountryCodeString[9:12], _CountryCodeString[12:15], _CountryCodeString[15:18], _CountryCodeString[18:21], _CountryCodeString[21:24], _CountryCodeString[24:27], _CountryCodeString[27:30], _CountryCodeString[30:33], _CountryCodeString[33:36], _CountryCodeString[36:39], _CountryCodeString[39:42], _CountryCodeString[42:45], _CountryCodeString[45:48], _CountryCodeString[48:51], _CountryCodeString[51:54], _CountryCodeString[54:57], _CountryCodeString[57:60], _CountryCodeString[60:63], _CountryCodeString[63:66], _CountryCodeString[66:69], _CountryCodeString[69:72], _CountryCodeString[72:75], _CountryCodeString[75:78], _CountryCodeString[78:81], _CountryCodeString[81:84], _CountryCodeString[84:87], _CountryCodeString[87:90], _CountryCodeString[90:93], _CountryCodeString[93:96], _CountryCodeString[96:99], _CountryCodeString[99:102], _CountryCodeString[102:105], _CountryCodeString[105:108], _CountryCodeString[108:111], _CountryCodeString[111:114], _CountryCodeString[114:117], _CountryCodeString[117:120], _CountryCodeString[120:123], _CountryCodeString[123:126], _CountryCodeString[126:129], _CountryCodeString[129:132], _CountryCodeString[132:135], _CountryCodeString[135:138], _CountryCodeString[138:141], _CountryCodeString[141:144], _CountryCodeString[144:147], _CountryCodeString[147:150], _CountryCodeString[150:153], _CountryCodeString[153:156], _CountryCodeString[156:159], _CountryCodeString[159:162], _CountryCodeString[162:165], _CountryCodeString[165:168], _CountryCodeString[168:171], _CountryCodeString[171:174], _CountryCodeString[174:177], _CountryCodeString[177:180], _CountryCodeString[180:183], _CountryCodeString[183:186], _CountryCodeString[186:189], _CountryCodeString[189:192], _CountryCodeString[192:195], _CountryCodeString[195:198], _CountryCodeString[198:201], _CountryCodeString[201:204], _CountryCodeString[204:207], _CountryCodeString[207:210], _CountryCodeString[210:213], _CountryCodeString[213:216], _CountryCodeString[216:219], _CountryCodeString[219:222], _CountryCodeString[222:225], _CountryCodeString[225:228], _CountryCodeString[228:231], _CountryCodeString[231:234], _CountryCodeString[234:237], _CountryCodeString[237:240], _CountryCodeString[240:243], _CountryCodeString[243:246], _CountryCodeString[246:249], _CountryCodeString[249:252], _CountryCodeString[252:255], _CountryCodeString[255:258], _CountryCodeString[258:261], _CountryCodeString[261:264], _CountryCodeString[264:267], _CountryCodeString[267:270], _CountryCodeString[270:273], _CountryCodeString[273:276], _CountryCodeString[276:279], _CountryCodeString[279:282], _CountryCodeString[282:285], _CountryCodeString[285:288], _CountryCodeString[288:291], _CountryCodeString[291:294], _CountryCodeString[294:297], _CountryCodeString[297:300], _CountryCodeString[300:303], _CountryCodeString[303:306], _CountryCodeString[306:309], _CountryCodeString[309:312], _CountryCodeString[312:315], _CountryCodeString[315:318], _CountryCodeString[318:321], _CountryCodeString[321:324], _CountryCodeString[324:327], _CountryCodeString[327:330], _CountryCodeString[330:333], _CountryCodeString[333:336], _CountryCodeString[336:339], _CountryCodeString[339:342], _CountryCodeString[342:345], _CountryCodeString[345:348], _CountryCodeString[348:351], _CountryCodeString[351:354], _CountryCodeString[354:357], _CountryCodeString[357:360], _CountryCodeString[360:363], _CountryCodeString[363:366], _CountryCodeString[366:369], _CountryCodeString[369:372], _CountryCodeString[372:375], _CountryCodeString[375:378], _CountryCodeString[378:381], _CountryCodeString[381:384], _CountryCodeString[384:387], _CountryCodeString[387:390], _CountryCodeString[390:393], _CountryCodeString[393:396], _CountryCodeString[396:399], _CountryCodeString[399:402], _CountryCodeString[402:405], _CountryCodeString[405:408], _CountryCodeString[408:411], _CountryCodeString[411:414], _CountryCodeString[414:417], _CountryCodeString[417:420], _CountryCodeString[420:423], _CountryCodeString[423:426], _CountryCodeString[426:429], _CountryCodeString[429:432], _CountryCodeString[432:435], _CountryCodeString[435:438], _CountryCodeString[438:441], _CountryCodeString[441:444], _CountryCodeString[444:447], _CountryCodeString[447:450], _CountryCodeString[450:453], _CountryCodeString[453:456], _CountryCodeString[456:459], _CountryCodeString[459:462], _CountryCodeString[462:465], _CountryCodeString[465:468], _CountryCodeString[468:471], _CountryCodeString[471:474], _CountryCodeString[474:477], _CountryCodeString[477:480], _CountryCodeString[480:483], _CountryCodeString[483:486], _CountryCodeString[486:489], _CountryCodeString[489:492], _CountryCodeString[492:495], _CountryCodeString[495:498], _CountryCodeString[498:501], _CountryCodeString[501:504], _CountryCodeString[504:507], _CountryCodeString[507:510], _CountryCodeString[510:513], _CountryCodeString[513:516], _CountryCodeString[516:519], _CountryCodeString[519:522], _CountryCodeString[522:525], _CountryCodeString[525:528], _CountryCodeString[528:531], _CountryCodeString[531:534], _CountryCodeString[534:537], _CountryCodeString[537:540], _CountryCodeString[540:543], _CountryCodeString[543:546], _CountryCodeString[546:549], _CountryCodeString[549:552], _CountryCodeString[552:555], _CountryCodeString[555:558], _CountryCodeString[558:561], _CountryCodeString[561:564], _CountryCodeString[564:567], _CountryCodeString[567:570], _CountryCodeString[570:573], _CountryCodeString[573:576], _CountryCodeString[576:579], _CountryCodeString[579:582], _CountryCodeString[582:585], _CountryCodeString[585:588], _CountryCodeString[588:591], _CountryCodeString[591:594], _CountryCodeString[594:597], _CountryCodeString[597:600], _CountryCodeString[600:603], _CountryCodeString[603:606], _CountryCodeString[606:609], _CountryCodeString[609:612], _CountryCodeString[612:615], _CountryCodeString[615:618], _CountryCodeString[618:621], _CountryCodeString[621:624], _CountryCodeString[624:627], _CountryCodeString[627:630], _CountryCodeString[630:633], _CountryCodeString[633:636], _CountryCodeString[636:639], _CountryCodeString[639:642], _CountryCodeString[642:645], _CountryCodeString[645:648], _CountryCodeString[648:651], _CountryCodeString[651:654], _CountryCodeString[654:657], _CountryCodeString[657:660], _CountryCodeString[660:663], _CountryCodeString[663:666], _CountryCodeString[666:669], _CountryCodeString[669:672], _CountryCodeString[672:675], _CountryCodeString[675:678], _CountryCodeString[678:681], _CountryCodeString[681:684], _CountryCodeString[684:687], _CountryCodeString[687:690], _CountryCodeString[690:693], _CountryCodeString[693:696], _CountryCodeString[696:699], _CountryCodeString[699:702], _CountryCodeString[702:705], _CountryCodeString[705:708], _CountryCodeString[708:711], _CountryCodeString[711:714], _CountryCodeString[714:717], _CountryCodeString[717:720]}
	_CountryCodeAdditionalData = map[CountryCode]struct {
		CountryName           string
		CountryCode           string
		Iso2LetterCode        string
		Population            uint32
		AreaInSquareKilometer uint32
		GdpInBillion          float64
	}{
		1:   {"Afghanistan", "93", "AF", 29121286, 647500, 20.65},
		2:   {"Albania", "355", "AL", 2986952, 28748, 12.8},
		3:   {"Algeria", "213", "DZ", 34586184, 2381740, 215.7},
		4:   {"American Samoa", "1-684", "AS", 57881, 199, 0.4622},
		5:   {"Andorra", "376", "AD", 84000, 468, 4.8},
		6:   {"Angola", "244", "AO", 13068161, 1246700, 124},
		7:   {"Anguilla", "1-264", "AI", 13254, 102, 0.1754},
		8:   {"Antarctica", "672", "AQ", 0, 14000000, 0},
		9:   {"Antigua and Barbuda", "1-268", "AG", 86754, 443, 1.22},
		10:  {"Argentina", "54", "AR", 41343201, 2766890, 484.6},
		11:  {"Armenia", "374", "AM", 2968000, 29800, 10.44},
		12:  {"Aruba", "297", "AW", 71566, 193, 2.516},
		13:  {"Australia", "61", "AU", 21515754, 7686850, 1488},
		14:  {"Austria", "43", "AT", 8205000, 83858, 417.9},
		15:  {"Azerbaijan", "994", "AZ", 8303512, 86600, 76.01},
		16:  {"Bahamas", "1-242", "BS", 301790, 13940, 8.373},
		17:  {"Bahrain", "973", "BH", 738004, 665, 28.36},
		18:  {"Bangladesh", "880", "BD", 156118464, 144000, 140.2},
		19:  {"Barbados", "1-246", "BB", 285653, 431, 4.262},
		20:  {"Belarus", "375", "BY", 9685000, 207600, 69.24},
		21:  {"Belgium", "32", "BE", 10403000, 30510, 507.4},
		22:  {"Belize", "501", "BZ", 314522, 22966, 1.637},
		23:  {"Benin", "229", "BJ", 9056010, 112620, 8.359},
		24:  {"Bermuda", "1-441", "BM", 65365, 53, 5.6},
		25:  {"Bhutan", "975", "BT", 699847, 47000, 2.133},
		26:  {"Bolivia", "591", "BO", 9947418, 1098580, 30.79},
		27:  {"Bosnia and Herzegovina", "387", "BA", 4590000, 51129, 18.87},
		28:  {"Botswana", "267", "BW", 2029307, 600370, 15.53},
		29:  {"Brazil", "55", "BR", 201103330, 8511965, 2190},
		30:  {"British Indian Ocean Territory", "246", "IO", 4000, 60, 0},
		31:  {"British Virgin Islands", "1-284", "VG", 21730, 153, 1.095},
		32:  {"Brunei", "673", "BN", 395027, 5770, 16.56},
		33:  {"Bulgaria", "359", "BG", 7148785, 110910, 53.7},
		34:  {"Burkina Faso", "226", "BF", 16241811, 274200, 12.13},
		35:  {"Burundi", "257", "BI", 9863117, 27830, 2.676},
		36:  {"Cambodia", "855", "KH", 14453680, 181040, 15.64},
		37:  {"Cameroon", "237", "CM", 19294149, 475440, 27.88},
		38:  {"Canada", "1", "CA", 33679000, 9984670, 1825},
		39:  {"Cape Verde", "238", "CV", 508659, 4033, 1.955},
		40:  {"Cayman Islands", "1-345", "KY", 44270, 262, 2.25},
		41:  {"Central African Republic", "236", "CF", 4844927, 622984, 2.05},
		42:  {"Chad", "235", "TD", 10543464, 1284000, 13.59},
		43:  {"Chile", "56", "CL", 16746491, 756950, 281.7},
		44:  {"China", "86", "CN", 1330044000, 9596960, 9330},
		45:  {"Christmas Island", "61", "CX", 1500, 135, 0},
		46:  {"Cocos Islands", "61", "CC", 628, 14, 0},
		47:  {"Colombia", "57", "CO", 47790000, 1138910, 369.2},
		48:  {"Comoros", "269", "KM", 773407, 2170, 0.658},
		49:  {"Cook Islands", "682", "CK", 21388, 240, 0.1832},
		50:  {"Costa Rica", "506", "CR", 4516220, 51100, 48.51},
		51:  {"Croatia", "385", "HR", 4491000, 56542, 59.14},
		52:  {"Cuba", "53", "CU", 11423000, 110860, 72.3},
		53:  {"Curacao", "599", "CW", 141766, 444, 5.6},
		54:  {"Cyprus", "357", "CY", 1102677, 9250, 21.78},
		55:  {"Czech Republic", "420", "CZ", 10476000, 78866, 194.8},
		56:  {"Democratic Republic of the Congo", "243", "CD", 70916439, 2345410, 18.56},
		57:  {"Denmark", "45", "DK", 5484000, 43094, 324.3},
		58:  {"Djibouti", "253", "DJ", 740528, 23000, 1.459},
		59:  {"Dominica", "1-767", "DM", 72813, 754, 0.495},
		60:  {"Dominican Republic", "1-809 1-829 1-849", "DO", 9823821, 48730, 59.27},
		61:  {"East Timor", "670", "TL", 1154625, 15007, 6.129},
		62:  {"Ecuador", "593", "EC", 14790608, 283560, 91.41},
		63:  {"Egypt", "20", "EG", 80471869, 1001450, 262},
		64:  {"El Salvador", "503", "SV", 6052064, 21040, 24.67},
		65:  {"Equatorial Guinea", "240", "GQ", 1014999, 28051, 17.08},
		66:  {"Eritrea", "291", "ER", 5792984, 121320, 3.438},
		67:  {"Estonia", "372", "EE", 1291170, 45226, 24.28},
		68:  {"Ethiopia", "251", "ET", 88013491, 1127127, 47.34},
		69:  {"Falkland Islands", "500", "FK", 2638, 12173, 0.1645},
		70:  {"Faroe Islands", "298", "FO", 48228, 1399, 2.32},
		71:  {"Fiji", "679", "FJ", 875983, 18270, 4.218},
		72:  {"Finland", "358", "FI", 5244000, 337030, 259.6},
		73:  {"France", "33", "FR", 64768389, 547030, 2739},
		74:  {"French Polynesia", "689", "PF", 270485, 4167, 5.65},
		75:  {"Gabon", "241", "GA", 1545255, 267667, 19.97},
		76:  {"Gambia", "220", "GM", 1593256, 11300, 0.896},
		77:  {"Georgia", "995", "GE", 4630000, 69700, 15.95},
		78:  {"Germany", "49", "DE", 81802257, 357021, 3593},
		79:  {"Ghana", "233", "GH", 24339838, 239460, 45.55},
		80:  {"Gibraltar", "350", "GI", 27884, 7, 1.106},
		81:  {"Greece", "30", "GR", 11000000, 131940, 243.3},
		82:  {"Greenland", "299", "GL", 56375, 2166086, 2.16},
		83:  {"Grenada", "1-473", "GD", 107818, 344, 0.811},
		84:  {"Guam", "1-671", "GU", 159358, 549, 4.6},
		85:  {"Guatemala", "502", "GT", 13550440, 108890, 53.9},
		86:  {"Guernsey", "44-1481", "GG", 65228, 78, 2.742},
		87:  {"Guinea", "224", "GN", 10324025, 245857, 6.544},
		88:  {"Guinea-Bissau", "245", "GW", 1565126, 36120, 0.88},
		89:  {"Guyana", "592", "GY", 748486, 214970, 3.02},
		90:  {"Haiti", "509", "HT", 9648924, 27750, 8.287},
		91:  {"Honduras", "504", "HN", 7989415, 112090, 18.88},
		92:  {"Hong Kong", "852", "HK", 6898686, 1092, 272.1},
		93:  {"Hungary", "36", "HU", 9982000, 93030, 130.6},
		94:  {"Iceland", "354", "IS", 308910, 103000, 14.59},
		95:  {"India", "91", "IN", 1173108018, 3287590, 1670},
		96:  {"Indonesia", "62", "ID", 242968342, 1919440, 867.5},
		97:  {"Iran", "98", "IR", 76923300, 1648000, 411.9},
		98:  {"Iraq", "964", "IQ", 29671605, 437072, 221.8},
		99:  {"Ireland", "353", "IE", 4622917, 70280, 220.9},
		100: {"Isle of Man", "44-1624", "IM", 75049, 572, 4.076},
		101: {"Israel", "972", "IL", 7353985, 20770, 272.7},
		102: {"Italy", "39", "IT", 60340328, 301230, 2068},
		103: {"Ivory Coast", "225", "CI", 21058798, 322460, 28.28},
		104: {"Jamaica", "1-876", "JM", 2847232, 10991, 14.39},
		105: {"Japan", "81", "JP", 127288000, 377835, 5007},
		106: {"Jersey", "44-1534", "JE", 90812, 116, 5.1},
		107: {"Jordan", "962", "JO", 6407085, 92300, 34.08},
		108: {"Kazakhstan", "7", "KZ", 15340000, 2717300, 224.9},
		109: {"Kenya", "254", "KE", 40046566, 582650, 45.31},
		110: {"Kiribati", "686", "KI", 92533, 811, 0.173},
		111: {"Kosovo", "383", "XK", 1800000, 10887, 7.15},
		112: {"Kuwait", "965", "KW", 2789132, 17820, 179.5},
		113: {"Kyrgyzstan", "996", "KG", 5508626, 198500, 7.234},
		114: {"Laos", "856", "LA", 6368162, 236800, 10.1},
		115: {"Latvia", "371", "LV", 2217969, 64589, 30.38},
		116: {"Lebanon", "961", "LB", 4125247, 10400, 43.49},
		117: {"Lesotho", "266", "LS", 1919552, 30355, 2.457},
		118: {"Liberia", "231", "LR", 3685076, 111370, 1.977},
		119: {"Libya", "218", "LY", 6461454, 1759540, 70.92},
		120: {"Liechtenstein", "423", "LI", 35000, 160, 5.113},
		121: {"Lithuania", "370", "LT", 2944459, 65200, 46.71},
		122: {"Luxembourg", "352", "LU", 497538, 2586, 60.54},
		123: {"Macau", "853", "MO", 449198, 254, 51.68},
		124: {"Macedonia", "389", "MK", 2062294, 25333, 10.65},
		125: {"Madagascar", "261", "MG", 21281844, 587040, 10.53},
		126: {"Malawi", "265", "MW", 15447500, 118480, 3.683},
		127: {"Malaysia", "60", "MY", 28274729, 329750, 312.4},
		128: {"Maldives", "960", "MV", 395650, 300, 2.27},
		129: {"Mali", "223", "ML", 13796354, 1240000, 11.37},
		130: {"Malta", "356", "MT", 403000, 316, 9.541},
		131: {"Marshall Islands", "692", "MH", 65859, 181, 0.193},
		132: {"Mauritania", "222", "MR", 3205060, 1030700, 4.183},
		133: {"Mauritius", "230", "MU", 1294104, 2040, 11.9},
		134: {"Mayotte", "262", "YT", 159042, 374, 0},
		135: {"Mexico", "52", "MX", 112468855, 1972550, 1327},
		136: {"Micronesia", "691", "FM", 107708, 702, 0.339},
		137: {"Moldova", "373", "MD", 4324000, 33843, 7.932},
		138: {"Monaco", "377", "MC", 32965, 2, 5.748},
		139: {"Mongolia", "976", "MN", 3086918, 1565000, 11.14},
		140: {"Montenegro", "382", "ME", 666730, 14026, 4.518},
		141: {"Montserrat", "1-664", "MS", 9341, 102, 0},
		142: {"Morocco", "212", "MA", 31627428, 446550, 104.8},
		143: {"Mozambique", "258", "MZ", 22061451, 801590, 14.67},
		144: {"Myanmar", "95", "MM", 53414374, 678500, 59.43},
		145: {"Namibia", "264", "NA", 2128471, 825418, 12.3},
		146: {"Nauru", "674", "NR", 10065, 21, 0},
		147: {"Nepal", "977", "NP", 28951852, 140800, 19.34},
		148: {"Netherlands", "31", "NL", 16645000, 41526, 722.3},
		149: {"Netherlands Antilles", "599", "AN", 136197, 960, 0},
		150: {"New Caledonia", "687", "NC", 216494, 19060, 9.28},
		151: {"New Zealand", "64", "NZ", 4252277, 268680, 181.1},
		152: {"Nicaragua", "505", "NI", 5995928, 129494, 11.26},
		153: {"Niger", "227", "NE", 15878271, 1267000, 7.304},
		154: {"Nigeria", "234", "NG", 154000000, 923768, 502},
		155: {"Niue", "683", "NU", 2166, 260, 0.01001},
		156: {"North Korea", "850", "KP", 22912177, 120540, 28},
		157: {"Northern Mariana Islands", "1-670", "MP", 53883, 477, 0.733},
		158: {"Norway", "47", "NO", 5009150, 324220, 515.8},
		159: {"Oman", "968", "OM", 2967717, 212460, 81.95},
		160: {"Pakistan", "92", "PK", 184404791, 803940, 236.5},
		161: {"Palau", "680", "PW", 19907, 458, 0.221},
		162: {"Palestine", "970", "PS", 3800000, 5970, 6.641},
		163: {"Panama", "507", "PA", 3410676, 78200, 40.62},
		164: {"Papua New Guinea", "675", "PG", 6064515, 462840, 16.1},
		165: {"Paraguay", "595", "PY", 6375830, 406750, 30.56},
		166: {"Peru", "51", "PE", 29907003, 1285220, 210.3},
		167: {"Philippines", "63", "PH", 99900177, 300000, 272.2},
		168: {"Pitcairn", "64", "PN", 46, 47, 0},
		169: {"Poland", "48", "PL", 38500000, 312685, 513.9},
		170: {"Portugal", "351", "PT", 10676000, 92391, 219.3},
		171: {"Puerto Rico", "1-787 1-939", "PR", 3916632, 9104, 93.52},
		172: {"Qatar", "974", "QA", 840926, 11437, 213.1},
		173: {"Republic of the Congo", "242", "CG", 3039126, 342000, 14.25},
		174: {"Reunion", "262", "RE", 776948, 2517, 0},
		175: {"Romania", "40", "RO", 21959278, 237500, 188.9},
		176: {"Russia", "7", "RU", 140702000, 17100000, 2113},
		177: {"Rwanda", "250", "RW", 11055976, 26338, 7.7},
		178: {"Saint Barthelemy", "590", "BL", 8450, 21, 0},
		179: {"Saint Helena", "290", "SH", 7460, 410, 0},
		180: {"Saint Kitts and Nevis", "1-869", "KN", 51134, 261, 0.767},
		181: {"Saint Lucia", "1-758", "LC", 160922, 616, 1.377},
		182: {"Saint Martin", "590", "MF", 35925, 53, 0.5615},
		183: {"Saint Pierre and Miquelon", "508", "PM", 7012, 242, 0.2153},
		184: {"Saint Vincent and the Grenadines", "1-784", "VC", 104217, 389, 0.742},
		185: {"Samoa", "685", "WS", 192001, 2944, 0.705},
		186: {"San Marino", "378", "SM", 31477, 61, 1.866},
		187: {"Sao Tome and Principe", "239", "ST", 175808, 1001, 0.311},
		188: {"Saudi Arabia", "966", "SA", 25731776, 1960582, 718.5},
		189: {"Senegal", "221", "SN", 12323252, 196190, 15.36},
		190: {"Serbia", "381", "RS", 7344847, 88361, 43.68},
		191: {"Seychelles", "248", "SC", 88340, 455, 1.271},
		192: {"Sierra Leone", "232", "SL", 5245695, 71740, 4.607},
		193: {"Singapore", "65", "SG", 4701069, 693, 295.7},
		194: {"Sint Maarten", "1-721", "SX", 37429, 34, 0.7947},
		195: {"Slovakia", "421", "SK", 5455000, 48845, 96.96},
		196: {"Slovenia", "386", "SI", 2007000, 20273, 46.82},
		197: {"Solomon Islands", "677", "SB", 559198, 28450, 1.099},
		198: {"Somalia", "252", "SO", 10112453, 637657, 2.372},
		199: {"South Africa", "27", "ZA", 49000000, 1219912, 353.9},
		200: {"South Korea", "82", "KR", 48422644, 98480, 1198},
		201: {"South Sudan", "211", "SS", 8260490, 644329, 11.77},
		202: {"Spain", "34", "ES", 46505963, 504782, 1356},
		203: {"Sri Lanka", "94", "LK", 21513990, 65610, 65.12},
		204: {"Sudan", "249", "SD", 35000000, 1861484, 52.5},
		205: {"Suriname", "597", "SR", 492829, 163270, 5.009},
		206: {"Svalbard and Jan Mayen", "47", "SJ", 2550, 62049, 0},
		207: {"Swaziland", "268", "SZ", 1354051, 17363, 3.807},
		208: {"Sweden", "46", "SE", 9555893, 449964, 552},
		209: {"Switzerland", "41", "CH", 7581000, 41290, 646.2},
		210: {"Syria", "963", "SY", 22198110, 185180, 64.7},
		211: {"Taiwan", "886", "TW", 22894384, 35980, 484.7},
		212: {"Tajikistan", "992", "TJ", 7487489, 143100, 8.513},
		213: {"Tanzania", "255", "TZ", 41892895, 945087, 31.94},
		214: {"Thailand", "66", "TH", 67089500, 514000, 400.9},
		215: {"Togo", "228", "TG", 6587239, 56785, 4.299},
		216: {"Tokelau", "690", "TK", 1466, 10, 0},
		217: {"Tonga", "676", "TO", 122580, 748, 0.477},
		218: {"Trinidad and Tobago", "1-868", "TT", 1228691, 5128, 27.13},
		219: {"Tunisia", "216", "TN", 10589025, 163610, 48.38},
		220: {"Turkey", "90", "TR", 77804122, 780580, 821.8},
		221: {"Turkmenistan", "993", "TM", 4940916, 488100, 40.56},
		222: {"Turks and Caicos Islands", "1-649", "TC", 20556, 430, 0},
		223: {"Tuvalu", "688", "TV", 10472, 26, 0.038},
		224: {"U.S. Virgin Islands", "1-340", "VI", 108708, 352, 0},
		225: {"Uganda", "256", "UG", 33398682, 236040, 22.6},
		226: {"Ukraine", "380", "UA", 45415596, 603700, 175.5},
		227: {"United Arab Emirates", "971", "AE", 4975593, 82880, 390},
		228: {"United Kingdom", "44", "GB", 62348447, 244820, 2490},
		229: {"United States", "1", "US", 310232863, 9629091, 1672},
		230: {"Uruguay", "598", "UY", 3477000, 176220, 57.11},
		231: {"Uzbekistan", "998", "UZ", 27865738, 447400, 55.18},
		232: {"Vanuatu", "678", "VU", 221552, 12200, 0.828},
		233: {"Vatican", "379", "VA", 921, 0, 0},
		234: {"Venezuela", "58", "VE", 27223228, 912050, 367.5},
		235: {"Vietnam", "84", "VN", 89571130, 329560, 170},
		236: {"Wallis and Futuna", "681", "WF", 16025, 274, 0},
		237: {"Western Sahara", "212", "EH", 273008, 266000, 0},
		238: {"Yemen", "967", "YE", 23495361, 527970, 43.89},
		239: {"Zambia", "260", "ZM", 13460305, 752614, 22.24},
		240: {"Zimbabwe", "263", "ZW", 11651858, 390580, 10.48},
	}
)

// CountryCodeValues returns all values of the enum.
func CountryCodeValues() []CountryCode {
	cp := make([]CountryCode, len(_CountryCodeValues))
	copy(cp, _CountryCodeValues)
	return cp
}

// CountryCodeStrings returns a slice of all String values of the enum.
func CountryCodeStrings() []string {
	cp := make([]string, len(_CountryCodeStrings))
	copy(cp, _CountryCodeStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_c CountryCode) IsValid() bool {
	return _c >= _CountryCodeValueRange[0] && _c <= _CountryCodeValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_c CountryCode) Validate() error {
	if !_c.IsValid() {
		return fmt.Errorf("CountryCode(%d) is %w", _c, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern CountryCode(%d) instead.
func (_c CountryCode) String() string {
	if !_c.IsValid() {
		return fmt.Sprintf("CountryCode(%d)", _c)
	}
	idx := uint(_c) - 1
	return _CountryCodeStrings[idx]
}

// GetCountryName returns the "country-name" of the enum value as string
// if the enum is valid.
func (_c CountryCode) GetCountryName() (string, bool) {
	if !_c.IsValid() {
		return "", false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.CountryName, ok
}

// GetCountryCode returns the "country-code" of the enum value as string
// if the enum is valid.
func (_c CountryCode) GetCountryCode() (string, bool) {
	if !_c.IsValid() {
		return "", false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.CountryCode, ok
}

// GetIso2LetterCode returns the "iso-2-letter-code" of the enum value as string
// if the enum is valid.
func (_c CountryCode) GetIso2LetterCode() (string, bool) {
	if !_c.IsValid() {
		return "", false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.Iso2LetterCode, ok
}

// GetPopulation returns the "population" of the enum value as uint32
// if the enum is valid.
func (_c CountryCode) GetPopulation() (uint32, bool) {
	if !_c.IsValid() {
		return 0, false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.Population, ok
}

// GetAreaInSquareKilometer returns the "area-in-square-kilometer" of the enum value as uint32
// if the enum is valid.
func (_c CountryCode) GetAreaInSquareKilometer() (uint32, bool) {
	if !_c.IsValid() {
		return 0, false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.AreaInSquareKilometer, ok
}

// GetGdpInBillion returns the "gdp-in-billion" of the enum value as float64
// if the enum is valid.
func (_c CountryCode) GetGdpInBillion() (float64, bool) {
	if !_c.IsValid() {
		return 0, false
	}
	d, ok := _CountryCodeAdditionalData[_c]
	return d.GdpInBillion, ok
}

var (
	_CountryCodeStringToValueMap = map[string]CountryCode{
		_CountryCodeString[0:3]:     1,
		_CountryCodeString[3:6]:     2,
		_CountryCodeString[6:9]:     3,
		_CountryCodeString[9:12]:    4,
		_CountryCodeString[12:15]:   5,
		_CountryCodeString[15:18]:   6,
		_CountryCodeString[18:21]:   7,
		_CountryCodeString[21:24]:   8,
		_CountryCodeString[24:27]:   9,
		_CountryCodeString[27:30]:   10,
		_CountryCodeString[30:33]:   11,
		_CountryCodeString[33:36]:   12,
		_CountryCodeString[36:39]:   13,
		_CountryCodeString[39:42]:   14,
		_CountryCodeString[42:45]:   15,
		_CountryCodeString[45:48]:   16,
		_CountryCodeString[48:51]:   17,
		_CountryCodeString[51:54]:   18,
		_CountryCodeString[54:57]:   19,
		_CountryCodeString[57:60]:   20,
		_CountryCodeString[60:63]:   21,
		_CountryCodeString[63:66]:   22,
		_CountryCodeString[66:69]:   23,
		_CountryCodeString[69:72]:   24,
		_CountryCodeString[72:75]:   25,
		_CountryCodeString[75:78]:   26,
		_CountryCodeString[78:81]:   27,
		_CountryCodeString[81:84]:   28,
		_CountryCodeString[84:87]:   29,
		_CountryCodeString[87:90]:   30,
		_CountryCodeString[90:93]:   31,
		_CountryCodeString[93:96]:   32,
		_CountryCodeString[96:99]:   33,
		_CountryCodeString[99:102]:  34,
		_CountryCodeString[102:105]: 35,
		_CountryCodeString[105:108]: 36,
		_CountryCodeString[108:111]: 37,
		_CountryCodeString[111:114]: 38,
		_CountryCodeString[114:117]: 39,
		_CountryCodeString[117:120]: 40,
		_CountryCodeString[120:123]: 41,
		_CountryCodeString[123:126]: 42,
		_CountryCodeString[126:129]: 43,
		_CountryCodeString[129:132]: 44,
		_CountryCodeString[132:135]: 45,
		_CountryCodeString[135:138]: 46,
		_CountryCodeString[138:141]: 47,
		_CountryCodeString[141:144]: 48,
		_CountryCodeString[144:147]: 49,
		_CountryCodeString[147:150]: 50,
		_CountryCodeString[150:153]: 51,
		_CountryCodeString[153:156]: 52,
		_CountryCodeString[156:159]: 53,
		_CountryCodeString[159:162]: 54,
		_CountryCodeString[162:165]: 55,
		_CountryCodeString[165:168]: 56,
		_CountryCodeString[168:171]: 57,
		_CountryCodeString[171:174]: 58,
		_CountryCodeString[174:177]: 59,
		_CountryCodeString[177:180]: 60,
		_CountryCodeString[180:183]: 61,
		_CountryCodeString[183:186]: 62,
		_CountryCodeString[186:189]: 63,
		_CountryCodeString[189:192]: 64,
		_CountryCodeString[192:195]: 65,
		_CountryCodeString[195:198]: 66,
		_CountryCodeString[198:201]: 67,
		_CountryCodeString[201:204]: 68,
		_CountryCodeString[204:207]: 69,
		_CountryCodeString[207:210]: 70,
		_CountryCodeString[210:213]: 71,
		_CountryCodeString[213:216]: 72,
		_CountryCodeString[216:219]: 73,
		_CountryCodeString[219:222]: 74,
		_CountryCodeString[222:225]: 75,
		_CountryCodeString[225:228]: 76,
		_CountryCodeString[228:231]: 77,
		_CountryCodeString[231:234]: 78,
		_CountryCodeString[234:237]: 79,
		_CountryCodeString[237:240]: 80,
		_CountryCodeString[240:243]: 81,
		_CountryCodeString[243:246]: 82,
		_CountryCodeString[246:249]: 83,
		_CountryCodeString[249:252]: 84,
		_CountryCodeString[252:255]: 85,
		_CountryCodeString[255:258]: 86,
		_CountryCodeString[258:261]: 87,
		_CountryCodeString[261:264]: 88,
		_CountryCodeString[264:267]: 89,
		_CountryCodeString[267:270]: 90,
		_CountryCodeString[270:273]: 91,
		_CountryCodeString[273:276]: 92,
		_CountryCodeString[276:279]: 93,
		_CountryCodeString[279:282]: 94,
		_CountryCodeString[282:285]: 95,
		_CountryCodeString[285:288]: 96,
		_CountryCodeString[288:291]: 97,
		_CountryCodeString[291:294]: 98,
		_CountryCodeString[294:297]: 99,
		_CountryCodeString[297:300]: 100,
		_CountryCodeString[300:303]: 101,
		_CountryCodeString[303:306]: 102,
		_CountryCodeString[306:309]: 103,
		_CountryCodeString[309:312]: 104,
		_CountryCodeString[312:315]: 105,
		_CountryCodeString[315:318]: 106,
		_CountryCodeString[318:321]: 107,
		_CountryCodeString[321:324]: 108,
		_CountryCodeString[324:327]: 109,
		_CountryCodeString[327:330]: 110,
		_CountryCodeString[330:333]: 111,
		_CountryCodeString[333:336]: 112,
		_CountryCodeString[336:339]: 113,
		_CountryCodeString[339:342]: 114,
		_CountryCodeString[342:345]: 115,
		_CountryCodeString[345:348]: 116,
		_CountryCodeString[348:351]: 117,
		_CountryCodeString[351:354]: 118,
		_CountryCodeString[354:357]: 119,
		_CountryCodeString[357:360]: 120,
		_CountryCodeString[360:363]: 121,
		_CountryCodeString[363:366]: 122,
		_CountryCodeString[366:369]: 123,
		_CountryCodeString[369:372]: 124,
		_CountryCodeString[372:375]: 125,
		_CountryCodeString[375:378]: 126,
		_CountryCodeString[378:381]: 127,
		_CountryCodeString[381:384]: 128,
		_CountryCodeString[384:387]: 129,
		_CountryCodeString[387:390]: 130,
		_CountryCodeString[390:393]: 131,
		_CountryCodeString[393:396]: 132,
		_CountryCodeString[396:399]: 133,
		_CountryCodeString[399:402]: 134,
		_CountryCodeString[402:405]: 135,
		_CountryCodeString[405:408]: 136,
		_CountryCodeString[408:411]: 137,
		_CountryCodeString[411:414]: 138,
		_CountryCodeString[414:417]: 139,
		_CountryCodeString[417:420]: 140,
		_CountryCodeString[420:423]: 141,
		_CountryCodeString[423:426]: 142,
		_CountryCodeString[426:429]: 143,
		_CountryCodeString[429:432]: 144,
		_CountryCodeString[432:435]: 145,
		_CountryCodeString[435:438]: 146,
		_CountryCodeString[438:441]: 147,
		_CountryCodeString[441:444]: 148,
		_CountryCodeString[444:447]: 149,
		_CountryCodeString[447:450]: 150,
		_CountryCodeString[450:453]: 151,
		_CountryCodeString[453:456]: 152,
		_CountryCodeString[456:459]: 153,
		_CountryCodeString[459:462]: 154,
		_CountryCodeString[462:465]: 155,
		_CountryCodeString[465:468]: 156,
		_CountryCodeString[468:471]: 157,
		_CountryCodeString[471:474]: 158,
		_CountryCodeString[474:477]: 159,
		_CountryCodeString[477:480]: 160,
		_CountryCodeString[480:483]: 161,
		_CountryCodeString[483:486]: 162,
		_CountryCodeString[486:489]: 163,
		_CountryCodeString[489:492]: 164,
		_CountryCodeString[492:495]: 165,
		_CountryCodeString[495:498]: 166,
		_CountryCodeString[498:501]: 167,
		_CountryCodeString[501:504]: 168,
		_CountryCodeString[504:507]: 169,
		_CountryCodeString[507:510]: 170,
		_CountryCodeString[510:513]: 171,
		_CountryCodeString[513:516]: 172,
		_CountryCodeString[516:519]: 173,
		_CountryCodeString[519:522]: 174,
		_CountryCodeString[522:525]: 175,
		_CountryCodeString[525:528]: 176,
		_CountryCodeString[528:531]: 177,
		_CountryCodeString[531:534]: 178,
		_CountryCodeString[534:537]: 179,
		_CountryCodeString[537:540]: 180,
		_CountryCodeString[540:543]: 181,
		_CountryCodeString[543:546]: 182,
		_CountryCodeString[546:549]: 183,
		_CountryCodeString[549:552]: 184,
		_CountryCodeString[552:555]: 185,
		_CountryCodeString[555:558]: 186,
		_CountryCodeString[558:561]: 187,
		_CountryCodeString[561:564]: 188,
		_CountryCodeString[564:567]: 189,
		_CountryCodeString[567:570]: 190,
		_CountryCodeString[570:573]: 191,
		_CountryCodeString[573:576]: 192,
		_CountryCodeString[576:579]: 193,
		_CountryCodeString[579:582]: 194,
		_CountryCodeString[582:585]: 195,
		_CountryCodeString[585:588]: 196,
		_CountryCodeString[588:591]: 197,
		_CountryCodeString[591:594]: 198,
		_CountryCodeString[594:597]: 199,
		_CountryCodeString[597:600]: 200,
		_CountryCodeString[600:603]: 201,
		_CountryCodeString[603:606]: 202,
		_CountryCodeString[606:609]: 203,
		_CountryCodeString[609:612]: 204,
		_CountryCodeString[612:615]: 205,
		_CountryCodeString[615:618]: 206,
		_CountryCodeString[618:621]: 207,
		_CountryCodeString[621:624]: 208,
		_CountryCodeString[624:627]: 209,
		_CountryCodeString[627:630]: 210,
		_CountryCodeString[630:633]: 211,
		_CountryCodeString[633:636]: 212,
		_CountryCodeString[636:639]: 213,
		_CountryCodeString[639:642]: 214,
		_CountryCodeString[642:645]: 215,
		_CountryCodeString[645:648]: 216,
		_CountryCodeString[648:651]: 217,
		_CountryCodeString[651:654]: 218,
		_CountryCodeString[654:657]: 219,
		_CountryCodeString[657:660]: 220,
		_CountryCodeString[660:663]: 221,
		_CountryCodeString[663:666]: 222,
		_CountryCodeString[666:669]: 223,
		_CountryCodeString[669:672]: 224,
		_CountryCodeString[672:675]: 225,
		_CountryCodeString[675:678]: 226,
		_CountryCodeString[678:681]: 227,
		_CountryCodeString[681:684]: 228,
		_CountryCodeString[684:687]: 229,
		_CountryCodeString[687:690]: 230,
		_CountryCodeString[690:693]: 231,
		_CountryCodeString[693:696]: 232,
		_CountryCodeString[696:699]: 233,
		_CountryCodeString[699:702]: 234,
		_CountryCodeString[702:705]: 235,
		_CountryCodeString[705:708]: 236,
		_CountryCodeString[708:711]: 237,
		_CountryCodeString[711:714]: 238,
		_CountryCodeString[714:717]: 239,
		_CountryCodeString[717:720]: 240,
	}
	_CountryCodeLowerStringToValueMap = map[string]CountryCode{
		_CountryCodeLowerString[0:3]:     1,
		_CountryCodeLowerString[3:6]:     2,
		_CountryCodeLowerString[6:9]:     3,
		_CountryCodeLowerString[9:12]:    4,
		_CountryCodeLowerString[12:15]:   5,
		_CountryCodeLowerString[15:18]:   6,
		_CountryCodeLowerString[18:21]:   7,
		_CountryCodeLowerString[21:24]:   8,
		_CountryCodeLowerString[24:27]:   9,
		_CountryCodeLowerString[27:30]:   10,
		_CountryCodeLowerString[30:33]:   11,
		_CountryCodeLowerString[33:36]:   12,
		_CountryCodeLowerString[36:39]:   13,
		_CountryCodeLowerString[39:42]:   14,
		_CountryCodeLowerString[42:45]:   15,
		_CountryCodeLowerString[45:48]:   16,
		_CountryCodeLowerString[48:51]:   17,
		_CountryCodeLowerString[51:54]:   18,
		_CountryCodeLowerString[54:57]:   19,
		_CountryCodeLowerString[57:60]:   20,
		_CountryCodeLowerString[60:63]:   21,
		_CountryCodeLowerString[63:66]:   22,
		_CountryCodeLowerString[66:69]:   23,
		_CountryCodeLowerString[69:72]:   24,
		_CountryCodeLowerString[72:75]:   25,
		_CountryCodeLowerString[75:78]:   26,
		_CountryCodeLowerString[78:81]:   27,
		_CountryCodeLowerString[81:84]:   28,
		_CountryCodeLowerString[84:87]:   29,
		_CountryCodeLowerString[87:90]:   30,
		_CountryCodeLowerString[90:93]:   31,
		_CountryCodeLowerString[93:96]:   32,
		_CountryCodeLowerString[96:99]:   33,
		_CountryCodeLowerString[99:102]:  34,
		_CountryCodeLowerString[102:105]: 35,
		_CountryCodeLowerString[105:108]: 36,
		_CountryCodeLowerString[108:111]: 37,
		_CountryCodeLowerString[111:114]: 38,
		_CountryCodeLowerString[114:117]: 39,
		_CountryCodeLowerString[117:120]: 40,
		_CountryCodeLowerString[120:123]: 41,
		_CountryCodeLowerString[123:126]: 42,
		_CountryCodeLowerString[126:129]: 43,
		_CountryCodeLowerString[129:132]: 44,
		_CountryCodeLowerString[132:135]: 45,
		_CountryCodeLowerString[135:138]: 46,
		_CountryCodeLowerString[138:141]: 47,
		_CountryCodeLowerString[141:144]: 48,
		_CountryCodeLowerString[144:147]: 49,
		_CountryCodeLowerString[147:150]: 50,
		_CountryCodeLowerString[150:153]: 51,
		_CountryCodeLowerString[153:156]: 52,
		_CountryCodeLowerString[156:159]: 53,
		_CountryCodeLowerString[159:162]: 54,
		_CountryCodeLowerString[162:165]: 55,
		_CountryCodeLowerString[165:168]: 56,
		_CountryCodeLowerString[168:171]: 57,
		_CountryCodeLowerString[171:174]: 58,
		_CountryCodeLowerString[174:177]: 59,
		_CountryCodeLowerString[177:180]: 60,
		_CountryCodeLowerString[180:183]: 61,
		_CountryCodeLowerString[183:186]: 62,
		_CountryCodeLowerString[186:189]: 63,
		_CountryCodeLowerString[189:192]: 64,
		_CountryCodeLowerString[192:195]: 65,
		_CountryCodeLowerString[195:198]: 66,
		_CountryCodeLowerString[198:201]: 67,
		_CountryCodeLowerString[201:204]: 68,
		_CountryCodeLowerString[204:207]: 69,
		_CountryCodeLowerString[207:210]: 70,
		_CountryCodeLowerString[210:213]: 71,
		_CountryCodeLowerString[213:216]: 72,
		_CountryCodeLowerString[216:219]: 73,
		_CountryCodeLowerString[219:222]: 74,
		_CountryCodeLowerString[222:225]: 75,
		_CountryCodeLowerString[225:228]: 76,
		_CountryCodeLowerString[228:231]: 77,
		_CountryCodeLowerString[231:234]: 78,
		_CountryCodeLowerString[234:237]: 79,
		_CountryCodeLowerString[237:240]: 80,
		_CountryCodeLowerString[240:243]: 81,
		_CountryCodeLowerString[243:246]: 82,
		_CountryCodeLowerString[246:249]: 83,
		_CountryCodeLowerString[249:252]: 84,
		_CountryCodeLowerString[252:255]: 85,
		_CountryCodeLowerString[255:258]: 86,
		_CountryCodeLowerString[258:261]: 87,
		_CountryCodeLowerString[261:264]: 88,
		_CountryCodeLowerString[264:267]: 89,
		_CountryCodeLowerString[267:270]: 90,
		_CountryCodeLowerString[270:273]: 91,
		_CountryCodeLowerString[273:276]: 92,
		_CountryCodeLowerString[276:279]: 93,
		_CountryCodeLowerString[279:282]: 94,
		_CountryCodeLowerString[282:285]: 95,
		_CountryCodeLowerString[285:288]: 96,
		_CountryCodeLowerString[288:291]: 97,
		_CountryCodeLowerString[291:294]: 98,
		_CountryCodeLowerString[294:297]: 99,
		_CountryCodeLowerString[297:300]: 100,
		_CountryCodeLowerString[300:303]: 101,
		_CountryCodeLowerString[303:306]: 102,
		_CountryCodeLowerString[306:309]: 103,
		_CountryCodeLowerString[309:312]: 104,
		_CountryCodeLowerString[312:315]: 105,
		_CountryCodeLowerString[315:318]: 106,
		_CountryCodeLowerString[318:321]: 107,
		_CountryCodeLowerString[321:324]: 108,
		_CountryCodeLowerString[324:327]: 109,
		_CountryCodeLowerString[327:330]: 110,
		_CountryCodeLowerString[330:333]: 111,
		_CountryCodeLowerString[333:336]: 112,
		_CountryCodeLowerString[336:339]: 113,
		_CountryCodeLowerString[339:342]: 114,
		_CountryCodeLowerString[342:345]: 115,
		_CountryCodeLowerString[345:348]: 116,
		_CountryCodeLowerString[348:351]: 117,
		_CountryCodeLowerString[351:354]: 118,
		_CountryCodeLowerString[354:357]: 119,
		_CountryCodeLowerString[357:360]: 120,
		_CountryCodeLowerString[360:363]: 121,
		_CountryCodeLowerString[363:366]: 122,
		_CountryCodeLowerString[366:369]: 123,
		_CountryCodeLowerString[369:372]: 124,
		_CountryCodeLowerString[372:375]: 125,
		_CountryCodeLowerString[375:378]: 126,
		_CountryCodeLowerString[378:381]: 127,
		_CountryCodeLowerString[381:384]: 128,
		_CountryCodeLowerString[384:387]: 129,
		_CountryCodeLowerString[387:390]: 130,
		_CountryCodeLowerString[390:393]: 131,
		_CountryCodeLowerString[393:396]: 132,
		_CountryCodeLowerString[396:399]: 133,
		_CountryCodeLowerString[399:402]: 134,
		_CountryCodeLowerString[402:405]: 135,
		_CountryCodeLowerString[405:408]: 136,
		_CountryCodeLowerString[408:411]: 137,
		_CountryCodeLowerString[411:414]: 138,
		_CountryCodeLowerString[414:417]: 139,
		_CountryCodeLowerString[417:420]: 140,
		_CountryCodeLowerString[420:423]: 141,
		_CountryCodeLowerString[423:426]: 142,
		_CountryCodeLowerString[426:429]: 143,
		_CountryCodeLowerString[429:432]: 144,
		_CountryCodeLowerString[432:435]: 145,
		_CountryCodeLowerString[435:438]: 146,
		_CountryCodeLowerString[438:441]: 147,
		_CountryCodeLowerString[441:444]: 148,
		_CountryCodeLowerString[444:447]: 149,
		_CountryCodeLowerString[447:450]: 150,
		_CountryCodeLowerString[450:453]: 151,
		_CountryCodeLowerString[453:456]: 152,
		_CountryCodeLowerString[456:459]: 153,
		_CountryCodeLowerString[459:462]: 154,
		_CountryCodeLowerString[462:465]: 155,
		_CountryCodeLowerString[465:468]: 156,
		_CountryCodeLowerString[468:471]: 157,
		_CountryCodeLowerString[471:474]: 158,
		_CountryCodeLowerString[474:477]: 159,
		_CountryCodeLowerString[477:480]: 160,
		_CountryCodeLowerString[480:483]: 161,
		_CountryCodeLowerString[483:486]: 162,
		_CountryCodeLowerString[486:489]: 163,
		_CountryCodeLowerString[489:492]: 164,
		_CountryCodeLowerString[492:495]: 165,
		_CountryCodeLowerString[495:498]: 166,
		_CountryCodeLowerString[498:501]: 167,
		_CountryCodeLowerString[501:504]: 168,
		_CountryCodeLowerString[504:507]: 169,
		_CountryCodeLowerString[507:510]: 170,
		_CountryCodeLowerString[510:513]: 171,
		_CountryCodeLowerString[513:516]: 172,
		_CountryCodeLowerString[516:519]: 173,
		_CountryCodeLowerString[519:522]: 174,
		_CountryCodeLowerString[522:525]: 175,
		_CountryCodeLowerString[525:528]: 176,
		_CountryCodeLowerString[528:531]: 177,
		_CountryCodeLowerString[531:534]: 178,
		_CountryCodeLowerString[534:537]: 179,
		_CountryCodeLowerString[537:540]: 180,
		_CountryCodeLowerString[540:543]: 181,
		_CountryCodeLowerString[543:546]: 182,
		_CountryCodeLowerString[546:549]: 183,
		_CountryCodeLowerString[549:552]: 184,
		_CountryCodeLowerString[552:555]: 185,
		_CountryCodeLowerString[555:558]: 186,
		_CountryCodeLowerString[558:561]: 187,
		_CountryCodeLowerString[561:564]: 188,
		_CountryCodeLowerString[564:567]: 189,
		_CountryCodeLowerString[567:570]: 190,
		_CountryCodeLowerString[570:573]: 191,
		_CountryCodeLowerString[573:576]: 192,
		_CountryCodeLowerString[576:579]: 193,
		_CountryCodeLowerString[579:582]: 194,
		_CountryCodeLowerString[582:585]: 195,
		_CountryCodeLowerString[585:588]: 196,
		_CountryCodeLowerString[588:591]: 197,
		_CountryCodeLowerString[591:594]: 198,
		_CountryCodeLowerString[594:597]: 199,
		_CountryCodeLowerString[597:600]: 200,
		_CountryCodeLowerString[600:603]: 201,
		_CountryCodeLowerString[603:606]: 202,
		_CountryCodeLowerString[606:609]: 203,
		_CountryCodeLowerString[609:612]: 204,
		_CountryCodeLowerString[612:615]: 205,
		_CountryCodeLowerString[615:618]: 206,
		_CountryCodeLowerString[618:621]: 207,
		_CountryCodeLowerString[621:624]: 208,
		_CountryCodeLowerString[624:627]: 209,
		_CountryCodeLowerString[627:630]: 210,
		_CountryCodeLowerString[630:633]: 211,
		_CountryCodeLowerString[633:636]: 212,
		_CountryCodeLowerString[636:639]: 213,
		_CountryCodeLowerString[639:642]: 214,
		_CountryCodeLowerString[642:645]: 215,
		_CountryCodeLowerString[645:648]: 216,
		_CountryCodeLowerString[648:651]: 217,
		_CountryCodeLowerString[651:654]: 218,
		_CountryCodeLowerString[654:657]: 219,
		_CountryCodeLowerString[657:660]: 220,
		_CountryCodeLowerString[660:663]: 221,
		_CountryCodeLowerString[663:666]: 222,
		_CountryCodeLowerString[666:669]: 223,
		_CountryCodeLowerString[669:672]: 224,
		_CountryCodeLowerString[672:675]: 225,
		_CountryCodeLowerString[675:678]: 226,
		_CountryCodeLowerString[678:681]: 227,
		_CountryCodeLowerString[681:684]: 228,
		_CountryCodeLowerString[684:687]: 229,
		_CountryCodeLowerString[687:690]: 230,
		_CountryCodeLowerString[690:693]: 231,
		_CountryCodeLowerString[693:696]: 232,
		_CountryCodeLowerString[696:699]: 233,
		_CountryCodeLowerString[699:702]: 234,
		_CountryCodeLowerString[702:705]: 235,
		_CountryCodeLowerString[705:708]: 236,
		_CountryCodeLowerString[708:711]: 237,
		_CountryCodeLowerString[711:714]: 238,
		_CountryCodeLowerString[714:717]: 239,
		_CountryCodeLowerString[717:720]: 240,
	}
)

// CountryCodeFromString determines the enum value with an exact case match.
func CountryCodeFromString(raw string) (CountryCode, bool) {
	v, ok := _CountryCodeStringToValueMap[raw]
	if !ok {
		return CountryCode(0), false
	}
	return v, true
}

// CountryCodeFromStringIgnoreCase determines the enum value with a case-insensitive match.
func CountryCodeFromStringIgnoreCase(raw string) (CountryCode, bool) {
	v, ok := CountryCodeFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _CountryCodeLowerStringToValueMap[raw]
	if !ok {
		return CountryCode(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for CountryCode.
func (_c CountryCode) MarshalBinary() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as CountryCode. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for CountryCode.
func (_c *CountryCode) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for CountryCode.
func (_c CountryCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_c.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for CountryCode.
func (_c *CountryCode) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of CountryCode: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for CountryCode.
func (_c CountryCode) MarshalJSON() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as CountryCode. %w", _c, err)
	}
	return json.Marshal(_c.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CountryCode.
func (_c *CountryCode) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("CountryCode should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

func (_c CountryCode) Value() (driver.Value, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as CountryCode. %w", _c, err)
	}
	return _c.String(), nil
}

func (_c *CountryCode) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of CountryCode: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for CountryCode.
func (_c CountryCode) MarshalText() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as CountryCode. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CountryCode.
func (_c *CountryCode) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for CountryCode.
func (_c CountryCode) MarshalYAML() (interface{}, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as CountryCode. %w", _c, err)
	}
	return _c.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CountryCode.
func (_c *CountryCode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("CountryCode cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CountryCodeFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a CountryCode", str)
	}
	return nil
}

const (
	_CurrencyString      = "USDEURJPYGBPAUD"
	_CurrencyLowerString = "usdeurjpygbpaud"
)

var (
	_CurrencyValueRange     = [2]Currency{1, 5}
	_CurrencyValues         = []Currency{1, 2, 3, 4, 5}
	_CurrencyStrings        = []string{_CurrencyString[0:3], _CurrencyString[3:6], _CurrencyString[6:9], _CurrencyString[9:12], _CurrencyString[12:15]}
	_CurrencyAdditionalData = map[Currency]struct {
		CurrencyName string
		NumericCode  uint16
		MinorUnit    uint8
	}{
		1: {"US Dollar", 840, 2},
		2: {"Euro", 978, 2},
		3: {"Yen", 392, 0},
		4: {"Pound Sterling", 826, 2},
		5: {"Australian Dollar", 036, 2},
	}
)

// CurrencyValues returns all values of the enum.
func CurrencyValues() []Currency {
	cp := make([]Currency, len(_CurrencyValues))
	copy(cp, _CurrencyValues)
	return cp
}

// CurrencyStrings returns a slice of all String values of the enum.
func CurrencyStrings() []string {
	cp := make([]string, len(_CurrencyStrings))
	copy(cp, _CurrencyStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_c Currency) IsValid() bool {
	return _c >= _CurrencyValueRange[0] && _c <= _CurrencyValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_c Currency) Validate() error {
	if !_c.IsValid() {
		return fmt.Errorf("Currency(%d) is %w", _c, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Currency(%d) instead.
func (_c Currency) String() string {
	if !_c.IsValid() {
		return fmt.Sprintf("Currency(%d)", _c)
	}
	idx := uint(_c) - 1
	return _CurrencyStrings[idx]
}

// GetCurrencyName returns the "currency-name" of the enum value as string
// if the enum is valid.
func (_c Currency) GetCurrencyName() (string, bool) {
	if !_c.IsValid() {
		return "", false
	}
	d, ok := _CurrencyAdditionalData[_c]
	return d.CurrencyName, ok
}

// GetNumericCode returns the "numeric-code" of the enum value as uint16
// if the enum is valid.
func (_c Currency) GetNumericCode() (uint16, bool) {
	if !_c.IsValid() {
		return 0, false
	}
	d, ok := _CurrencyAdditionalData[_c]
	return d.NumericCode, ok
}

// GetMinorUnit returns the "minor-unit" of the enum value as uint8
// if the enum is valid.
func (_c Currency) GetMinorUnit() (uint8, bool) {
	if !_c.IsValid() {
		return 0, false
	}
	d, ok := _CurrencyAdditionalData[_c]
	return d.MinorUnit, ok
}

var (
	_CurrencyStringToValueMap = map[string]Currency{
		_CurrencyString[0:3]:   1,
		_CurrencyString[3:6]:   2,
		_CurrencyString[6:9]:   3,
		_CurrencyString[9:12]:  4,
		_CurrencyString[12:15]: 5,
	}
	_CurrencyLowerStringToValueMap = map[string]Currency{
		_CurrencyLowerString[0:3]:   1,
		_CurrencyLowerString[3:6]:   2,
		_CurrencyLowerString[6:9]:   3,
		_CurrencyLowerString[9:12]:  4,
		_CurrencyLowerString[12:15]: 5,
	}
)

// CurrencyFromString determines the enum value with an exact case match.
func CurrencyFromString(raw string) (Currency, bool) {
	v, ok := _CurrencyStringToValueMap[raw]
	if !ok {
		return Currency(0), false
	}
	return v, true
}

// CurrencyFromStringIgnoreCase determines the enum value with a case-insensitive match.
func CurrencyFromStringIgnoreCase(raw string) (Currency, bool) {
	v, ok := CurrencyFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _CurrencyLowerStringToValueMap[raw]
	if !ok {
		return Currency(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Currency.
func (_c Currency) MarshalBinary() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Currency. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Currency.
func (_c *Currency) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Currency.
func (_c Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_c.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Currency.
func (_c *Currency) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Currency.
func (_c Currency) MarshalJSON() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Currency. %w", _c, err)
	}
	return json.Marshal(_c.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Currency.
func (_c *Currency) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("Currency should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

func (_c Currency) Value() (driver.Value, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as Currency. %w", _c, err)
	}
	return _c.String(), nil
}

func (_c *Currency) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Currency.
func (_c Currency) MarshalText() ([]byte, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Currency. %w", _c, err)
	}
	return []byte(_c.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Currency.
func (_c *Currency) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for Currency.
func (_c Currency) MarshalYAML() (interface{}, error) {
	if err := _c.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Currency. %w", _c, err)
	}
	return _c.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Currency.
func (_c *Currency) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

const (
	_TimezoneString      = "Asia/KabulEurope/TiraneAfrica/AlgiersPacific/Pago_PagoEurope/AndorraAfrica/LuandaAmerica/AnguillaAntarctica/CaseyAntarctica/DavisAntarctica/DumontDUrvilleAntarctica/MawsonAntarctica/McMurdoAntarctica/PalmerAntarctica/RotheraAntarctica/SyowaAntarctica/TrollAntarctica/VostokAmerica/AntiguaAmerica/Argentina/Buenos_AiresAmerica/Argentina/CatamarcaAmerica/Argentina/CordobaAmerica/Argentina/JujuyAmerica/Argentina/La_RiojaAmerica/Argentina/MendozaAmerica/Argentina/Rio_GallegosAmerica/Argentina/SaltaAmerica/Argentina/San_JuanAmerica/Argentina/San_LuisAmerica/Argentina/TucumanAmerica/Argentina/UshuaiaAsia/YerevanAmerica/ArubaAntarctica/MacquarieAustralia/AdelaideAustralia/BrisbaneAustralia/Broken_HillAustralia/DarwinAustralia/EuclaAustralia/HobartAustralia/LindemanAustralia/Lord_HoweAustralia/MelbourneAustralia/PerthAustralia/SydneyEurope/ViennaAsia/BakuAmerica/NassauAsia/BahrainAsia/DhakaAmerica/BarbadosEurope/MinskEurope/BrusselsAmerica/BelizeAfrica/Porto-NovoAtlantic/BermudaAsia/ThimphuAmerica/La_PazAmerica/KralendijkEurope/SarajevoAfrica/GaboroneAmerica/AraguainaAmerica/BahiaAmerica/BelemAmerica/Boa_VistaAmerica/Campo_GrandeAmerica/CuiabaAmerica/EirunepeAmerica/FortalezaAmerica/MaceioAmerica/ManausAmerica/NoronhaAmerica/Porto_VelhoAmerica/RecifeAmerica/Rio_BrancoAmerica/SantaremAmerica/Sao_PauloIndian/ChagosAsia/BruneiEurope/SofiaAfrica/OuagadougouAfrica/BujumburaAsia/Phnom_PenhAfrica/DoualaAmerica/AtikokanAmerica/Blanc-SablonAmerica/Cambridge_BayAmerica/CrestonAmerica/DawsonAmerica/Dawson_CreekAmerica/EdmontonAmerica/Fort_NelsonAmerica/Glace_BayAmerica/Goose_BayAmerica/HalifaxAmerica/InuvikAmerica/IqaluitAmerica/MonctonAmerica/NipigonAmerica/PangnirtungAmerica/Rainy_RiverAmerica/Rankin_InletAmerica/ReginaAmerica/ResoluteAmerica/St_JohnsAmerica/Swift_CurrentAmerica/Thunder_BayAmerica/TorontoAmerica/VancouverAmerica/WhitehorseAmerica/WinnipegAmerica/YellowknifeAtlantic/Cape_VerdeAmerica/CaymanAfrica/BanguiAfrica/NdjamenaAmerica/Punta_ArenasAmerica/SantiagoPacific/EasterAsia/ShanghaiAsia/UrumqiIndian/ChristmasIndian/CocosAmerica/BogotaIndian/ComoroAfrica/BrazzavilleAfrica/KinshasaAfrica/LubumbashiPacific/RarotongaAmerica/Costa_RicaEurope/ZagrebAmerica/HavanaAmerica/CuracaoAsia/FamagustaAsia/NicosiaEurope/PragueAfrica/AbidjanEurope/CopenhagenAfrica/DjiboutiAmerica/DominicaAmerica/Santo_DomingoAmerica/GuayaquilPacific/GalapagosAfrica/CairoAmerica/El_SalvadorAfrica/MalaboAfrica/AsmaraEurope/TallinnAfrica/Addis_AbabaAtlantic/StanleyAtlantic/FaroePacific/FijiEurope/HelsinkiEurope/ParisAmerica/CayennePacific/GambierPacific/MarquesasPacific/TahitiIndian/KerguelenAfrica/LibrevilleAfrica/BanjulAsia/TbilisiEurope/BerlinEurope/BusingenAfrica/AccraEurope/GibraltarEurope/AthensAmerica/DanmarkshavnAmerica/NuukAmerica/ScoresbysundAmerica/ThuleAmerica/GrenadaAmerica/GuadeloupePacific/GuamAmerica/GuatemalaEurope/GuernseyAfrica/ConakryAfrica/BissauAmerica/GuyanaAmerica/Port-au-PrinceEurope/VaticanAmerica/TegucigalpaAsia/Hong_KongEurope/BudapestAtlantic/ReykjavikAsia/KolkataAsia/JakartaAsia/JayapuraAsia/MakassarAsia/PontianakAsia/TehranAsia/BaghdadEurope/DublinEurope/Isle_of_ManAsia/JerusalemEurope/RomeAmerica/JamaicaAsia/TokyoEurope/JerseyAsia/AmmanAsia/AlmatyAsia/AqtauAsia/AqtobeAsia/AtyrauAsia/OralAsia/QostanayAsia/QyzylordaAfrica/NairobiPacific/KantonPacific/KiritimatiPacific/TarawaAsia/PyongyangAsia/SeoulAsia/KuwaitAsia/BishkekAsia/VientianeEurope/RigaAsia/BeirutAfrica/MaseruAfrica/MonroviaAfrica/TripoliEurope/VaduzEurope/VilniusEurope/LuxembourgAsia/MacauEurope/SkopjeIndian/AntananarivoAfrica/BlantyreAsia/Kuala_LumpurAsia/KuchingIndian/MaldivesAfrica/BamakoEurope/MaltaPacific/KwajaleinPacific/MajuroAmerica/MartiniqueAfrica/NouakchottIndian/MauritiusIndian/MayotteAmerica/Bahia_BanderasAmerica/CancunAmerica/ChihuahuaAmerica/HermosilloAmerica/MatamorosAmerica/MazatlanAmerica/MeridaAmerica/Mexico_CityAmerica/MonterreyAmerica/OjinagaAmerica/TijuanaPacific/ChuukPacific/KosraePacific/PohnpeiEurope/ChisinauEurope/MonacoAsia/ChoibalsanAsia/HovdAsia/UlaanbaatarEurope/PodgoricaAmerica/MontserratAfrica/CasablancaAfrica/MaputoAsia/YangonAfrica/WindhoekPacific/NauruAsia/KathmanduEurope/AmsterdamPacific/NoumeaPacific/AucklandPacific/ChathamAmerica/ManaguaAfrica/NiameyAfrica/LagosPacific/NiuePacific/NorfolkPacific/SaipanEurope/OsloAsia/MuscatAsia/KarachiPacific/PalauAsia/GazaAsia/HebronAmerica/PanamaPacific/BougainvillePacific/Port_MoresbyAmerica/AsuncionAmerica/LimaAsia/ManilaPacific/PitcairnEurope/WarsawAtlantic/AzoresAtlantic/MadeiraEurope/LisbonAmerica/Puerto_RicoAsia/QatarEurope/BucharestAsia/AnadyrAsia/BarnaulAsia/ChitaAsia/IrkutskAsia/KamchatkaAsia/KhandygaAsia/KrasnoyarskAsia/MagadanAsia/NovokuznetskAsia/NovosibirskAsia/OmskAsia/SakhalinAsia/SrednekolymskAsia/TomskAsia/Ust-NeraAsia/VladivostokAsia/YakutskAsia/YekaterinburgEurope/AstrakhanEurope/KaliningradEurope/KirovEurope/MoscowEurope/SamaraEurope/SaratovEurope/UlyanovskEurope/VolgogradAfrica/KigaliIndian/ReunionAmerica/St_BarthelemyAtlantic/St_HelenaAmerica/St_KittsAmerica/St_LuciaAmerica/MarigotAmerica/MiquelonAmerica/St_VincentPacific/ApiaEurope/San_MarinoAfrica/Sao_TomeAsia/RiyadhAfrica/DakarEurope/BelgradeIndian/MaheAfrica/FreetownAsia/SingaporeAmerica/Lower_PrincesEurope/BratislavaEurope/LjubljanaPacific/GuadalcanalAfrica/MogadishuAfrica/JohannesburgAtlantic/South_GeorgiaAfrica/JubaAfrica/CeutaAtlantic/CanaryEurope/MadridAsia/ColomboAfrica/KhartoumAmerica/ParamariboArctic/LongyearbyenAfrica/MbabaneEurope/StockholmEurope/ZurichAsia/DamascusAsia/TaipeiAsia/DushanbeAfrica/Dar_es_SalaamAsia/BangkokAsia/DiliAfrica/LomePacific/FakaofoPacific/TongatapuAmerica/Port_of_SpainAfrica/TunisEurope/IstanbulAsia/AshgabatAmerica/Grand_TurkPacific/FunafutiAfrica/KampalaEurope/KievEurope/SimferopolEurope/UzhgorodEurope/ZaporozhyeAsia/DubaiEurope/LondonAmerica/AdakAmerica/AnchorageAmerica/BoiseAmerica/ChicagoAmerica/DenverAmerica/DetroitAmerica/Indiana/IndianapolisAmerica/Indiana/KnoxAmerica/Indiana/MarengoAmerica/Indiana/PetersburgAmerica/Indiana/Tell_CityAmerica/Indiana/VevayAmerica/Indiana/VincennesAmerica/Indiana/WinamacAmerica/JuneauAmerica/Kentucky/LouisvilleAmerica/Kentucky/MonticelloAmerica/Los_AngelesAmerica/MenomineeAmerica/MetlakatlaAmerica/New_YorkAmerica/NomeAmerica/North_Dakota/BeulahAmerica/North_Dakota/CenterAmerica/North_Dakota/New_SalemAmerica/PhoenixAmerica/SitkaAmerica/YakutatPacific/HonoluluPacific/MidwayPacific/WakeAmerica/MontevideoAsia/SamarkandAsia/TashkentPacific/EfateAmerica/CaracasAsia/Ho_Chi_MinhAmerica/TortolaAmerica/St_ThomasPacific/WallisAfrica/El_AaiunAsia/AdenAfrica/LusakaAfrica/HarareEurope/Mariehamn"
	_TimezoneLowerString = "asia/kabuleurope/tiraneafrica/algierspacific/pago_pagoeurope/andorraafrica/luandaamerica/anguillaantarctica/caseyantarctica/davisantarctica/dumontdurvilleantarctica/mawsonantarctica/mcmurdoantarctica/palmerantarctica/rotheraantarctica/syowaantarctica/trollantarctica/vostokamerica/antiguaamerica/argentina/buenos_airesamerica/argentina/catamarcaamerica/argentina/cordobaamerica/argentina/jujuyamerica/argentina/la_riojaamerica/argentina/mendozaamerica/argentina/rio_gallegosamerica/argentina/saltaamerica/argentina/san_juanamerica/argentina/san_luisamerica/argentina/tucumanamerica/argentina/ushuaiaasia/yerevanamerica/arubaantarctica/macquarieaustralia/adelaideaustralia/brisbaneaustralia/broken_hillaustralia/darwinaustralia/euclaaustralia/hobartaustralia/lindemanaustralia/lord_howeaustralia/melbourneaustralia/perthaustralia/sydneyeurope/viennaasia/bakuamerica/nassauasia/bahrainasia/dhakaamerica/barbadoseurope/minskeurope/brusselsamerica/belizeafrica/porto-novoatlantic/bermudaasia/thimphuamerica/la_pazamerica/kralendijkeurope/sarajevoafrica/gaboroneamerica/araguainaamerica/bahiaamerica/belemamerica/boa_vistaamerica/campo_grandeamerica/cuiabaamerica/eirunepeamerica/fortalezaamerica/maceioamerica/manausamerica/noronhaamerica/porto_velhoamerica/recifeamerica/rio_brancoamerica/santaremamerica/sao_pauloindian/chagosasia/bruneieurope/sofiaafrica/ouagadougouafrica/bujumburaasia/phnom_penhafrica/doualaamerica/atikokanamerica/blanc-sablonamerica/cambridge_bayamerica/crestonamerica/dawsonamerica/dawson_creekamerica/edmontonamerica/fort_nelsonamerica/glace_bayamerica/goose_bayamerica/halifaxamerica/inuvikamerica/iqaluitamerica/monctonamerica/nipigonamerica/pangnirtungamerica/rainy_riveramerica/rankin_inletamerica/reginaamerica/resoluteamerica/st_johnsamerica/swift_currentamerica/thunder_bayamerica/torontoamerica/vancouveramerica/whitehorseamerica/winnipegamerica/yellowknifeatlantic/cape_verdeamerica/caymanafrica/banguiafrica/ndjamenaamerica/punta_arenasamerica/santiagopacific/easterasia/shanghaiasia/urumqiindian/christmasindian/cocosamerica/bogotaindian/comoroafrica/brazzavilleafrica/kinshasaafrica/lubumbashipacific/rarotongaamerica/costa_ricaeurope/zagrebamerica/havanaamerica/curacaoasia/famagustaasia/nicosiaeurope/pragueafrica/abidjaneurope/copenhagenafrica/djiboutiamerica/dominicaamerica/santo_domingoamerica/guayaquilpacific/galapagosafrica/cairoamerica/el_salvadorafrica/malaboafrica/asmaraeurope/tallinnafrica/addis_ababaatlantic/stanleyatlantic/faroepacific/fijieurope/helsinkieurope/parisamerica/cayennepacific/gambierpacific/marquesaspacific/tahitiindian/kerguelenafrica/librevilleafrica/banjulasia/tbilisieurope/berlineurope/busingenafrica/accraeurope/gibraltareurope/athensamerica/danmarkshavnamerica/nuukamerica/scoresbysundamerica/thuleamerica/grenadaamerica/guadeloupepacific/guamamerica/guatemalaeurope/guernseyafrica/conakryafrica/bissauamerica/guyanaamerica/port-au-princeeurope/vaticanamerica/tegucigalpaasia/hong_kongeurope/budapestatlantic/reykjavikasia/kolkataasia/jakartaasia/jayapuraasia/makassarasia/pontianakasia/tehranasia/baghdadeurope/dublineurope/isle_of_manasia/jerusalemeurope/romeamerica/jamaicaasia/tokyoeurope/jerseyasia/ammanasia/almatyasia/aqtauasia/aqtobeasia/atyrauasia/oralasia/qostanayasia/qyzylordaafrica/nairobipacific/kantonpacific/kiritimatipacific/tarawaasia/pyongyangasia/seoulasia/kuwaitasia/bishkekasia/vientianeeurope/rigaasia/beirutafrica/maseruafrica/monroviaafrica/tripolieurope/vaduzeurope/vilniuseurope/luxembourgasia/macaueurope/skopjeindian/antananarivoafrica/blantyreasia/kuala_lumpurasia/kuchingindian/maldivesafrica/bamakoeurope/maltapacific/kwajaleinpacific/majuroamerica/martiniqueafrica/nouakchottindian/mauritiusindian/mayotteamerica/bahia_banderasamerica/cancunamerica/chihuahuaamerica/hermosilloamerica/matamorosamerica/mazatlanamerica/meridaamerica/mexico_cityamerica/monterreyamerica/ojinagaamerica/tijuanapacific/chuukpacific/kosraepacific/pohnpeieurope/chisinaueurope/monacoasia/choibalsanasia/hovdasia/ulaanbaatareurope/podgoricaamerica/montserratafrica/casablancaafrica/maputoasia/yangonafrica/windhoekpacific/nauruasia/kathmandueurope/amsterdampacific/noumeapacific/aucklandpacific/chathamamerica/managuaafrica/niameyafrica/lagospacific/niuepacific/norfolkpacific/saipaneurope/osloasia/muscatasia/karachipacific/palauasia/gazaasia/hebronamerica/panamapacific/bougainvillepacific/port_moresbyamerica/asuncionamerica/limaasia/manilapacific/pitcairneurope/warsawatlantic/azoresatlantic/madeiraeurope/lisbonamerica/puerto_ricoasia/qatareurope/bucharestasia/anadyrasia/barnaulasia/chitaasia/irkutskasia/kamchatkaasia/khandygaasia/krasnoyarskasia/magadanasia/novokuznetskasia/novosibirskasia/omskasia/sakhalinasia/srednekolymskasia/tomskasia/ust-neraasia/vladivostokasia/yakutskasia/yekaterinburgeurope/astrakhaneurope/kaliningradeurope/kiroveurope/moscoweurope/samaraeurope/saratoveurope/ulyanovskeurope/volgogradafrica/kigaliindian/reunionamerica/st_barthelemyatlantic/st_helenaamerica/st_kittsamerica/st_luciaamerica/marigotamerica/miquelonamerica/st_vincentpacific/apiaeurope/san_marinoafrica/sao_tomeasia/riyadhafrica/dakareurope/belgradeindian/maheafrica/freetownasia/singaporeamerica/lower_princeseurope/bratislavaeurope/ljubljanapacific/guadalcanalafrica/mogadishuafrica/johannesburgatlantic/south_georgiaafrica/jubaafrica/ceutaatlantic/canaryeurope/madridasia/colomboafrica/khartoumamerica/paramariboarctic/longyearbyenafrica/mbabaneeurope/stockholmeurope/zurichasia/damascusasia/taipeiasia/dushanbeafrica/dar_es_salaamasia/bangkokasia/diliafrica/lomepacific/fakaofopacific/tongatapuamerica/port_of_spainafrica/tuniseurope/istanbulasia/ashgabatamerica/grand_turkpacific/funafutiafrica/kampalaeurope/kieveurope/simferopoleurope/uzhgorodeurope/zaporozhyeasia/dubaieurope/londonamerica/adakamerica/anchorageamerica/boiseamerica/chicagoamerica/denveramerica/detroitamerica/indiana/indianapolisamerica/indiana/knoxamerica/indiana/marengoamerica/indiana/petersburgamerica/indiana/tell_cityamerica/indiana/vevayamerica/indiana/vincennesamerica/indiana/winamacamerica/juneauamerica/kentucky/louisvilleamerica/kentucky/monticelloamerica/los_angelesamerica/menomineeamerica/metlakatlaamerica/new_yorkamerica/nomeamerica/north_dakota/beulahamerica/north_dakota/centeramerica/north_dakota/new_salemamerica/phoenixamerica/sitkaamerica/yakutatpacific/honolulupacific/midwaypacific/wakeamerica/montevideoasia/samarkandasia/tashkentpacific/efateamerica/caracasasia/ho_chi_minhamerica/tortolaamerica/st_thomaspacific/wallisafrica/el_aaiunasia/adenafrica/lusakaafrica/harareeurope/mariehamn"
)

var (
	_TimezoneValueRange = [2]Timezone{1, 424}
	_TimezoneValues     = []Timezone{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424}
	_TimezoneStrings    = []string{_TimezoneString[0:10], _TimezoneString[10:23], _TimezoneString[23:37], _TimezoneString[37:54], _TimezoneString[54:68], _TimezoneString[68:81], _TimezoneString[81:97], _TimezoneString[97:113], _TimezoneString[113:129], _TimezoneString[129:154], _TimezoneString[154:171], _TimezoneString[171:189], _TimezoneString[189:206], _TimezoneString[206:224], _TimezoneString[224:240], _TimezoneString[240:256], _TimezoneString[256:273], _TimezoneString[273:288], _TimezoneString[288:318], _TimezoneString[318:345], _TimezoneString[345:370], _TimezoneString[370:393], _TimezoneString[393:419], _TimezoneString[419:444], _TimezoneString[444:474], _TimezoneString[474:497], _TimezoneString[497:523], _TimezoneString[523:549], _TimezoneString[549:574], _TimezoneString[574:599], _TimezoneString[599:611], _TimezoneString[611:624], _TimezoneString[624:644], _TimezoneString[644:662], _TimezoneString[662:680], _TimezoneString[680:701], _TimezoneString[701:717], _TimezoneString[717:732], _TimezoneString[732:748], _TimezoneString[748:766], _TimezoneString[766:785], _TimezoneString[785:804], _TimezoneString[804:819], _TimezoneString[819:835], _TimezoneString[835:848], _TimezoneString[848:857], _TimezoneString[857:871], _TimezoneString[871:883], _TimezoneString[883:893], _TimezoneString[893:909], _TimezoneString[909:921], _TimezoneString[921:936], _TimezoneString[936:950], _TimezoneString[950:967], _TimezoneString[967:983], _TimezoneString[983:995], _TimezoneString[995:1009], _TimezoneString[1009:1027], _TimezoneString[1027:1042], _TimezoneString[1042:1057], _TimezoneString[1057:1074], _TimezoneString[1074:1087], _TimezoneString[1087:1100], _TimezoneString[1100:1117], _TimezoneString[1117:1137], _TimezoneString[1137:1151], _TimezoneString[1151:1167], _TimezoneString[1167:1184], _TimezoneString[1184:1198], _TimezoneString[1198:1212], _TimezoneString[1212:1227], _TimezoneString[1227:1246], _TimezoneString[1246:1260], _TimezoneString[1260:1278], _TimezoneString[1278:1294], _TimezoneString[1294:1311], _TimezoneString[1311:1324], _TimezoneString[1324:1335], _TimezoneString[1335:1347], _TimezoneString[1347:1365], _TimezoneString[1365:1381], _TimezoneString[1381:1396], _TimezoneString[1396:1409], _TimezoneString[1409:1425], _TimezoneString[1425:1445], _TimezoneString[1445:1466], _TimezoneString[1466:1481], _TimezoneString[1481:1495], _TimezoneString[1495:1515], _TimezoneString[1515:1531], _TimezoneString[1531:1550], _TimezoneString[1550:1567], _TimezoneString[1567:1584], _TimezoneString[1584:1599], _TimezoneString[1599:1613], _TimezoneString[1613:1628], _TimezoneString[1628:1643], _TimezoneString[1643:1658], _TimezoneString[1658:1677], _TimezoneString[1677:1696], _TimezoneString[1696:1716], _TimezoneString[1716:1730], _TimezoneString[1730:1746], _TimezoneString[1746:1762], _TimezoneString[1762:1783], _TimezoneString[1783:1802], _TimezoneString[1802:1817], _TimezoneString[1817:1834], _TimezoneString[1834:1852], _TimezoneString[1852:1868], _TimezoneString[1868:1887], _TimezoneString[1887:1906], _TimezoneString[1906:1920], _TimezoneString[1920:1933], _TimezoneString[1933:1948], _TimezoneString[1948:1968], _TimezoneString[1968:1984], _TimezoneString[1984:1998], _TimezoneString[1998:2011], _TimezoneString[2011:2022], _TimezoneString[2022:2038], _TimezoneString[2038:2050], _TimezoneString[2050:2064], _TimezoneString[2064:2077], _TimezoneString[2077:2095], _TimezoneString[2095:2110], _TimezoneString[2110:2127], _TimezoneString[2127:2144], _TimezoneString[2144:2162], _TimezoneString[2162:2175], _TimezoneString[2175:2189], _TimezoneString[2189:2204], _TimezoneString[2204:2218], _TimezoneString[2218:2230], _TimezoneString[2230:2243], _TimezoneString[2243:2257], _TimezoneString[2257:2274], _TimezoneString[2274:2289], _TimezoneString[2289:2305], _TimezoneString[2305:2326], _TimezoneString[2326:2343], _TimezoneString[2343:2360], _TimezoneString[2360:2372], _TimezoneString[2372:2391], _TimezoneString[2391:2404], _TimezoneString[2404:2417], _TimezoneString[2417:2431], _TimezoneString[2431:2449], _TimezoneString[2449:2465], _TimezoneString[2465:2479], _TimezoneString[2479:2491], _TimezoneString[2491:2506], _TimezoneString[2506:2518], _TimezoneString[2518:2533], _TimezoneString[2533:2548], _TimezoneString[2548:2565], _TimezoneString[2565:2579], _TimezoneString[2579:2595], _TimezoneString[2595:2612], _TimezoneString[2612:2625], _TimezoneString[2625:2637], _TimezoneString[2637:2650], _TimezoneString[2650:2665], _TimezoneString[2665:2677], _TimezoneString[2677:2693], _TimezoneString[2693:2706], _TimezoneString[2706:2726], _TimezoneString[2726:2738], _TimezoneString[2738:2758], _TimezoneString[2758:2771], _TimezoneString[2771:2786], _TimezoneString[2786:2804], _TimezoneString[2804:2816], _TimezoneString[2816:2833], _TimezoneString[2833:2848], _TimezoneString[2848:2862], _TimezoneString[2862:2875], _TimezoneString[2875:2889], _TimezoneString[2889:2911], _TimezoneString[2911:2925], _TimezoneString[2925:2944], _TimezoneString[2944:2958], _TimezoneString[2958:2973], _TimezoneString[2973:2991], _TimezoneString[2991:3003], _TimezoneString[3003:3015], _TimezoneString[3015:3028], _TimezoneString[3028:3041], _TimezoneString[3041:3055], _TimezoneString[3055:3066], _TimezoneString[3066:3078], _TimezoneString[3078:3091], _TimezoneString[3091:3109], _TimezoneString[3109:3123], _TimezoneString[3123:3134], _TimezoneString[3134:3149], _TimezoneString[3149:3159], _TimezoneString[3159:3172], _TimezoneString[3172:3182], _TimezoneString[3182:3193], _TimezoneString[3193:3203], _TimezoneString[3203:3214], _TimezoneString[3214:3225], _TimezoneString[3225:3234], _TimezoneString[3234:3247], _TimezoneString[3247:3261], _TimezoneString[3261:3275], _TimezoneString[3275:3289], _TimezoneString[3289:3307], _TimezoneString[3307:3321], _TimezoneString[3321:3335], _TimezoneString[3335:3345], _TimezoneString[3345:3356], _TimezoneString[3356:3368], _TimezoneString[3368:3382], _TimezoneString[3382:3393], _TimezoneString[3393:3404], _TimezoneString[3404:3417], _TimezoneString[3417:3432], _TimezoneString[3432:3446], _TimezoneString[3446:3458], _TimezoneString[3458:3472], _TimezoneString[3472:3489], _TimezoneString[3489:3499], _TimezoneString[3499:3512], _TimezoneString[3512:3531], _TimezoneString[3531:3546], _TimezoneString[3546:3563], _TimezoneString[3563:3575], _TimezoneString[3575:3590], _TimezoneString[3590:3603], _TimezoneString[3603:3615], _TimezoneString[3615:3632], _TimezoneString[3632:3646], _TimezoneString[3646:3664], _TimezoneString[3664:3681], _TimezoneString[3681:3697], _TimezoneString[3697:3711], _TimezoneString[3711:3733], _TimezoneString[3733:3747], _TimezoneString[3747:3764], _TimezoneString[3764:3782], _TimezoneString[3782:3799], _TimezoneString[3799:3815], _TimezoneString[3815:3829], _TimezoneString[3829:3848], _TimezoneString[3848:3865], _TimezoneString[3865:3880], _TimezoneString[3880:3895], _TimezoneString[3895:3908], _TimezoneString[3908:3922], _TimezoneString[3922:3937], _TimezoneString[3937:3952], _TimezoneString[3952:3965], _TimezoneString[3965:3980], _TimezoneString[3980:3989], _TimezoneString[3989:4005], _TimezoneString[4005:4021], _TimezoneString[4021:4039], _TimezoneString[4039:4056], _TimezoneString[4056:4069], _TimezoneString[4069:4080], _TimezoneString[4080:4095], _TimezoneString[4095:4108], _TimezoneString[4108:4122], _TimezoneString[4122:4138], _TimezoneString[4138:4152], _TimezoneString[4152:4168], _TimezoneString[4168:4183], _TimezoneString[4183:4198], _TimezoneString[4198:4211], _TimezoneString[4211:4223], _TimezoneString[4223:4235], _TimezoneString[4235:4250], _TimezoneString[4250:4264], _TimezoneString[4264:4275], _TimezoneString[4275:4286], _TimezoneString[4286:4298], _TimezoneString[4298:4311], _TimezoneString[4311:4320], _TimezoneString[4320:4331], _TimezoneString[4331:4345], _TimezoneString[4345:4365], _TimezoneString[4365:4385], _TimezoneString[4385:4401], _TimezoneString[4401:4413], _TimezoneString[4413:4424], _TimezoneString[4424:4440], _TimezoneString[4440:4453], _TimezoneString[4453:4468], _TimezoneString[4468:4484], _TimezoneString[4484:4497], _TimezoneString[4497:4516], _TimezoneString[4516:4526], _TimezoneString[4526:4542], _TimezoneString[4542:4553], _TimezoneString[4553:4565], _TimezoneString[4565:4575], _TimezoneString[4575:4587], _TimezoneString[4587:4601], _TimezoneString[4601:4614], _TimezoneString[4614:4630], _TimezoneString[4630:4642], _TimezoneString[4642:4659], _TimezoneString[4659:4675], _TimezoneString[4675:4684], _TimezoneString[4684:4697], _TimezoneString[4697:4715], _TimezoneString[4715:4725], _TimezoneString[4725:4738], _TimezoneString[4738:4754], _TimezoneString[4754:4766], _TimezoneString[4766:4784], _TimezoneString[4784:4800], _TimezoneString[4800:4818], _TimezoneString[4818:4830], _TimezoneString[4830:4843], _TimezoneString[4843:4856], _TimezoneString[4856:4870], _TimezoneString[4870:4886], _TimezoneString[4886:4902], _TimezoneString[4902:4915], _TimezoneString[4915:4929], _TimezoneString[4929:4950], _TimezoneString[4950:4968], _TimezoneString[4968:4984], _TimezoneString[4984:5000], _TimezoneString[5000:5015], _TimezoneString[5015:5031], _TimezoneString[5031:5049], _TimezoneString[5049:5061], _TimezoneString[5061:5078], _TimezoneString[5078:5093], _TimezoneString[5093:5104], _TimezoneString[5104:5116], _TimezoneString[5116:5131], _TimezoneString[5131:5142], _TimezoneString[5142:5157], _TimezoneString[5157:5171], _TimezoneString[5171:5192], _TimezoneString[5192:5209], _TimezoneString[5209:5225], _TimezoneString[5225:5244], _TimezoneString[5244:5260], _TimezoneString[5260:5279], _TimezoneString[5279:5301], _TimezoneString[5301:5312], _TimezoneString[5312:5324], _TimezoneString[5324:5339], _TimezoneString[5339:5352], _TimezoneString[5352:5364], _TimezoneString[5364:5379], _TimezoneString[5379:5397], _TimezoneString[5397:5416], _TimezoneString[5416:5430], _TimezoneString[5430:5446], _TimezoneString[5446:5459], _TimezoneString[5459:5472], _TimezoneString[5472:5483], _TimezoneString[5483:5496], _TimezoneString[5496:5516], _TimezoneString[5516:5528], _TimezoneString[5528:5537], _TimezoneString[5537:5548], _TimezoneString[5548:5563], _TimezoneString[5563:5580], _TimezoneString[5580:5601], _TimezoneString[5601:5613], _TimezoneString[5613:5628], _TimezoneString[5628:5641], _TimezoneString[5641:5659], _TimezoneString[5659:5675], _TimezoneString[5675:5689], _TimezoneString[5689:5700], _TimezoneString[5700:5717], _TimezoneString[5717:5732], _TimezoneString[5732:5749], _TimezoneString[5749:5759], _TimezoneString[5759:5772], _TimezoneString[5772:5784], _TimezoneString[5784:5801], _TimezoneString[5801:5814], _TimezoneString[5814:5829], _TimezoneString[5829:5843], _TimezoneString[5843:5858], _TimezoneString[5858:5886], _TimezoneString[5886:5906], _TimezoneString[5906:5929], _TimezoneString[5929:5955], _TimezoneString[5955:5980], _TimezoneString[5980:6001], _TimezoneString[6001:6026], _TimezoneString[6026:6049], _TimezoneString[6049:6063], _TimezoneString[6063:6090], _TimezoneString[6090:6117], _TimezoneString[6117:6136], _TimezoneString[6136:6153], _TimezoneString[6153:6171], _TimezoneString[6171:6187], _TimezoneString[6187:6199], _TimezoneString[6199:6226], _TimezoneString[6226:6253], _TimezoneString[6253:6283], _TimezoneString[6283:6298], _TimezoneString[6298:6311], _TimezoneString[6311:6326], _TimezoneString[6326:6342], _TimezoneString[6342:6356], _TimezoneString[6356:6368], _TimezoneString[6368:6386], _TimezoneString[6386:6400], _TimezoneString[6400:6413], _TimezoneString[6413:6426], _TimezoneString[6426:6441], _TimezoneString[6441:6457], _TimezoneString[6457:6472], _TimezoneString[6472:6489], _TimezoneString[6489:6503], _TimezoneString[6503:6518], _TimezoneString[6518:6527], _TimezoneString[6527:6540], _TimezoneString[6540:6553], _TimezoneString[6553:6569]}
)

// TimezoneValues returns all values of the enum.
func TimezoneValues() []Timezone {
	cp := make([]Timezone, len(_TimezoneValues))
	copy(cp, _TimezoneValues)
	return cp
}

// TimezoneStrings returns a slice of all String values of the enum.
func TimezoneStrings() []string {
	cp := make([]string, len(_TimezoneStrings))
	copy(cp, _TimezoneStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_t Timezone) IsValid() bool {
	return _t >= _TimezoneValueRange[0] && _t <= _TimezoneValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_t Timezone) Validate() error {
	if !_t.IsValid() {
		return fmt.Errorf("Timezone(%d) is %w", _t, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Timezone(%d) instead.
func (_t Timezone) String() string {
	if !_t.IsValid() {
		return fmt.Sprintf("Timezone(%d)", _t)
	}
	idx := uint(_t) - 1
	return _TimezoneStrings[idx]
}

var (
	_TimezoneStringToValueMap = map[string]Timezone{
		_TimezoneString[0:10]:      1,
		_TimezoneString[10:23]:     2,
		_TimezoneString[23:37]:     3,
		_TimezoneString[37:54]:     4,
		_TimezoneString[54:68]:     5,
		_TimezoneString[68:81]:     6,
		_TimezoneString[81:97]:     7,
		_TimezoneString[97:113]:    8,
		_TimezoneString[113:129]:   9,
		_TimezoneString[129:154]:   10,
		_TimezoneString[154:171]:   11,
		_TimezoneString[171:189]:   12,
		_TimezoneString[189:206]:   13,
		_TimezoneString[206:224]:   14,
		_TimezoneString[224:240]:   15,
		_TimezoneString[240:256]:   16,
		_TimezoneString[256:273]:   17,
		_TimezoneString[273:288]:   18,
		_TimezoneString[288:318]:   19,
		_TimezoneString[318:345]:   20,
		_TimezoneString[345:370]:   21,
		_TimezoneString[370:393]:   22,
		_TimezoneString[393:419]:   23,
		_TimezoneString[419:444]:   24,
		_TimezoneString[444:474]:   25,
		_TimezoneString[474:497]:   26,
		_TimezoneString[497:523]:   27,
		_TimezoneString[523:549]:   28,
		_TimezoneString[549:574]:   29,
		_TimezoneString[574:599]:   30,
		_TimezoneString[599:611]:   31,
		_TimezoneString[611:624]:   32,
		_TimezoneString[624:644]:   33,
		_TimezoneString[644:662]:   34,
		_TimezoneString[662:680]:   35,
		_TimezoneString[680:701]:   36,
		_TimezoneString[701:717]:   37,
		_TimezoneString[717:732]:   38,
		_TimezoneString[732:748]:   39,
		_TimezoneString[748:766]:   40,
		_TimezoneString[766:785]:   41,
		_TimezoneString[785:804]:   42,
		_TimezoneString[804:819]:   43,
		_TimezoneString[819:835]:   44,
		_TimezoneString[835:848]:   45,
		_TimezoneString[848:857]:   46,
		_TimezoneString[857:871]:   47,
		_TimezoneString[871:883]:   48,
		_TimezoneString[883:893]:   49,
		_TimezoneString[893:909]:   50,
		_TimezoneString[909:921]:   51,
		_TimezoneString[921:936]:   52,
		_TimezoneString[936:950]:   53,
		_TimezoneString[950:967]:   54,
		_TimezoneString[967:983]:   55,
		_TimezoneString[983:995]:   56,
		_TimezoneString[995:1009]:  57,
		_TimezoneString[1009:1027]: 58,
		_TimezoneString[1027:1042]: 59,
		_TimezoneString[1042:1057]: 60,
		_TimezoneString[1057:1074]: 61,
		_TimezoneString[1074:1087]: 62,
		_TimezoneString[1087:1100]: 63,
		_TimezoneString[1100:1117]: 64,
		_TimezoneString[1117:1137]: 65,
		_TimezoneString[1137:1151]: 66,
		_TimezoneString[1151:1167]: 67,
		_TimezoneString[1167:1184]: 68,
		_TimezoneString[1184:1198]: 69,
		_TimezoneString[1198:1212]: 70,
		_TimezoneString[1212:1227]: 71,
		_TimezoneString[1227:1246]: 72,
		_TimezoneString[1246:1260]: 73,
		_TimezoneString[1260:1278]: 74,
		_TimezoneString[1278:1294]: 75,
		_TimezoneString[1294:1311]: 76,
		_TimezoneString[1311:1324]: 77,
		_TimezoneString[1324:1335]: 78,
		_TimezoneString[1335:1347]: 79,
		_TimezoneString[1347:1365]: 80,
		_TimezoneString[1365:1381]: 81,
		_TimezoneString[1381:1396]: 82,
		_TimezoneString[1396:1409]: 83,
		_TimezoneString[1409:1425]: 84,
		_TimezoneString[1425:1445]: 85,
		_TimezoneString[1445:1466]: 86,
		_TimezoneString[1466:1481]: 87,
		_TimezoneString[1481:1495]: 88,
		_TimezoneString[1495:1515]: 89,
		_TimezoneString[1515:1531]: 90,
		_TimezoneString[1531:1550]: 91,
		_TimezoneString[1550:1567]: 92,
		_TimezoneString[1567:1584]: 93,
		_TimezoneString[1584:1599]: 94,
		_TimezoneString[1599:1613]: 95,
		_TimezoneString[1613:1628]: 96,
		_TimezoneString[1628:1643]: 97,
		_TimezoneString[1643:1658]: 98,
		_TimezoneString[1658:1677]: 99,
		_TimezoneString[1677:1696]: 100,
		_TimezoneString[1696:1716]: 101,
		_TimezoneString[1716:1730]: 102,
		_TimezoneString[1730:1746]: 103,
		_TimezoneString[1746:1762]: 104,
		_TimezoneString[1762:1783]: 105,
		_TimezoneString[1783:1802]: 106,
		_TimezoneString[1802:1817]: 107,
		_TimezoneString[1817:1834]: 108,
		_TimezoneString[1834:1852]: 109,
		_TimezoneString[1852:1868]: 110,
		_TimezoneString[1868:1887]: 111,
		_TimezoneString[1887:1906]: 112,
		_TimezoneString[1906:1920]: 113,
		_TimezoneString[1920:1933]: 114,
		_TimezoneString[1933:1948]: 115,
		_TimezoneString[1948:1968]: 116,
		_TimezoneString[1968:1984]: 117,
		_TimezoneString[1984:1998]: 118,
		_TimezoneString[1998:2011]: 119,
		_TimezoneString[2011:2022]: 120,
		_TimezoneString[2022:2038]: 121,
		_TimezoneString[2038:2050]: 122,
		_TimezoneString[2050:2064]: 123,
		_TimezoneString[2064:2077]: 124,
		_TimezoneString[2077:2095]: 125,
		_TimezoneString[2095:2110]: 126,
		_TimezoneString[2110:2127]: 127,
		_TimezoneString[2127:2144]: 128,
		_TimezoneString[2144:2162]: 129,
		_TimezoneString[2162:2175]: 130,
		_TimezoneString[2175:2189]: 131,
		_TimezoneString[2189:2204]: 132,
		_TimezoneString[2204:2218]: 133,
		_TimezoneString[2218:2230]: 134,
		_TimezoneString[2230:2243]: 135,
		_TimezoneString[2243:2257]: 136,
		_TimezoneString[2257:2274]: 137,
		_TimezoneString[2274:2289]: 138,
		_TimezoneString[2289:2305]: 139,
		_TimezoneString[2305:2326]: 140,
		_TimezoneString[2326:2343]: 141,
		_TimezoneString[2343:2360]: 142,
		_TimezoneString[2360:2372]: 143,
		_TimezoneString[2372:2391]: 144,
		_TimezoneString[2391:2404]: 145,
		_TimezoneString[2404:2417]: 146,
		_TimezoneString[2417:2431]: 147,
		_TimezoneString[2431:2449]: 148,
		_TimezoneString[2449:2465]: 149,
		_TimezoneString[2465:2479]: 150,
		_TimezoneString[2479:2491]: 151,
		_TimezoneString[2491:2506]: 152,
		_TimezoneString[2506:2518]: 153,
		_TimezoneString[2518:2533]: 154,
		_TimezoneString[2533:2548]: 155,
		_TimezoneString[2548:2565]: 156,
		_TimezoneString[2565:2579]: 157,
		_TimezoneString[2579:2595]: 158,
		_TimezoneString[2595:2612]: 159,
		_TimezoneString[2612:2625]: 160,
		_TimezoneString[2625:2637]: 161,
		_TimezoneString[2637:2650]: 162,
		_TimezoneString[2650:2665]: 163,
		_TimezoneString[2665:2677]: 164,
		_TimezoneString[2677:2693]: 165,
		_TimezoneString[2693:2706]: 166,
		_TimezoneString[2706:2726]: 167,
		_TimezoneString[2726:2738]: 168,
		_TimezoneString[2738:2758]: 169,
		_TimezoneString[2758:2771]: 170,
		_TimezoneString[2771:2786]: 171,
		_TimezoneString[2786:2804]: 172,
		_TimezoneString[2804:2816]: 173,
		_TimezoneString[2816:2833]: 174,
		_TimezoneString[2833:2848]: 175,
		_TimezoneString[2848:2862]: 176,
		_TimezoneString[2862:2875]: 177,
		_TimezoneString[2875:2889]: 178,
		_TimezoneString[2889:2911]: 179,
		_TimezoneString[2911:2925]: 180,
		_TimezoneString[2925:2944]: 181,
		_TimezoneString[2944:2958]: 182,
		_TimezoneString[2958:2973]: 183,
		_TimezoneString[2973:2991]: 184,
		_TimezoneString[2991:3003]: 185,
		_TimezoneString[3003:3015]: 186,
		_TimezoneString[3015:3028]: 187,
		_TimezoneString[3028:3041]: 188,
		_TimezoneString[3041:3055]: 189,
		_TimezoneString[3055:3066]: 190,
		_TimezoneString[3066:3078]: 191,
		_TimezoneString[3078:3091]: 192,
		_TimezoneString[3091:3109]: 193,
		_TimezoneString[3109:3123]: 194,
		_TimezoneString[3123:3134]: 195,
		_TimezoneString[3134:3149]: 196,
		_TimezoneString[3149:3159]: 197,
		_TimezoneString[3159:3172]: 198,
		_TimezoneString[3172:3182]: 199,
		_TimezoneString[3182:3193]: 200,
		_TimezoneString[3193:3203]: 201,
		_TimezoneString[3203:3214]: 202,
		_TimezoneString[3214:3225]: 203,
		_TimezoneString[3225:3234]: 204,
		_TimezoneString[3234:3247]: 205,
		_TimezoneString[3247:3261]: 206,
		_TimezoneString[3261:3275]: 207,
		_TimezoneString[3275:3289]: 208,
		_TimezoneString[3289:3307]: 209,
		_TimezoneString[3307:3321]: 210,
		_TimezoneString[3321:3335]: 211,
		_TimezoneString[3335:3345]: 212,
		_TimezoneString[3345:3356]: 213,
		_TimezoneString[3356:3368]: 214,
		_TimezoneString[3368:3382]: 215,
		_TimezoneString[3382:3393]: 216,
		_TimezoneString[3393:3404]: 217,
		_TimezoneString[3404:3417]: 218,
		_TimezoneString[3417:3432]: 219,
		_TimezoneString[3432:3446]: 220,
		_TimezoneString[3446:3458]: 221,
		_TimezoneString[3458:3472]: 222,
		_TimezoneString[3472:3489]: 223,
		_TimezoneString[3489:3499]: 224,
		_TimezoneString[3499:3512]: 225,
		_TimezoneString[3512:3531]: 226,
		_TimezoneString[3531:3546]: 227,
		_TimezoneString[3546:3563]: 228,
		_TimezoneString[3563:3575]: 229,
		_TimezoneString[3575:3590]: 230,
		_TimezoneString[3590:3603]: 231,
		_TimezoneString[3603:3615]: 232,
		_TimezoneString[3615:3632]: 233,
		_TimezoneString[3632:3646]: 234,
		_TimezoneString[3646:3664]: 235,
		_TimezoneString[3664:3681]: 236,
		_TimezoneString[3681:3697]: 237,
		_TimezoneString[3697:3711]: 238,
		_TimezoneString[3711:3733]: 239,
		_TimezoneString[3733:3747]: 240,
		_TimezoneString[3747:3764]: 241,
		_TimezoneString[3764:3782]: 242,
		_TimezoneString[3782:3799]: 243,
		_TimezoneString[3799:3815]: 244,
		_TimezoneString[3815:3829]: 245,
		_TimezoneString[3829:3848]: 246,
		_TimezoneString[3848:3865]: 247,
		_TimezoneString[3865:3880]: 248,
		_TimezoneString[3880:3895]: 249,
		_TimezoneString[3895:3908]: 250,
		_TimezoneString[3908:3922]: 251,
		_TimezoneString[3922:3937]: 252,
		_TimezoneString[3937:3952]: 253,
		_TimezoneString[3952:3965]: 254,
		_TimezoneString[3965:3980]: 255,
		_TimezoneString[3980:3989]: 256,
		_TimezoneString[3989:4005]: 257,
		_TimezoneString[4005:4021]: 258,
		_TimezoneString[4021:4039]: 259,
		_TimezoneString[4039:4056]: 260,
		_TimezoneString[4056:4069]: 261,
		_TimezoneString[4069:4080]: 262,
		_TimezoneString[4080:4095]: 263,
		_TimezoneString[4095:4108]: 264,
		_TimezoneString[4108:4122]: 265,
		_TimezoneString[4122:4138]: 266,
		_TimezoneString[4138:4152]: 267,
		_TimezoneString[4152:4168]: 268,
		_TimezoneString[4168:4183]: 269,
		_TimezoneString[4183:4198]: 270,
		_TimezoneString[4198:4211]: 271,
		_TimezoneString[4211:4223]: 272,
		_TimezoneString[4223:4235]: 273,
		_TimezoneString[4235:4250]: 274,
		_TimezoneString[4250:4264]: 275,
		_TimezoneString[4264:4275]: 276,
		_TimezoneString[4275:4286]: 277,
		_TimezoneString[4286:4298]: 278,
		_TimezoneString[4298:4311]: 279,
		_TimezoneString[4311:4320]: 280,
		_TimezoneString[4320:4331]: 281,
		_TimezoneString[4331:4345]: 282,
		_TimezoneString[4345:4365]: 283,
		_TimezoneString[4365:4385]: 284,
		_TimezoneString[4385:4401]: 285,
		_TimezoneString[4401:4413]: 286,
		_TimezoneString[4413:4424]: 287,
		_TimezoneString[4424:4440]: 288,
		_TimezoneString[4440:4453]: 289,
		_TimezoneString[4453:4468]: 290,
		_TimezoneString[4468:4484]: 291,
		_TimezoneString[4484:4497]: 292,
		_TimezoneString[4497:4516]: 293,
		_TimezoneString[4516:4526]: 294,
		_TimezoneString[4526:4542]: 295,
		_TimezoneString[4542:4553]: 296,
		_TimezoneString[4553:4565]: 297,
		_TimezoneString[4565:4575]: 298,
		_TimezoneString[4575:4587]: 299,
		_TimezoneString[4587:4601]: 300,
		_TimezoneString[4601:4614]: 301,
		_TimezoneString[4614:4630]: 302,
		_TimezoneString[4630:4642]: 303,
		_TimezoneString[4642:4659]: 304,
		_TimezoneString[4659:4675]: 305,
		_TimezoneString[4675:4684]: 306,
		_TimezoneString[4684:4697]: 307,
		_TimezoneString[4697:4715]: 308,
		_TimezoneString[4715:4725]: 309,
		_TimezoneString[4725:4738]: 310,
		_TimezoneString[4738:4754]: 311,
		_TimezoneString[4754:4766]: 312,
		_TimezoneString[4766:4784]: 313,
		_TimezoneString[4784:4800]: 314,
		_TimezoneString[4800:4818]: 315,
		_TimezoneString[4818:4830]: 316,
		_TimezoneString[4830:4843]: 317,
		_TimezoneString[4843:4856]: 318,
		_TimezoneString[4856:4870]: 319,
		_TimezoneString[4870:4886]: 320,
		_TimezoneString[4886:4902]: 321,
		_TimezoneString[4902:4915]: 322,
		_TimezoneString[4915:4929]: 323,
		_TimezoneString[4929:4950]: 324,
		_TimezoneString[4950:4968]: 325,
		_TimezoneString[4968:4984]: 326,
		_TimezoneString[4984:5000]: 327,
		_TimezoneString[5000:5015]: 328,
		_TimezoneString[5015:5031]: 329,
		_TimezoneString[5031:5049]: 330,
		_TimezoneString[5049:5061]: 331,
		_TimezoneString[5061:5078]: 332,
		_TimezoneString[5078:5093]: 333,
		_TimezoneString[5093:5104]: 334,
		_TimezoneString[5104:5116]: 335,
		_TimezoneString[5116:5131]: 336,
		_TimezoneString[5131:5142]: 337,
		_TimezoneString[5142:5157]: 338,
		_TimezoneString[5157:5171]: 339,
		_TimezoneString[5171:5192]: 340,
		_TimezoneString[5192:5209]: 341,
		_TimezoneString[5209:5225]: 342,
		_TimezoneString[5225:5244]: 343,
		_TimezoneString[5244:5260]: 344,
		_TimezoneString[5260:5279]: 345,
		_TimezoneString[5279:5301]: 346,
		_TimezoneString[5301:5312]: 347,
		_TimezoneString[5312:5324]: 348,
		_TimezoneString[5324:5339]: 349,
		_TimezoneString[5339:5352]: 350,
		_TimezoneString[5352:5364]: 351,
		_TimezoneString[5364:5379]: 352,
		_TimezoneString[5379:5397]: 353,
		_TimezoneString[5397:5416]: 354,
		_TimezoneString[5416:5430]: 355,
		_TimezoneString[5430:5446]: 356,
		_TimezoneString[5446:5459]: 357,
		_TimezoneString[5459:5472]: 358,
		_TimezoneString[5472:5483]: 359,
		_TimezoneString[5483:5496]: 360,
		_TimezoneString[5496:5516]: 361,
		_TimezoneString[5516:5528]: 362,
		_TimezoneString[5528:5537]: 363,
		_TimezoneString[5537:5548]: 364,
		_TimezoneString[5548:5563]: 365,
		_TimezoneString[5563:5580]: 366,
		_TimezoneString[5580:5601]: 367,
		_TimezoneString[5601:5613]: 368,
		_TimezoneString[5613:5628]: 369,
		_TimezoneString[5628:5641]: 370,
		_TimezoneString[5641:5659]: 371,
		_TimezoneString[5659:5675]: 372,
		_TimezoneString[5675:5689]: 373,
		_TimezoneString[5689:5700]: 374,
		_TimezoneString[5700:5717]: 375,
		_TimezoneString[5717:5732]: 376,
		_TimezoneString[5732:5749]: 377,
		_TimezoneString[5749:5759]: 378,
		_TimezoneString[5759:5772]: 379,
		_TimezoneString[5772:5784]: 380,
		_TimezoneString[5784:5801]: 381,
		_TimezoneString[5801:5814]: 382,
		_TimezoneString[5814:5829]: 383,
		_TimezoneString[5829:5843]: 384,
		_TimezoneString[5843:5858]: 385,
		_TimezoneString[5858:5886]: 386,
		_TimezoneString[5886:5906]: 387,
		_TimezoneString[5906:5929]: 388,
		_TimezoneString[5929:5955]: 389,
		_TimezoneString[5955:5980]: 390,
		_TimezoneString[5980:6001]: 391,
		_TimezoneString[6001:6026]: 392,
		_TimezoneString[6026:6049]: 393,
		_TimezoneString[6049:6063]: 394,
		_TimezoneString[6063:6090]: 395,
		_TimezoneString[6090:6117]: 396,
		_TimezoneString[6117:6136]: 397,
		_TimezoneString[6136:6153]: 398,
		_TimezoneString[6153:6171]: 399,
		_TimezoneString[6171:6187]: 400,
		_TimezoneString[6187:6199]: 401,
		_TimezoneString[6199:6226]: 402,
		_TimezoneString[6226:6253]: 403,
		_TimezoneString[6253:6283]: 404,
		_TimezoneString[6283:6298]: 405,
		_TimezoneString[6298:6311]: 406,
		_TimezoneString[6311:6326]: 407,
		_TimezoneString[6326:6342]: 408,
		_TimezoneString[6342:6356]: 409,
		_TimezoneString[6356:6368]: 410,
		_TimezoneString[6368:6386]: 411,
		_TimezoneString[6386:6400]: 412,
		_TimezoneString[6400:6413]: 413,
		_TimezoneString[6413:6426]: 414,
		_TimezoneString[6426:6441]: 415,
		_TimezoneString[6441:6457]: 416,
		_TimezoneString[6457:6472]: 417,
		_TimezoneString[6472:6489]: 418,
		_TimezoneString[6489:6503]: 419,
		_TimezoneString[6503:6518]: 420,
		_TimezoneString[6518:6527]: 421,
		_TimezoneString[6527:6540]: 422,
		_TimezoneString[6540:6553]: 423,
		_TimezoneString[6553:6569]: 424,
	}
	_TimezoneLowerStringToValueMap = map[string]Timezone{
		_TimezoneLowerString[0:10]:      1,
		_TimezoneLowerString[10:23]:     2,
		_TimezoneLowerString[23:37]:     3,
		_TimezoneLowerString[37:54]:     4,
		_TimezoneLowerString[54:68]:     5,
		_TimezoneLowerString[68:81]:     6,
		_TimezoneLowerString[81:97]:     7,
		_TimezoneLowerString[97:113]:    8,
		_TimezoneLowerString[113:129]:   9,
		_TimezoneLowerString[129:154]:   10,
		_TimezoneLowerString[154:171]:   11,
		_TimezoneLowerString[171:189]:   12,
		_TimezoneLowerString[189:206]:   13,
		_TimezoneLowerString[206:224]:   14,
		_TimezoneLowerString[224:240]:   15,
		_TimezoneLowerString[240:256]:   16,
		_TimezoneLowerString[256:273]:   17,
		_TimezoneLowerString[273:288]:   18,
		_TimezoneLowerString[288:318]:   19,
		_TimezoneLowerString[318:345]:   20,
		_TimezoneLowerString[345:370]:   21,
		_TimezoneLowerString[370:393]:   22,
		_TimezoneLowerString[393:419]:   23,
		_TimezoneLowerString[419:444]:   24,
		_TimezoneLowerString[444:474]:   25,
		_TimezoneLowerString[474:497]:   26,
		_TimezoneLowerString[497:523]:   27,
		_TimezoneLowerString[523:549]:   28,
		_TimezoneLowerString[549:574]:   29,
		_TimezoneLowerString[574:599]:   30,
		_TimezoneLowerString[599:611]:   31,
		_TimezoneLowerString[611:624]:   32,
		_TimezoneLowerString[624:644]:   33,
		_TimezoneLowerString[644:662]:   34,
		_TimezoneLowerString[662:680]:   35,
		_TimezoneLowerString[680:701]:   36,
		_TimezoneLowerString[701:717]:   37,
		_TimezoneLowerString[717:732]:   38,
		_TimezoneLowerString[732:748]:   39,
		_TimezoneLowerString[748:766]:   40,
		_TimezoneLowerString[766:785]:   41,
		_TimezoneLowerString[785:804]:   42,
		_TimezoneLowerString[804:819]:   43,
		_TimezoneLowerString[819:835]:   44,
		_TimezoneLowerString[835:848]:   45,
		_TimezoneLowerString[848:857]:   46,
		_TimezoneLowerString[857:871]:   47,
		_TimezoneLowerString[871:883]:   48,
		_TimezoneLowerString[883:893]:   49,
		_TimezoneLowerString[893:909]:   50,
		_TimezoneLowerString[909:921]:   51,
		_TimezoneLowerString[921:936]:   52,
		_TimezoneLowerString[936:950]:   53,
		_TimezoneLowerString[950:967]:   54,
		_TimezoneLowerString[967:983]:   55,
		_TimezoneLowerString[983:995]:   56,
		_TimezoneLowerString[995:1009]:  57,
		_TimezoneLowerString[1009:1027]: 58,
		_TimezoneLowerString[1027:1042]: 59,
		_TimezoneLowerString[1042:1057]: 60,
		_TimezoneLowerString[1057:1074]: 61,
		_TimezoneLowerString[1074:1087]: 62,
		_TimezoneLowerString[1087:1100]: 63,
		_TimezoneLowerString[1100:1117]: 64,
		_TimezoneLowerString[1117:1137]: 65,
		_TimezoneLowerString[1137:1151]: 66,
		_TimezoneLowerString[1151:1167]: 67,
		_TimezoneLowerString[1167:1184]: 68,
		_TimezoneLowerString[1184:1198]: 69,
		_TimezoneLowerString[1198:1212]: 70,
		_TimezoneLowerString[1212:1227]: 71,
		_TimezoneLowerString[1227:1246]: 72,
		_TimezoneLowerString[1246:1260]: 73,
		_TimezoneLowerString[1260:1278]: 74,
		_TimezoneLowerString[1278:1294]: 75,
		_TimezoneLowerString[1294:1311]: 76,
		_TimezoneLowerString[1311:1324]: 77,
		_TimezoneLowerString[1324:1335]: 78,
		_TimezoneLowerString[1335:1347]: 79,
		_TimezoneLowerString[1347:1365]: 80,
		_TimezoneLowerString[1365:1381]: 81,
		_TimezoneLowerString[1381:1396]: 82,
		_TimezoneLowerString[1396:1409]: 83,
		_TimezoneLowerString[1409:1425]: 84,
		_TimezoneLowerString[1425:1445]: 85,
		_TimezoneLowerString[1445:1466]: 86,
		_TimezoneLowerString[1466:1481]: 87,
		_TimezoneLowerString[1481:1495]: 88,
		_TimezoneLowerString[1495:1515]: 89,
		_TimezoneLowerString[1515:1531]: 90,
		_TimezoneLowerString[1531:1550]: 91,
		_TimezoneLowerString[1550:1567]: 92,
		_TimezoneLowerString[1567:1584]: 93,
		_TimezoneLowerString[1584:1599]: 94,
		_TimezoneLowerString[1599:1613]: 95,
		_TimezoneLowerString[1613:1628]: 96,
		_TimezoneLowerString[1628:1643]: 97,
		_TimezoneLowerString[1643:1658]: 98,
		_TimezoneLowerString[1658:1677]: 99,
		_TimezoneLowerString[1677:1696]: 100,
		_TimezoneLowerString[1696:1716]: 101,
		_TimezoneLowerString[1716:1730]: 102,
		_TimezoneLowerString[1730:1746]: 103,
		_TimezoneLowerString[1746:1762]: 104,
		_TimezoneLowerString[1762:1783]: 105,
		_TimezoneLowerString[1783:1802]: 106,
		_TimezoneLowerString[1802:1817]: 107,
		_TimezoneLowerString[1817:1834]: 108,
		_TimezoneLowerString[1834:1852]: 109,
		_TimezoneLowerString[1852:1868]: 110,
		_TimezoneLowerString[1868:1887]: 111,
		_TimezoneLowerString[1887:1906]: 112,
		_TimezoneLowerString[1906:1920]: 113,
		_TimezoneLowerString[1920:1933]: 114,
		_TimezoneLowerString[1933:1948]: 115,
		_TimezoneLowerString[1948:1968]: 116,
		_TimezoneLowerString[1968:1984]: 117,
		_TimezoneLowerString[1984:1998]: 118,
		_TimezoneLowerString[1998:2011]: 119,
		_TimezoneLowerString[2011:2022]: 120,
		_TimezoneLowerString[2022:2038]: 121,
		_TimezoneLowerString[2038:2050]: 122,
		_TimezoneLowerString[2050:2064]: 123,
		_TimezoneLowerString[2064:2077]: 124,
		_TimezoneLowerString[2077:2095]: 125,
		_TimezoneLowerString[2095:2110]: 126,
		_TimezoneLowerString[2110:2127]: 127,
		_TimezoneLowerString[2127:2144]: 128,
		_TimezoneLowerString[2144:2162]: 129,
		_TimezoneLowerString[2162:2175]: 130,
		_TimezoneLowerString[2175:2189]: 131,
		_TimezoneLowerString[2189:2204]: 132,
		_TimezoneLowerString[2204:2218]: 133,
		_TimezoneLowerString[2218:2230]: 134,
		_TimezoneLowerString[2230:2243]: 135,
		_TimezoneLowerString[2243:2257]: 136,
		_TimezoneLowerString[2257:2274]: 137,
		_TimezoneLowerString[2274:2289]: 138,
		_TimezoneLowerString[2289:2305]: 139,
		_TimezoneLowerString[2305:2326]: 140,
		_TimezoneLowerString[2326:2343]: 141,
		_TimezoneLowerString[2343:2360]: 142,
		_TimezoneLowerString[2360:2372]: 143,
		_TimezoneLowerString[2372:2391]: 144,
		_TimezoneLowerString[2391:2404]: 145,
		_TimezoneLowerString[2404:2417]: 146,
		_TimezoneLowerString[2417:2431]: 147,
		_TimezoneLowerString[2431:2449]: 148,
		_TimezoneLowerString[2449:2465]: 149,
		_TimezoneLowerString[2465:2479]: 150,
		_TimezoneLowerString[2479:2491]: 151,
		_TimezoneLowerString[2491:2506]: 152,
		_TimezoneLowerString[2506:2518]: 153,
		_TimezoneLowerString[2518:2533]: 154,
		_TimezoneLowerString[2533:2548]: 155,
		_TimezoneLowerString[2548:2565]: 156,
		_TimezoneLowerString[2565:2579]: 157,
		_TimezoneLowerString[2579:2595]: 158,
		_TimezoneLowerString[2595:2612]: 159,
		_TimezoneLowerString[2612:2625]: 160,
		_TimezoneLowerString[2625:2637]: 161,
		_TimezoneLowerString[2637:2650]: 162,
		_TimezoneLowerString[2650:2665]: 163,
		_TimezoneLowerString[2665:2677]: 164,
		_TimezoneLowerString[2677:2693]: 165,
		_TimezoneLowerString[2693:2706]: 166,
		_TimezoneLowerString[2706:2726]: 167,
		_TimezoneLowerString[2726:2738]: 168,
		_TimezoneLowerString[2738:2758]: 169,
		_TimezoneLowerString[2758:2771]: 170,
		_TimezoneLowerString[2771:2786]: 171,
		_TimezoneLowerString[2786:2804]: 172,
		_TimezoneLowerString[2804:2816]: 173,
		_TimezoneLowerString[2816:2833]: 174,
		_TimezoneLowerString[2833:2848]: 175,
		_TimezoneLowerString[2848:2862]: 176,
		_TimezoneLowerString[2862:2875]: 177,
		_TimezoneLowerString[2875:2889]: 178,
		_TimezoneLowerString[2889:2911]: 179,
		_TimezoneLowerString[2911:2925]: 180,
		_TimezoneLowerString[2925:2944]: 181,
		_TimezoneLowerString[2944:2958]: 182,
		_TimezoneLowerString[2958:2973]: 183,
		_TimezoneLowerString[2973:2991]: 184,
		_TimezoneLowerString[2991:3003]: 185,
		_TimezoneLowerString[3003:3015]: 186,
		_TimezoneLowerString[3015:3028]: 187,
		_TimezoneLowerString[3028:3041]: 188,
		_TimezoneLowerString[3041:3055]: 189,
		_TimezoneLowerString[3055:3066]: 190,
		_TimezoneLowerString[3066:3078]: 191,
		_TimezoneLowerString[3078:3091]: 192,
		_TimezoneLowerString[3091:3109]: 193,
		_TimezoneLowerString[3109:3123]: 194,
		_TimezoneLowerString[3123:3134]: 195,
		_TimezoneLowerString[3134:3149]: 196,
		_TimezoneLowerString[3149:3159]: 197,
		_TimezoneLowerString[3159:3172]: 198,
		_TimezoneLowerString[3172:3182]: 199,
		_TimezoneLowerString[3182:3193]: 200,
		_TimezoneLowerString[3193:3203]: 201,
		_TimezoneLowerString[3203:3214]: 202,
		_TimezoneLowerString[3214:3225]: 203,
		_TimezoneLowerString[3225:3234]: 204,
		_TimezoneLowerString[3234:3247]: 205,
		_TimezoneLowerString[3247:3261]: 206,
		_TimezoneLowerString[3261:3275]: 207,
		_TimezoneLowerString[3275:3289]: 208,
		_TimezoneLowerString[3289:3307]: 209,
		_TimezoneLowerString[3307:3321]: 210,
		_TimezoneLowerString[3321:3335]: 211,
		_TimezoneLowerString[3335:3345]: 212,
		_TimezoneLowerString[3345:3356]: 213,
		_TimezoneLowerString[3356:3368]: 214,
		_TimezoneLowerString[3368:3382]: 215,
		_TimezoneLowerString[3382:3393]: 216,
		_TimezoneLowerString[3393:3404]: 217,
		_TimezoneLowerString[3404:3417]: 218,
		_TimezoneLowerString[3417:3432]: 219,
		_TimezoneLowerString[3432:3446]: 220,
		_TimezoneLowerString[3446:3458]: 221,
		_TimezoneLowerString[3458:3472]: 222,
		_TimezoneLowerString[3472:3489]: 223,
		_TimezoneLowerString[3489:3499]: 224,
		_TimezoneLowerString[3499:3512]: 225,
		_TimezoneLowerString[3512:3531]: 226,
		_TimezoneLowerString[3531:3546]: 227,
		_TimezoneLowerString[3546:3563]: 228,
		_TimezoneLowerString[3563:3575]: 229,
		_TimezoneLowerString[3575:3590]: 230,
		_TimezoneLowerString[3590:3603]: 231,
		_TimezoneLowerString[3603:3615]: 232,
		_TimezoneLowerString[3615:3632]: 233,
		_TimezoneLowerString[3632:3646]: 234,
		_TimezoneLowerString[3646:3664]: 235,
		_TimezoneLowerString[3664:3681]: 236,
		_TimezoneLowerString[3681:3697]: 237,
		_TimezoneLowerString[3697:3711]: 238,
		_TimezoneLowerString[3711:3733]: 239,
		_TimezoneLowerString[3733:3747]: 240,
		_TimezoneLowerString[3747:3764]: 241,
		_TimezoneLowerString[3764:3782]: 242,
		_TimezoneLowerString[3782:3799]: 243,
		_TimezoneLowerString[3799:3815]: 244,
		_TimezoneLowerString[3815:3829]: 245,
		_TimezoneLowerString[3829:3848]: 246,
		_TimezoneLowerString[3848:3865]: 247,
		_TimezoneLowerString[3865:3880]: 248,
		_TimezoneLowerString[3880:3895]: 249,
		_TimezoneLowerString[3895:3908]: 250,
		_TimezoneLowerString[3908:3922]: 251,
		_TimezoneLowerString[3922:3937]: 252,
		_TimezoneLowerString[3937:3952]: 253,
		_TimezoneLowerString[3952:3965]: 254,
		_TimezoneLowerString[3965:3980]: 255,
		_TimezoneLowerString[3980:3989]: 256,
		_TimezoneLowerString[3989:4005]: 257,
		_TimezoneLowerString[4005:4021]: 258,
		_TimezoneLowerString[4021:4039]: 259,
		_TimezoneLowerString[4039:4056]: 260,
		_TimezoneLowerString[4056:4069]: 261,
		_TimezoneLowerString[4069:4080]: 262,
		_TimezoneLowerString[4080:4095]: 263,
		_TimezoneLowerString[4095:4108]: 264,
		_TimezoneLowerString[4108:4122]: 265,
		_TimezoneLowerString[4122:4138]: 266,
		_TimezoneLowerString[4138:4152]: 267,
		_TimezoneLowerString[4152:4168]: 268,
		_TimezoneLowerString[4168:4183]: 269,
		_TimezoneLowerString[4183:4198]: 270,
		_TimezoneLowerString[4198:4211]: 271,
		_TimezoneLowerString[4211:4223]: 272,
		_TimezoneLowerString[4223:4235]: 273,
		_TimezoneLowerString[4235:4250]: 274,
		_TimezoneLowerString[4250:4264]: 275,
		_TimezoneLowerString[4264:4275]: 276,
		_TimezoneLowerString[4275:4286]: 277,
		_TimezoneLowerString[4286:4298]: 278,
		_TimezoneLowerString[4298:4311]: 279,
		_TimezoneLowerString[4311:4320]: 280,
		_TimezoneLowerString[4320:4331]: 281,
		_TimezoneLowerString[4331:4345]: 282,
		_TimezoneLowerString[4345:4365]: 283,
		_TimezoneLowerString[4365:4385]: 284,
		_TimezoneLowerString[4385:4401]: 285,
		_TimezoneLowerString[4401:4413]: 286,
		_TimezoneLowerString[4413:4424]: 287,
		_TimezoneLowerString[4424:4440]: 288,
		_TimezoneLowerString[4440:4453]: 289,
		_TimezoneLowerString[4453:4468]: 290,
		_TimezoneLowerString[4468:4484]: 291,
		_TimezoneLowerString[4484:4497]: 292,
		_TimezoneLowerString[4497:4516]: 293,
		_TimezoneLowerString[4516:4526]: 294,
		_TimezoneLowerString[4526:4542]: 295,
		_TimezoneLowerString[4542:4553]: 296,
		_TimezoneLowerString[4553:4565]: 297,
		_TimezoneLowerString[4565:4575]: 298,
		_TimezoneLowerString[4575:4587]: 299,
		_TimezoneLowerString[4587:4601]: 300,
		_TimezoneLowerString[4601:4614]: 301,
		_TimezoneLowerString[4614:4630]: 302,
		_TimezoneLowerString[4630:4642]: 303,
		_TimezoneLowerString[4642:4659]: 304,
		_TimezoneLowerString[4659:4675]: 305,
		_TimezoneLowerString[4675:4684]: 306,
		_TimezoneLowerString[4684:4697]: 307,
		_TimezoneLowerString[4697:4715]: 308,
		_TimezoneLowerString[4715:4725]: 309,
		_TimezoneLowerString[4725:4738]: 310,
		_TimezoneLowerString[4738:4754]: 311,
		_TimezoneLowerString[4754:4766]: 312,
		_TimezoneLowerString[4766:4784]: 313,
		_TimezoneLowerString[4784:4800]: 314,
		_TimezoneLowerString[4800:4818]: 315,
		_TimezoneLowerString[4818:4830]: 316,
		_TimezoneLowerString[4830:4843]: 317,
		_TimezoneLowerString[4843:4856]: 318,
		_TimezoneLowerString[4856:4870]: 319,
		_TimezoneLowerString[4870:4886]: 320,
		_TimezoneLowerString[4886:4902]: 321,
		_TimezoneLowerString[4902:4915]: 322,
		_TimezoneLowerString[4915:4929]: 323,
		_TimezoneLowerString[4929:4950]: 324,
		_TimezoneLowerString[4950:4968]: 325,
		_TimezoneLowerString[4968:4984]: 326,
		_TimezoneLowerString[4984:5000]: 327,
		_TimezoneLowerString[5000:5015]: 328,
		_TimezoneLowerString[5015:5031]: 329,
		_TimezoneLowerString[5031:5049]: 330,
		_TimezoneLowerString[5049:5061]: 331,
		_TimezoneLowerString[5061:5078]: 332,
		_TimezoneLowerString[5078:5093]: 333,
		_TimezoneLowerString[5093:5104]: 334,
		_TimezoneLowerString[5104:5116]: 335,
		_TimezoneLowerString[5116:5131]: 336,
		_TimezoneLowerString[5131:5142]: 337,
		_TimezoneLowerString[5142:5157]: 338,
		_TimezoneLowerString[5157:5171]: 339,
		_TimezoneLowerString[5171:5192]: 340,
		_TimezoneLowerString[5192:5209]: 341,
		_TimezoneLowerString[5209:5225]: 342,
		_TimezoneLowerString[5225:5244]: 343,
		_TimezoneLowerString[5244:5260]: 344,
		_TimezoneLowerString[5260:5279]: 345,
		_TimezoneLowerString[5279:5301]: 346,
		_TimezoneLowerString[5301:5312]: 347,
		_TimezoneLowerString[5312:5324]: 348,
		_TimezoneLowerString[5324:5339]: 349,
		_TimezoneLowerString[5339:5352]: 350,
		_TimezoneLowerString[5352:5364]: 351,
		_TimezoneLowerString[5364:5379]: 352,
		_TimezoneLowerString[5379:5397]: 353,
		_TimezoneLowerString[5397:5416]: 354,
		_TimezoneLowerString[5416:5430]: 355,
		_TimezoneLowerString[5430:5446]: 356,
		_TimezoneLowerString[5446:5459]: 357,
		_TimezoneLowerString[5459:5472]: 358,
		_TimezoneLowerString[5472:5483]: 359,
		_TimezoneLowerString[5483:5496]: 360,
		_TimezoneLowerString[5496:5516]: 361,
		_TimezoneLowerString[5516:5528]: 362,
		_TimezoneLowerString[5528:5537]: 363,
		_TimezoneLowerString[5537:5548]: 364,
		_TimezoneLowerString[5548:5563]: 365,
		_TimezoneLowerString[5563:5580]: 366,
		_TimezoneLowerString[5580:5601]: 367,
		_TimezoneLowerString[5601:5613]: 368,
		_TimezoneLowerString[5613:5628]: 369,
		_TimezoneLowerString[5628:5641]: 370,
		_TimezoneLowerString[5641:5659]: 371,
		_TimezoneLowerString[5659:5675]: 372,
		_TimezoneLowerString[5675:5689]: 373,
		_TimezoneLowerString[5689:5700]: 374,
		_TimezoneLowerString[5700:5717]: 375,
		_TimezoneLowerString[5717:5732]: 376,
		_TimezoneLowerString[5732:5749]: 377,
		_TimezoneLowerString[5749:5759]: 378,
		_TimezoneLowerString[5759:5772]: 379,
		_TimezoneLowerString[5772:5784]: 380,
		_TimezoneLowerString[5784:5801]: 381,
		_TimezoneLowerString[5801:5814]: 382,
		_TimezoneLowerString[5814:5829]: 383,
		_TimezoneLowerString[5829:5843]: 384,
		_TimezoneLowerString[5843:5858]: 385,
		_TimezoneLowerString[5858:5886]: 386,
		_TimezoneLowerString[5886:5906]: 387,
		_TimezoneLowerString[5906:5929]: 388,
		_TimezoneLowerString[5929:5955]: 389,
		_TimezoneLowerString[5955:5980]: 390,
		_TimezoneLowerString[5980:6001]: 391,
		_TimezoneLowerString[6001:6026]: 392,
		_TimezoneLowerString[6026:6049]: 393,
		_TimezoneLowerString[6049:6063]: 394,
		_TimezoneLowerString[6063:6090]: 395,
		_TimezoneLowerString[6090:6117]: 396,
		_TimezoneLowerString[6117:6136]: 397,
		_TimezoneLowerString[6136:6153]: 398,
		_TimezoneLowerString[6153:6171]: 399,
		_TimezoneLowerString[6171:6187]: 400,
		_TimezoneLowerString[6187:6199]: 401,
		_TimezoneLowerString[6199:6226]: 402,
		_TimezoneLowerString[6226:6253]: 403,
		_TimezoneLowerString[6253:6283]: 404,
		_TimezoneLowerString[6283:6298]: 405,
		_TimezoneLowerString[6298:6311]: 406,
		_TimezoneLowerString[6311:6326]: 407,
		_TimezoneLowerString[6326:6342]: 408,
		_TimezoneLowerString[6342:6356]: 409,
		_TimezoneLowerString[6356:6368]: 410,
		_TimezoneLowerString[6368:6386]: 411,
		_TimezoneLowerString[6386:6400]: 412,
		_TimezoneLowerString[6400:6413]: 413,
		_TimezoneLowerString[6413:6426]: 414,
		_TimezoneLowerString[6426:6441]: 415,
		_TimezoneLowerString[6441:6457]: 416,
		_TimezoneLowerString[6457:6472]: 417,
		_TimezoneLowerString[6472:6489]: 418,
		_TimezoneLowerString[6489:6503]: 419,
		_TimezoneLowerString[6503:6518]: 420,
		_TimezoneLowerString[6518:6527]: 421,
		_TimezoneLowerString[6527:6540]: 422,
		_TimezoneLowerString[6540:6553]: 423,
		_TimezoneLowerString[6553:6569]: 424,
	}
)

// TimezoneFromString determines the enum value with an exact case match.
func TimezoneFromString(raw string) (Timezone, bool) {
	v, ok := _TimezoneStringToValueMap[raw]
	if !ok {
		return Timezone(0), false
	}
	return v, true
}

// TimezoneFromStringIgnoreCase determines the enum value with a case-insensitive match.
func TimezoneFromStringIgnoreCase(raw string) (Timezone, bool) {
	v, ok := TimezoneFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _TimezoneLowerStringToValueMap[raw]
	if !ok {
		return Timezone(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Timezone.
func (_t Timezone) MarshalBinary() ([]byte, error) {
	if err := _t.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Timezone. %w", _t, err)
	}
	return []byte(_t.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Timezone.
func (_t Timezone) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_t.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Timezone: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Timezone.
func (_t Timezone) MarshalJSON() ([]byte, error) {
	if err := _t.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Timezone. %w", _t, err)
	}
	return json.Marshal(_t.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("Timezone should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

func (_t Timezone) Value() (driver.Value, error) {
	if err := _t.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as Timezone. %w", _t, err)
	}
	return _t.String(), nil
}

func (_t *Timezone) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Timezone: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Timezone.
func (_t Timezone) MarshalText() ([]byte, error) {
	if err := _t.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Timezone. %w", _t, err)
	}
	return []byte(_t.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for Timezone.
func (_t Timezone) MarshalYAML() (interface{}, error) {
	if err := _t.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as Timezone. %w", _t, err)
	}
	return _t.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Timezone.
func (_t *Timezone) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

const (
	_UserRoleString      = "standardeditorrevieweradmin"
	_UserRoleLowerString = "standardeditorrevieweradmin"
)

var (
	_UserRoleValueRange = [2]UserRole{0, 3}
	_UserRoleValues     = []UserRole{0, 1, 2, 3}
	_UserRoleStrings    = []string{_UserRoleString[0:8], _UserRoleString[8:14], _UserRoleString[14:22], _UserRoleString[22:27]}
)

// _UserRoleNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of UserRole.
func _UserRoleNoOp() {
	var x [1]struct{}
	_ = x[UserRoleStandard-(0)]
	_ = x[UserRoleEditor-(1)]
	_ = x[UserRoleReviewer-(2)]
	_ = x[UserRoleAdmin-(3)]
}

// UserRoleValues returns all values of the enum.
func UserRoleValues() []UserRole {
	cp := make([]UserRole, len(_UserRoleValues))
	copy(cp, _UserRoleValues)
	return cp
}

// UserRoleStrings returns a slice of all String values of the enum.
func UserRoleStrings() []string {
	cp := make([]string, len(_UserRoleStrings))
	copy(cp, _UserRoleStrings)
	return cp
}

// IsValid inspects whether the value is valid enum value.
func (_u UserRole) IsValid() bool {
	return _u >= _UserRoleValueRange[0] && _u <= _UserRoleValueRange[1]
}

// Validate whether the value is within the range of enum values.
func (_u UserRole) Validate() error {
	if !_u.IsValid() {
		return fmt.Errorf("UserRole(%d) is %w", _u, ErrNoValidEnum)
	}
	return nil
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern UserRole(%d) instead.
func (_u UserRole) String() string {
	if !_u.IsValid() {
		return fmt.Sprintf("UserRole(%d)", _u)
	}
	idx := uint(_u)
	return _UserRoleStrings[idx]
}

var (
	_UserRoleStringToValueMap = map[string]UserRole{
		_UserRoleString[0:8]:   UserRoleStandard,
		_UserRoleString[8:14]:  UserRoleEditor,
		_UserRoleString[14:22]: UserRoleReviewer,
		_UserRoleString[22:27]: UserRoleAdmin,
	}
	_UserRoleLowerStringToValueMap = map[string]UserRole{
		_UserRoleLowerString[0:8]:   UserRoleStandard,
		_UserRoleLowerString[8:14]:  UserRoleEditor,
		_UserRoleLowerString[14:22]: UserRoleReviewer,
		_UserRoleLowerString[22:27]: UserRoleAdmin,
	}
)

// UserRoleFromString determines the enum value with an exact case match.
func UserRoleFromString(raw string) (UserRole, bool) {
	if len(raw) == 0 {
		return UserRole(0), true
	}
	v, ok := _UserRoleStringToValueMap[raw]
	if !ok {
		return UserRole(0), false
	}
	return v, true
}

// UserRoleFromStringIgnoreCase determines the enum value with a case-insensitive match.
func UserRoleFromStringIgnoreCase(raw string) (UserRole, bool) {
	v, ok := UserRoleFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _UserRoleLowerStringToValueMap[raw]
	if !ok {
		return UserRole(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for UserRole.
func (_u UserRole) MarshalBinary() ([]byte, error) {
	if err := _u.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as UserRole. %w", _u, err)
	}
	return []byte(_u.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalBinary(text []byte) error {
	str := string(text)

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for UserRole.
func (_u UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_u.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserRole: %[1]T(%[1]v)", value)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for UserRole.
func (_u UserRole) MarshalJSON() ([]byte, error) {
	if err := _u.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as UserRole. %w", _u, err)
	}
	return json.Marshal(_u.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("UserRole should be a string, got %q", data)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

func (_u UserRole) Value() (driver.Value, error) {
	if err := _u.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot serialize value %q as UserRole. %w", _u, err)
	}
	return _u.String(), nil
}

func (_u *UserRole) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserRole: %[1]T(%[1]v)", value)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for UserRole.
func (_u UserRole) MarshalText() ([]byte, error) {
	if err := _u.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as UserRole. %w", _u, err)
	}
	return []byte(_u.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalText(text []byte) error {
	str := string(text)

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for UserRole.
func (_u UserRole) MarshalYAML() (interface{}, error) {
	if err := _u.Validate(); err != nil {
		return nil, fmt.Errorf("Cannot marshal value %q as UserRole. %w", _u, err)
	}
	return _u.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserRole.
func (_u *UserRole) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}
