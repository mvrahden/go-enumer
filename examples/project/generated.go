// Code generated by "%s"; DO NOT EDIT.

package project

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strconv"
)

const (
	_UserRoleString      = "standardeditorrevieweradmin"
	_UserRoleLowerString = "standardeditorrevieweradmin"
)

var (
	_UserRoleValueRange = [2]UserRole{0, 3}
	_UserRoleValues     = []UserRole{0, 1, 2, 3}
	_UserRoleStrings    = []string{_UserRoleString[0:8], _UserRoleString[8:14], _UserRoleString[14:22], _UserRoleString[22:27]}
)

// _UserRoleNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of UserRole.
func _UserRoleNoOp() {
	var x [1]struct{}
	_ = x[UserRoleStandard-(0)]
	_ = x[UserRoleEditor-(1)]
	_ = x[UserRoleReviewer-(2)]
	_ = x[UserRoleAdmin-(3)]
}

// UserRoleValues returns all values of the enum.
func UserRoleValues() []UserRole {
	strs := make([]UserRole, len(_UserRoleValues))
	copy(strs, _UserRoleValues)
	return _UserRoleValues
}

// UserRoleStrings returns a slice of all String values of the enum.
func UserRoleStrings() []string {
	strs := make([]string, len(_UserRoleStrings))
	copy(strs, _UserRoleStrings)
	return strs
}

// IsValid inspects whether the value is valid enum value.
func (_u UserRole) IsValid() bool {
	return _u >= _UserRoleValueRange[0] && _u <= _UserRoleValueRange[1]
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern UserRole(%d) instead.
func (_u UserRole) String() string {
	if !_u.IsValid() {
		return fmt.Sprintf("UserRole(%d)", _u)
	}
	idx := uint(_u)
	return _UserRoleStrings[idx]
}

var (
	_UserRoleStringToValueMap = map[string]UserRole{
		_UserRoleString[0:8]:   UserRoleStandard,
		_UserRoleString[8:14]:  UserRoleEditor,
		_UserRoleString[14:22]: UserRoleReviewer,
		_UserRoleString[22:27]: UserRoleAdmin,
	}
	_UserRoleLowerStringToValueMap = map[string]UserRole{
		_UserRoleLowerString[0:8]:   UserRoleStandard,
		_UserRoleLowerString[8:14]:  UserRoleEditor,
		_UserRoleLowerString[14:22]: UserRoleReviewer,
		_UserRoleLowerString[22:27]: UserRoleAdmin,
	}
)

// UserRoleFromString determines the enum value with an exact case match.
func UserRoleFromString(raw string) (UserRole, bool) {
	if len(raw) == 0 {
		return UserRole(0), true
	}
	v, ok := _UserRoleStringToValueMap[raw]
	if !ok {
		return UserRole(0), false
	}
	return v, true
}

// UserRoleFromStringIgnoreCase determines the enum value with a case-insensitive match.
func UserRoleFromStringIgnoreCase(raw string) (UserRole, bool) {
	v, ok := UserRoleFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _UserRoleLowerStringToValueMap[raw]
	if !ok {
		return UserRole(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for UserRole.
func (_u UserRole) MarshalBinary() ([]byte, error) {
	if !_u.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as UserRole", _u)
	}
	return []byte(_u.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalBinary(text []byte) error {
	str := string(text)

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for UserRole.
func (_u UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_u.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserRole: %[1]T(%[1]v)", value)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for UserRole.
func (_u UserRole) MarshalJSON() ([]byte, error) {
	if !_u.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as UserRole", _u)
	}
	return json.Marshal(_u.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("UserRole should be a string, got %q", data)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

func (_u UserRole) Value() (driver.Value, error) {
	if !_u.IsValid() {
		return nil, fmt.Errorf("Cannot serialize invalid value %q as UserRole", _u)
	}
	return _u.String(), nil
}

func (_u *UserRole) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of UserRole: %[1]T(%[1]v)", value)
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for UserRole.
func (_u UserRole) MarshalText() ([]byte, error) {
	if !_u.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as UserRole", _u)
	}
	return []byte(_u.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserRole.
func (_u *UserRole) UnmarshalText(text []byte) error {
	str := string(text)

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for UserRole.
func (_u UserRole) MarshalYAML() (interface{}, error) {
	if !_u.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as UserRole", _u)
	}
	return _u.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for UserRole.
func (_u *UserRole) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}

	var ok bool
	*_u, ok = UserRoleFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a UserRole", str)
	}
	return nil
}

const (
	_TimezoneString      = "Asia/KabulEurope/TiraneAfrica/AlgiersPacific/Pago_PagoEurope/AndorraAfrica/LuandaAmerica/AnguillaAntarctica/CaseyAntarctica/DavisAntarctica/DumontDUrvilleAntarctica/MawsonAntarctica/McMurdoAntarctica/PalmerAntarctica/RotheraAntarctica/SyowaAntarctica/TrollAntarctica/VostokAmerica/AntiguaAmerica/Argentina/Buenos_AiresAmerica/Argentina/CatamarcaAmerica/Argentina/CordobaAmerica/Argentina/JujuyAmerica/Argentina/La_RiojaAmerica/Argentina/MendozaAmerica/Argentina/Rio_GallegosAmerica/Argentina/SaltaAmerica/Argentina/San_JuanAmerica/Argentina/San_LuisAmerica/Argentina/TucumanAmerica/Argentina/UshuaiaAsia/YerevanAmerica/ArubaAntarctica/MacquarieAustralia/AdelaideAustralia/BrisbaneAustralia/Broken_HillAustralia/DarwinAustralia/EuclaAustralia/HobartAustralia/LindemanAustralia/Lord_HoweAustralia/MelbourneAustralia/PerthAustralia/SydneyEurope/ViennaAsia/BakuAmerica/NassauAsia/BahrainAsia/DhakaAmerica/BarbadosEurope/MinskEurope/BrusselsAmerica/BelizeAfrica/Porto-NovoAtlantic/BermudaAsia/ThimphuAmerica/La_PazAmerica/KralendijkEurope/SarajevoAfrica/GaboroneAmerica/AraguainaAmerica/BahiaAmerica/BelemAmerica/Boa_VistaAmerica/Campo_GrandeAmerica/CuiabaAmerica/EirunepeAmerica/FortalezaAmerica/MaceioAmerica/ManausAmerica/NoronhaAmerica/Porto_VelhoAmerica/RecifeAmerica/Rio_BrancoAmerica/SantaremAmerica/Sao_PauloIndian/ChagosAsia/BruneiEurope/SofiaAfrica/OuagadougouAfrica/BujumburaAsia/Phnom_PenhAfrica/DoualaAmerica/AtikokanAmerica/Blanc-SablonAmerica/Cambridge_BayAmerica/CrestonAmerica/DawsonAmerica/Dawson_CreekAmerica/EdmontonAmerica/Fort_NelsonAmerica/Glace_BayAmerica/Goose_BayAmerica/HalifaxAmerica/InuvikAmerica/IqaluitAmerica/MonctonAmerica/NipigonAmerica/PangnirtungAmerica/Rainy_RiverAmerica/Rankin_InletAmerica/ReginaAmerica/ResoluteAmerica/St_JohnsAmerica/Swift_CurrentAmerica/Thunder_BayAmerica/TorontoAmerica/VancouverAmerica/WhitehorseAmerica/WinnipegAmerica/YellowknifeAtlantic/Cape_VerdeAmerica/CaymanAfrica/BanguiAfrica/NdjamenaAmerica/Punta_ArenasAmerica/SantiagoPacific/EasterAsia/ShanghaiAsia/UrumqiIndian/ChristmasIndian/CocosAmerica/BogotaIndian/ComoroAfrica/BrazzavilleAfrica/KinshasaAfrica/LubumbashiPacific/RarotongaAmerica/Costa_RicaEurope/ZagrebAmerica/HavanaAmerica/CuracaoAsia/FamagustaAsia/NicosiaEurope/PragueAfrica/AbidjanEurope/CopenhagenAfrica/DjiboutiAmerica/DominicaAmerica/Santo_DomingoAmerica/GuayaquilPacific/GalapagosAfrica/CairoAmerica/El_SalvadorAfrica/MalaboAfrica/AsmaraEurope/TallinnAfrica/Addis_AbabaAtlantic/StanleyAtlantic/FaroePacific/FijiEurope/HelsinkiEurope/ParisAmerica/CayennePacific/GambierPacific/MarquesasPacific/TahitiIndian/KerguelenAfrica/LibrevilleAfrica/BanjulAsia/TbilisiEurope/BerlinEurope/BusingenAfrica/AccraEurope/GibraltarEurope/AthensAmerica/DanmarkshavnAmerica/NuukAmerica/ScoresbysundAmerica/ThuleAmerica/GrenadaAmerica/GuadeloupePacific/GuamAmerica/GuatemalaEurope/GuernseyAfrica/ConakryAfrica/BissauAmerica/GuyanaAmerica/Port-au-PrinceEurope/VaticanAmerica/TegucigalpaAsia/Hong_KongEurope/BudapestAtlantic/ReykjavikAsia/KolkataAsia/JakartaAsia/JayapuraAsia/MakassarAsia/PontianakAsia/TehranAsia/BaghdadEurope/DublinEurope/Isle_of_ManAsia/JerusalemEurope/RomeAmerica/JamaicaAsia/TokyoEurope/JerseyAsia/AmmanAsia/AlmatyAsia/AqtauAsia/AqtobeAsia/AtyrauAsia/OralAsia/QostanayAsia/QyzylordaAfrica/NairobiPacific/KantonPacific/KiritimatiPacific/TarawaAsia/PyongyangAsia/SeoulAsia/KuwaitAsia/BishkekAsia/VientianeEurope/RigaAsia/BeirutAfrica/MaseruAfrica/MonroviaAfrica/TripoliEurope/VaduzEurope/VilniusEurope/LuxembourgAsia/MacauEurope/SkopjeIndian/AntananarivoAfrica/BlantyreAsia/Kuala_LumpurAsia/KuchingIndian/MaldivesAfrica/BamakoEurope/MaltaPacific/KwajaleinPacific/MajuroAmerica/MartiniqueAfrica/NouakchottIndian/MauritiusIndian/MayotteAmerica/Bahia_BanderasAmerica/CancunAmerica/ChihuahuaAmerica/HermosilloAmerica/MatamorosAmerica/MazatlanAmerica/MeridaAmerica/Mexico_CityAmerica/MonterreyAmerica/OjinagaAmerica/TijuanaPacific/ChuukPacific/KosraePacific/PohnpeiEurope/ChisinauEurope/MonacoAsia/ChoibalsanAsia/HovdAsia/UlaanbaatarEurope/PodgoricaAmerica/MontserratAfrica/CasablancaAfrica/MaputoAsia/YangonAfrica/WindhoekPacific/NauruAsia/KathmanduEurope/AmsterdamPacific/NoumeaPacific/AucklandPacific/ChathamAmerica/ManaguaAfrica/NiameyAfrica/LagosPacific/NiuePacific/NorfolkPacific/SaipanEurope/OsloAsia/MuscatAsia/KarachiPacific/PalauAsia/GazaAsia/HebronAmerica/PanamaPacific/BougainvillePacific/Port_MoresbyAmerica/AsuncionAmerica/LimaAsia/ManilaPacific/PitcairnEurope/WarsawAtlantic/AzoresAtlantic/MadeiraEurope/LisbonAmerica/Puerto_RicoAsia/QatarEurope/BucharestAsia/AnadyrAsia/BarnaulAsia/ChitaAsia/IrkutskAsia/KamchatkaAsia/KhandygaAsia/KrasnoyarskAsia/MagadanAsia/NovokuznetskAsia/NovosibirskAsia/OmskAsia/SakhalinAsia/SrednekolymskAsia/TomskAsia/Ust-NeraAsia/VladivostokAsia/YakutskAsia/YekaterinburgEurope/AstrakhanEurope/KaliningradEurope/KirovEurope/MoscowEurope/SamaraEurope/SaratovEurope/UlyanovskEurope/VolgogradAfrica/KigaliIndian/ReunionAmerica/St_BarthelemyAtlantic/St_HelenaAmerica/St_KittsAmerica/St_LuciaAmerica/MarigotAmerica/MiquelonAmerica/St_VincentPacific/ApiaEurope/San_MarinoAfrica/Sao_TomeAsia/RiyadhAfrica/DakarEurope/BelgradeIndian/MaheAfrica/FreetownAsia/SingaporeAmerica/Lower_PrincesEurope/BratislavaEurope/LjubljanaPacific/GuadalcanalAfrica/MogadishuAfrica/JohannesburgAtlantic/South_GeorgiaAfrica/JubaAfrica/CeutaAtlantic/CanaryEurope/MadridAsia/ColomboAfrica/KhartoumAmerica/ParamariboArctic/LongyearbyenAfrica/MbabaneEurope/StockholmEurope/ZurichAsia/DamascusAsia/TaipeiAsia/DushanbeAfrica/Dar_es_SalaamAsia/BangkokAsia/DiliAfrica/LomePacific/FakaofoPacific/TongatapuAmerica/Port_of_SpainAfrica/TunisEurope/IstanbulAsia/AshgabatAmerica/Grand_TurkPacific/FunafutiAfrica/KampalaEurope/KievEurope/SimferopolEurope/UzhgorodEurope/ZaporozhyeAsia/DubaiEurope/LondonAmerica/AdakAmerica/AnchorageAmerica/BoiseAmerica/ChicagoAmerica/DenverAmerica/DetroitAmerica/Indiana/IndianapolisAmerica/Indiana/KnoxAmerica/Indiana/MarengoAmerica/Indiana/PetersburgAmerica/Indiana/Tell_CityAmerica/Indiana/VevayAmerica/Indiana/VincennesAmerica/Indiana/WinamacAmerica/JuneauAmerica/Kentucky/LouisvilleAmerica/Kentucky/MonticelloAmerica/Los_AngelesAmerica/MenomineeAmerica/MetlakatlaAmerica/New_YorkAmerica/NomeAmerica/North_Dakota/BeulahAmerica/North_Dakota/CenterAmerica/North_Dakota/New_SalemAmerica/PhoenixAmerica/SitkaAmerica/YakutatPacific/HonoluluPacific/MidwayPacific/WakeAmerica/MontevideoAsia/SamarkandAsia/TashkentPacific/EfateAmerica/CaracasAsia/Ho_Chi_MinhAmerica/TortolaAmerica/St_ThomasPacific/WallisAfrica/El_AaiunAsia/AdenAfrica/LusakaAfrica/HarareEurope/Mariehamn"
	_TimezoneLowerString = "asia/kabuleurope/tiraneafrica/algierspacific/pago_pagoeurope/andorraafrica/luandaamerica/anguillaantarctica/caseyantarctica/davisantarctica/dumontdurvilleantarctica/mawsonantarctica/mcmurdoantarctica/palmerantarctica/rotheraantarctica/syowaantarctica/trollantarctica/vostokamerica/antiguaamerica/argentina/buenos_airesamerica/argentina/catamarcaamerica/argentina/cordobaamerica/argentina/jujuyamerica/argentina/la_riojaamerica/argentina/mendozaamerica/argentina/rio_gallegosamerica/argentina/saltaamerica/argentina/san_juanamerica/argentina/san_luisamerica/argentina/tucumanamerica/argentina/ushuaiaasia/yerevanamerica/arubaantarctica/macquarieaustralia/adelaideaustralia/brisbaneaustralia/broken_hillaustralia/darwinaustralia/euclaaustralia/hobartaustralia/lindemanaustralia/lord_howeaustralia/melbourneaustralia/perthaustralia/sydneyeurope/viennaasia/bakuamerica/nassauasia/bahrainasia/dhakaamerica/barbadoseurope/minskeurope/brusselsamerica/belizeafrica/porto-novoatlantic/bermudaasia/thimphuamerica/la_pazamerica/kralendijkeurope/sarajevoafrica/gaboroneamerica/araguainaamerica/bahiaamerica/belemamerica/boa_vistaamerica/campo_grandeamerica/cuiabaamerica/eirunepeamerica/fortalezaamerica/maceioamerica/manausamerica/noronhaamerica/porto_velhoamerica/recifeamerica/rio_brancoamerica/santaremamerica/sao_pauloindian/chagosasia/bruneieurope/sofiaafrica/ouagadougouafrica/bujumburaasia/phnom_penhafrica/doualaamerica/atikokanamerica/blanc-sablonamerica/cambridge_bayamerica/crestonamerica/dawsonamerica/dawson_creekamerica/edmontonamerica/fort_nelsonamerica/glace_bayamerica/goose_bayamerica/halifaxamerica/inuvikamerica/iqaluitamerica/monctonamerica/nipigonamerica/pangnirtungamerica/rainy_riveramerica/rankin_inletamerica/reginaamerica/resoluteamerica/st_johnsamerica/swift_currentamerica/thunder_bayamerica/torontoamerica/vancouveramerica/whitehorseamerica/winnipegamerica/yellowknifeatlantic/cape_verdeamerica/caymanafrica/banguiafrica/ndjamenaamerica/punta_arenasamerica/santiagopacific/easterasia/shanghaiasia/urumqiindian/christmasindian/cocosamerica/bogotaindian/comoroafrica/brazzavilleafrica/kinshasaafrica/lubumbashipacific/rarotongaamerica/costa_ricaeurope/zagrebamerica/havanaamerica/curacaoasia/famagustaasia/nicosiaeurope/pragueafrica/abidjaneurope/copenhagenafrica/djiboutiamerica/dominicaamerica/santo_domingoamerica/guayaquilpacific/galapagosafrica/cairoamerica/el_salvadorafrica/malaboafrica/asmaraeurope/tallinnafrica/addis_ababaatlantic/stanleyatlantic/faroepacific/fijieurope/helsinkieurope/parisamerica/cayennepacific/gambierpacific/marquesaspacific/tahitiindian/kerguelenafrica/librevilleafrica/banjulasia/tbilisieurope/berlineurope/busingenafrica/accraeurope/gibraltareurope/athensamerica/danmarkshavnamerica/nuukamerica/scoresbysundamerica/thuleamerica/grenadaamerica/guadeloupepacific/guamamerica/guatemalaeurope/guernseyafrica/conakryafrica/bissauamerica/guyanaamerica/port-au-princeeurope/vaticanamerica/tegucigalpaasia/hong_kongeurope/budapestatlantic/reykjavikasia/kolkataasia/jakartaasia/jayapuraasia/makassarasia/pontianakasia/tehranasia/baghdadeurope/dublineurope/isle_of_manasia/jerusalemeurope/romeamerica/jamaicaasia/tokyoeurope/jerseyasia/ammanasia/almatyasia/aqtauasia/aqtobeasia/atyrauasia/oralasia/qostanayasia/qyzylordaafrica/nairobipacific/kantonpacific/kiritimatipacific/tarawaasia/pyongyangasia/seoulasia/kuwaitasia/bishkekasia/vientianeeurope/rigaasia/beirutafrica/maseruafrica/monroviaafrica/tripolieurope/vaduzeurope/vilniuseurope/luxembourgasia/macaueurope/skopjeindian/antananarivoafrica/blantyreasia/kuala_lumpurasia/kuchingindian/maldivesafrica/bamakoeurope/maltapacific/kwajaleinpacific/majuroamerica/martiniqueafrica/nouakchottindian/mauritiusindian/mayotteamerica/bahia_banderasamerica/cancunamerica/chihuahuaamerica/hermosilloamerica/matamorosamerica/mazatlanamerica/meridaamerica/mexico_cityamerica/monterreyamerica/ojinagaamerica/tijuanapacific/chuukpacific/kosraepacific/pohnpeieurope/chisinaueurope/monacoasia/choibalsanasia/hovdasia/ulaanbaatareurope/podgoricaamerica/montserratafrica/casablancaafrica/maputoasia/yangonafrica/windhoekpacific/nauruasia/kathmandueurope/amsterdampacific/noumeapacific/aucklandpacific/chathamamerica/managuaafrica/niameyafrica/lagospacific/niuepacific/norfolkpacific/saipaneurope/osloasia/muscatasia/karachipacific/palauasia/gazaasia/hebronamerica/panamapacific/bougainvillepacific/port_moresbyamerica/asuncionamerica/limaasia/manilapacific/pitcairneurope/warsawatlantic/azoresatlantic/madeiraeurope/lisbonamerica/puerto_ricoasia/qatareurope/bucharestasia/anadyrasia/barnaulasia/chitaasia/irkutskasia/kamchatkaasia/khandygaasia/krasnoyarskasia/magadanasia/novokuznetskasia/novosibirskasia/omskasia/sakhalinasia/srednekolymskasia/tomskasia/ust-neraasia/vladivostokasia/yakutskasia/yekaterinburgeurope/astrakhaneurope/kaliningradeurope/kiroveurope/moscoweurope/samaraeurope/saratoveurope/ulyanovskeurope/volgogradafrica/kigaliindian/reunionamerica/st_barthelemyatlantic/st_helenaamerica/st_kittsamerica/st_luciaamerica/marigotamerica/miquelonamerica/st_vincentpacific/apiaeurope/san_marinoafrica/sao_tomeasia/riyadhafrica/dakareurope/belgradeindian/maheafrica/freetownasia/singaporeamerica/lower_princeseurope/bratislavaeurope/ljubljanapacific/guadalcanalafrica/mogadishuafrica/johannesburgatlantic/south_georgiaafrica/jubaafrica/ceutaatlantic/canaryeurope/madridasia/colomboafrica/khartoumamerica/paramariboarctic/longyearbyenafrica/mbabaneeurope/stockholmeurope/zurichasia/damascusasia/taipeiasia/dushanbeafrica/dar_es_salaamasia/bangkokasia/diliafrica/lomepacific/fakaofopacific/tongatapuamerica/port_of_spainafrica/tuniseurope/istanbulasia/ashgabatamerica/grand_turkpacific/funafutiafrica/kampalaeurope/kieveurope/simferopoleurope/uzhgorodeurope/zaporozhyeasia/dubaieurope/londonamerica/adakamerica/anchorageamerica/boiseamerica/chicagoamerica/denveramerica/detroitamerica/indiana/indianapolisamerica/indiana/knoxamerica/indiana/marengoamerica/indiana/petersburgamerica/indiana/tell_cityamerica/indiana/vevayamerica/indiana/vincennesamerica/indiana/winamacamerica/juneauamerica/kentucky/louisvilleamerica/kentucky/monticelloamerica/los_angelesamerica/menomineeamerica/metlakatlaamerica/new_yorkamerica/nomeamerica/north_dakota/beulahamerica/north_dakota/centeramerica/north_dakota/new_salemamerica/phoenixamerica/sitkaamerica/yakutatpacific/honolulupacific/midwaypacific/wakeamerica/montevideoasia/samarkandasia/tashkentpacific/efateamerica/caracasasia/ho_chi_minhamerica/tortolaamerica/st_thomaspacific/wallisafrica/el_aaiunasia/adenafrica/lusakaafrica/harareeurope/mariehamn"
)

var (
	_TimezoneValueRange = [2]Timezone{1, 424}
	_TimezoneValues     = []Timezone{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424}
	_TimezoneStrings    = []string{_TimezoneString[0:10], _TimezoneString[10:23], _TimezoneString[23:37], _TimezoneString[37:54], _TimezoneString[54:68], _TimezoneString[68:81], _TimezoneString[81:97], _TimezoneString[97:113], _TimezoneString[113:129], _TimezoneString[129:154], _TimezoneString[154:171], _TimezoneString[171:189], _TimezoneString[189:206], _TimezoneString[206:224], _TimezoneString[224:240], _TimezoneString[240:256], _TimezoneString[256:273], _TimezoneString[273:288], _TimezoneString[288:318], _TimezoneString[318:345], _TimezoneString[345:370], _TimezoneString[370:393], _TimezoneString[393:419], _TimezoneString[419:444], _TimezoneString[444:474], _TimezoneString[474:497], _TimezoneString[497:523], _TimezoneString[523:549], _TimezoneString[549:574], _TimezoneString[574:599], _TimezoneString[599:611], _TimezoneString[611:624], _TimezoneString[624:644], _TimezoneString[644:662], _TimezoneString[662:680], _TimezoneString[680:701], _TimezoneString[701:717], _TimezoneString[717:732], _TimezoneString[732:748], _TimezoneString[748:766], _TimezoneString[766:785], _TimezoneString[785:804], _TimezoneString[804:819], _TimezoneString[819:835], _TimezoneString[835:848], _TimezoneString[848:857], _TimezoneString[857:871], _TimezoneString[871:883], _TimezoneString[883:893], _TimezoneString[893:909], _TimezoneString[909:921], _TimezoneString[921:936], _TimezoneString[936:950], _TimezoneString[950:967], _TimezoneString[967:983], _TimezoneString[983:995], _TimezoneString[995:1009], _TimezoneString[1009:1027], _TimezoneString[1027:1042], _TimezoneString[1042:1057], _TimezoneString[1057:1074], _TimezoneString[1074:1087], _TimezoneString[1087:1100], _TimezoneString[1100:1117], _TimezoneString[1117:1137], _TimezoneString[1137:1151], _TimezoneString[1151:1167], _TimezoneString[1167:1184], _TimezoneString[1184:1198], _TimezoneString[1198:1212], _TimezoneString[1212:1227], _TimezoneString[1227:1246], _TimezoneString[1246:1260], _TimezoneString[1260:1278], _TimezoneString[1278:1294], _TimezoneString[1294:1311], _TimezoneString[1311:1324], _TimezoneString[1324:1335], _TimezoneString[1335:1347], _TimezoneString[1347:1365], _TimezoneString[1365:1381], _TimezoneString[1381:1396], _TimezoneString[1396:1409], _TimezoneString[1409:1425], _TimezoneString[1425:1445], _TimezoneString[1445:1466], _TimezoneString[1466:1481], _TimezoneString[1481:1495], _TimezoneString[1495:1515], _TimezoneString[1515:1531], _TimezoneString[1531:1550], _TimezoneString[1550:1567], _TimezoneString[1567:1584], _TimezoneString[1584:1599], _TimezoneString[1599:1613], _TimezoneString[1613:1628], _TimezoneString[1628:1643], _TimezoneString[1643:1658], _TimezoneString[1658:1677], _TimezoneString[1677:1696], _TimezoneString[1696:1716], _TimezoneString[1716:1730], _TimezoneString[1730:1746], _TimezoneString[1746:1762], _TimezoneString[1762:1783], _TimezoneString[1783:1802], _TimezoneString[1802:1817], _TimezoneString[1817:1834], _TimezoneString[1834:1852], _TimezoneString[1852:1868], _TimezoneString[1868:1887], _TimezoneString[1887:1906], _TimezoneString[1906:1920], _TimezoneString[1920:1933], _TimezoneString[1933:1948], _TimezoneString[1948:1968], _TimezoneString[1968:1984], _TimezoneString[1984:1998], _TimezoneString[1998:2011], _TimezoneString[2011:2022], _TimezoneString[2022:2038], _TimezoneString[2038:2050], _TimezoneString[2050:2064], _TimezoneString[2064:2077], _TimezoneString[2077:2095], _TimezoneString[2095:2110], _TimezoneString[2110:2127], _TimezoneString[2127:2144], _TimezoneString[2144:2162], _TimezoneString[2162:2175], _TimezoneString[2175:2189], _TimezoneString[2189:2204], _TimezoneString[2204:2218], _TimezoneString[2218:2230], _TimezoneString[2230:2243], _TimezoneString[2243:2257], _TimezoneString[2257:2274], _TimezoneString[2274:2289], _TimezoneString[2289:2305], _TimezoneString[2305:2326], _TimezoneString[2326:2343], _TimezoneString[2343:2360], _TimezoneString[2360:2372], _TimezoneString[2372:2391], _TimezoneString[2391:2404], _TimezoneString[2404:2417], _TimezoneString[2417:2431], _TimezoneString[2431:2449], _TimezoneString[2449:2465], _TimezoneString[2465:2479], _TimezoneString[2479:2491], _TimezoneString[2491:2506], _TimezoneString[2506:2518], _TimezoneString[2518:2533], _TimezoneString[2533:2548], _TimezoneString[2548:2565], _TimezoneString[2565:2579], _TimezoneString[2579:2595], _TimezoneString[2595:2612], _TimezoneString[2612:2625], _TimezoneString[2625:2637], _TimezoneString[2637:2650], _TimezoneString[2650:2665], _TimezoneString[2665:2677], _TimezoneString[2677:2693], _TimezoneString[2693:2706], _TimezoneString[2706:2726], _TimezoneString[2726:2738], _TimezoneString[2738:2758], _TimezoneString[2758:2771], _TimezoneString[2771:2786], _TimezoneString[2786:2804], _TimezoneString[2804:2816], _TimezoneString[2816:2833], _TimezoneString[2833:2848], _TimezoneString[2848:2862], _TimezoneString[2862:2875], _TimezoneString[2875:2889], _TimezoneString[2889:2911], _TimezoneString[2911:2925], _TimezoneString[2925:2944], _TimezoneString[2944:2958], _TimezoneString[2958:2973], _TimezoneString[2973:2991], _TimezoneString[2991:3003], _TimezoneString[3003:3015], _TimezoneString[3015:3028], _TimezoneString[3028:3041], _TimezoneString[3041:3055], _TimezoneString[3055:3066], _TimezoneString[3066:3078], _TimezoneString[3078:3091], _TimezoneString[3091:3109], _TimezoneString[3109:3123], _TimezoneString[3123:3134], _TimezoneString[3134:3149], _TimezoneString[3149:3159], _TimezoneString[3159:3172], _TimezoneString[3172:3182], _TimezoneString[3182:3193], _TimezoneString[3193:3203], _TimezoneString[3203:3214], _TimezoneString[3214:3225], _TimezoneString[3225:3234], _TimezoneString[3234:3247], _TimezoneString[3247:3261], _TimezoneString[3261:3275], _TimezoneString[3275:3289], _TimezoneString[3289:3307], _TimezoneString[3307:3321], _TimezoneString[3321:3335], _TimezoneString[3335:3345], _TimezoneString[3345:3356], _TimezoneString[3356:3368], _TimezoneString[3368:3382], _TimezoneString[3382:3393], _TimezoneString[3393:3404], _TimezoneString[3404:3417], _TimezoneString[3417:3432], _TimezoneString[3432:3446], _TimezoneString[3446:3458], _TimezoneString[3458:3472], _TimezoneString[3472:3489], _TimezoneString[3489:3499], _TimezoneString[3499:3512], _TimezoneString[3512:3531], _TimezoneString[3531:3546], _TimezoneString[3546:3563], _TimezoneString[3563:3575], _TimezoneString[3575:3590], _TimezoneString[3590:3603], _TimezoneString[3603:3615], _TimezoneString[3615:3632], _TimezoneString[3632:3646], _TimezoneString[3646:3664], _TimezoneString[3664:3681], _TimezoneString[3681:3697], _TimezoneString[3697:3711], _TimezoneString[3711:3733], _TimezoneString[3733:3747], _TimezoneString[3747:3764], _TimezoneString[3764:3782], _TimezoneString[3782:3799], _TimezoneString[3799:3815], _TimezoneString[3815:3829], _TimezoneString[3829:3848], _TimezoneString[3848:3865], _TimezoneString[3865:3880], _TimezoneString[3880:3895], _TimezoneString[3895:3908], _TimezoneString[3908:3922], _TimezoneString[3922:3937], _TimezoneString[3937:3952], _TimezoneString[3952:3965], _TimezoneString[3965:3980], _TimezoneString[3980:3989], _TimezoneString[3989:4005], _TimezoneString[4005:4021], _TimezoneString[4021:4039], _TimezoneString[4039:4056], _TimezoneString[4056:4069], _TimezoneString[4069:4080], _TimezoneString[4080:4095], _TimezoneString[4095:4108], _TimezoneString[4108:4122], _TimezoneString[4122:4138], _TimezoneString[4138:4152], _TimezoneString[4152:4168], _TimezoneString[4168:4183], _TimezoneString[4183:4198], _TimezoneString[4198:4211], _TimezoneString[4211:4223], _TimezoneString[4223:4235], _TimezoneString[4235:4250], _TimezoneString[4250:4264], _TimezoneString[4264:4275], _TimezoneString[4275:4286], _TimezoneString[4286:4298], _TimezoneString[4298:4311], _TimezoneString[4311:4320], _TimezoneString[4320:4331], _TimezoneString[4331:4345], _TimezoneString[4345:4365], _TimezoneString[4365:4385], _TimezoneString[4385:4401], _TimezoneString[4401:4413], _TimezoneString[4413:4424], _TimezoneString[4424:4440], _TimezoneString[4440:4453], _TimezoneString[4453:4468], _TimezoneString[4468:4484], _TimezoneString[4484:4497], _TimezoneString[4497:4516], _TimezoneString[4516:4526], _TimezoneString[4526:4542], _TimezoneString[4542:4553], _TimezoneString[4553:4565], _TimezoneString[4565:4575], _TimezoneString[4575:4587], _TimezoneString[4587:4601], _TimezoneString[4601:4614], _TimezoneString[4614:4630], _TimezoneString[4630:4642], _TimezoneString[4642:4659], _TimezoneString[4659:4675], _TimezoneString[4675:4684], _TimezoneString[4684:4697], _TimezoneString[4697:4715], _TimezoneString[4715:4725], _TimezoneString[4725:4738], _TimezoneString[4738:4754], _TimezoneString[4754:4766], _TimezoneString[4766:4784], _TimezoneString[4784:4800], _TimezoneString[4800:4818], _TimezoneString[4818:4830], _TimezoneString[4830:4843], _TimezoneString[4843:4856], _TimezoneString[4856:4870], _TimezoneString[4870:4886], _TimezoneString[4886:4902], _TimezoneString[4902:4915], _TimezoneString[4915:4929], _TimezoneString[4929:4950], _TimezoneString[4950:4968], _TimezoneString[4968:4984], _TimezoneString[4984:5000], _TimezoneString[5000:5015], _TimezoneString[5015:5031], _TimezoneString[5031:5049], _TimezoneString[5049:5061], _TimezoneString[5061:5078], _TimezoneString[5078:5093], _TimezoneString[5093:5104], _TimezoneString[5104:5116], _TimezoneString[5116:5131], _TimezoneString[5131:5142], _TimezoneString[5142:5157], _TimezoneString[5157:5171], _TimezoneString[5171:5192], _TimezoneString[5192:5209], _TimezoneString[5209:5225], _TimezoneString[5225:5244], _TimezoneString[5244:5260], _TimezoneString[5260:5279], _TimezoneString[5279:5301], _TimezoneString[5301:5312], _TimezoneString[5312:5324], _TimezoneString[5324:5339], _TimezoneString[5339:5352], _TimezoneString[5352:5364], _TimezoneString[5364:5379], _TimezoneString[5379:5397], _TimezoneString[5397:5416], _TimezoneString[5416:5430], _TimezoneString[5430:5446], _TimezoneString[5446:5459], _TimezoneString[5459:5472], _TimezoneString[5472:5483], _TimezoneString[5483:5496], _TimezoneString[5496:5516], _TimezoneString[5516:5528], _TimezoneString[5528:5537], _TimezoneString[5537:5548], _TimezoneString[5548:5563], _TimezoneString[5563:5580], _TimezoneString[5580:5601], _TimezoneString[5601:5613], _TimezoneString[5613:5628], _TimezoneString[5628:5641], _TimezoneString[5641:5659], _TimezoneString[5659:5675], _TimezoneString[5675:5689], _TimezoneString[5689:5700], _TimezoneString[5700:5717], _TimezoneString[5717:5732], _TimezoneString[5732:5749], _TimezoneString[5749:5759], _TimezoneString[5759:5772], _TimezoneString[5772:5784], _TimezoneString[5784:5801], _TimezoneString[5801:5814], _TimezoneString[5814:5829], _TimezoneString[5829:5843], _TimezoneString[5843:5858], _TimezoneString[5858:5886], _TimezoneString[5886:5906], _TimezoneString[5906:5929], _TimezoneString[5929:5955], _TimezoneString[5955:5980], _TimezoneString[5980:6001], _TimezoneString[6001:6026], _TimezoneString[6026:6049], _TimezoneString[6049:6063], _TimezoneString[6063:6090], _TimezoneString[6090:6117], _TimezoneString[6117:6136], _TimezoneString[6136:6153], _TimezoneString[6153:6171], _TimezoneString[6171:6187], _TimezoneString[6187:6199], _TimezoneString[6199:6226], _TimezoneString[6226:6253], _TimezoneString[6253:6283], _TimezoneString[6283:6298], _TimezoneString[6298:6311], _TimezoneString[6311:6326], _TimezoneString[6326:6342], _TimezoneString[6342:6356], _TimezoneString[6356:6368], _TimezoneString[6368:6386], _TimezoneString[6386:6400], _TimezoneString[6400:6413], _TimezoneString[6413:6426], _TimezoneString[6426:6441], _TimezoneString[6441:6457], _TimezoneString[6457:6472], _TimezoneString[6472:6489], _TimezoneString[6489:6503], _TimezoneString[6503:6518], _TimezoneString[6518:6527], _TimezoneString[6527:6540], _TimezoneString[6540:6553], _TimezoneString[6553:6569]}
)

// TimezoneValues returns all values of the enum.
func TimezoneValues() []Timezone {
	strs := make([]Timezone, len(_TimezoneValues))
	copy(strs, _TimezoneValues)
	return _TimezoneValues
}

// TimezoneStrings returns a slice of all String values of the enum.
func TimezoneStrings() []string {
	strs := make([]string, len(_TimezoneStrings))
	copy(strs, _TimezoneStrings)
	return strs
}

// IsValid inspects whether the value is valid enum value.
func (_t Timezone) IsValid() bool {
	return _t >= _TimezoneValueRange[0] && _t <= _TimezoneValueRange[1]
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Timezone(%d) instead.
func (_t Timezone) String() string {
	if !_t.IsValid() {
		return fmt.Sprintf("Timezone(%d)", _t)
	}
	idx := uint(_t) - 1
	return _TimezoneStrings[idx]
}

var (
	_TimezoneStringToValueMap = map[string]Timezone{
		_TimezoneString[0:10]:      1,
		_TimezoneString[10:23]:     2,
		_TimezoneString[23:37]:     3,
		_TimezoneString[37:54]:     4,
		_TimezoneString[54:68]:     5,
		_TimezoneString[68:81]:     6,
		_TimezoneString[81:97]:     7,
		_TimezoneString[97:113]:    8,
		_TimezoneString[113:129]:   9,
		_TimezoneString[129:154]:   10,
		_TimezoneString[154:171]:   11,
		_TimezoneString[171:189]:   12,
		_TimezoneString[189:206]:   13,
		_TimezoneString[206:224]:   14,
		_TimezoneString[224:240]:   15,
		_TimezoneString[240:256]:   16,
		_TimezoneString[256:273]:   17,
		_TimezoneString[273:288]:   18,
		_TimezoneString[288:318]:   19,
		_TimezoneString[318:345]:   20,
		_TimezoneString[345:370]:   21,
		_TimezoneString[370:393]:   22,
		_TimezoneString[393:419]:   23,
		_TimezoneString[419:444]:   24,
		_TimezoneString[444:474]:   25,
		_TimezoneString[474:497]:   26,
		_TimezoneString[497:523]:   27,
		_TimezoneString[523:549]:   28,
		_TimezoneString[549:574]:   29,
		_TimezoneString[574:599]:   30,
		_TimezoneString[599:611]:   31,
		_TimezoneString[611:624]:   32,
		_TimezoneString[624:644]:   33,
		_TimezoneString[644:662]:   34,
		_TimezoneString[662:680]:   35,
		_TimezoneString[680:701]:   36,
		_TimezoneString[701:717]:   37,
		_TimezoneString[717:732]:   38,
		_TimezoneString[732:748]:   39,
		_TimezoneString[748:766]:   40,
		_TimezoneString[766:785]:   41,
		_TimezoneString[785:804]:   42,
		_TimezoneString[804:819]:   43,
		_TimezoneString[819:835]:   44,
		_TimezoneString[835:848]:   45,
		_TimezoneString[848:857]:   46,
		_TimezoneString[857:871]:   47,
		_TimezoneString[871:883]:   48,
		_TimezoneString[883:893]:   49,
		_TimezoneString[893:909]:   50,
		_TimezoneString[909:921]:   51,
		_TimezoneString[921:936]:   52,
		_TimezoneString[936:950]:   53,
		_TimezoneString[950:967]:   54,
		_TimezoneString[967:983]:   55,
		_TimezoneString[983:995]:   56,
		_TimezoneString[995:1009]:  57,
		_TimezoneString[1009:1027]: 58,
		_TimezoneString[1027:1042]: 59,
		_TimezoneString[1042:1057]: 60,
		_TimezoneString[1057:1074]: 61,
		_TimezoneString[1074:1087]: 62,
		_TimezoneString[1087:1100]: 63,
		_TimezoneString[1100:1117]: 64,
		_TimezoneString[1117:1137]: 65,
		_TimezoneString[1137:1151]: 66,
		_TimezoneString[1151:1167]: 67,
		_TimezoneString[1167:1184]: 68,
		_TimezoneString[1184:1198]: 69,
		_TimezoneString[1198:1212]: 70,
		_TimezoneString[1212:1227]: 71,
		_TimezoneString[1227:1246]: 72,
		_TimezoneString[1246:1260]: 73,
		_TimezoneString[1260:1278]: 74,
		_TimezoneString[1278:1294]: 75,
		_TimezoneString[1294:1311]: 76,
		_TimezoneString[1311:1324]: 77,
		_TimezoneString[1324:1335]: 78,
		_TimezoneString[1335:1347]: 79,
		_TimezoneString[1347:1365]: 80,
		_TimezoneString[1365:1381]: 81,
		_TimezoneString[1381:1396]: 82,
		_TimezoneString[1396:1409]: 83,
		_TimezoneString[1409:1425]: 84,
		_TimezoneString[1425:1445]: 85,
		_TimezoneString[1445:1466]: 86,
		_TimezoneString[1466:1481]: 87,
		_TimezoneString[1481:1495]: 88,
		_TimezoneString[1495:1515]: 89,
		_TimezoneString[1515:1531]: 90,
		_TimezoneString[1531:1550]: 91,
		_TimezoneString[1550:1567]: 92,
		_TimezoneString[1567:1584]: 93,
		_TimezoneString[1584:1599]: 94,
		_TimezoneString[1599:1613]: 95,
		_TimezoneString[1613:1628]: 96,
		_TimezoneString[1628:1643]: 97,
		_TimezoneString[1643:1658]: 98,
		_TimezoneString[1658:1677]: 99,
		_TimezoneString[1677:1696]: 100,
		_TimezoneString[1696:1716]: 101,
		_TimezoneString[1716:1730]: 102,
		_TimezoneString[1730:1746]: 103,
		_TimezoneString[1746:1762]: 104,
		_TimezoneString[1762:1783]: 105,
		_TimezoneString[1783:1802]: 106,
		_TimezoneString[1802:1817]: 107,
		_TimezoneString[1817:1834]: 108,
		_TimezoneString[1834:1852]: 109,
		_TimezoneString[1852:1868]: 110,
		_TimezoneString[1868:1887]: 111,
		_TimezoneString[1887:1906]: 112,
		_TimezoneString[1906:1920]: 113,
		_TimezoneString[1920:1933]: 114,
		_TimezoneString[1933:1948]: 115,
		_TimezoneString[1948:1968]: 116,
		_TimezoneString[1968:1984]: 117,
		_TimezoneString[1984:1998]: 118,
		_TimezoneString[1998:2011]: 119,
		_TimezoneString[2011:2022]: 120,
		_TimezoneString[2022:2038]: 121,
		_TimezoneString[2038:2050]: 122,
		_TimezoneString[2050:2064]: 123,
		_TimezoneString[2064:2077]: 124,
		_TimezoneString[2077:2095]: 125,
		_TimezoneString[2095:2110]: 126,
		_TimezoneString[2110:2127]: 127,
		_TimezoneString[2127:2144]: 128,
		_TimezoneString[2144:2162]: 129,
		_TimezoneString[2162:2175]: 130,
		_TimezoneString[2175:2189]: 131,
		_TimezoneString[2189:2204]: 132,
		_TimezoneString[2204:2218]: 133,
		_TimezoneString[2218:2230]: 134,
		_TimezoneString[2230:2243]: 135,
		_TimezoneString[2243:2257]: 136,
		_TimezoneString[2257:2274]: 137,
		_TimezoneString[2274:2289]: 138,
		_TimezoneString[2289:2305]: 139,
		_TimezoneString[2305:2326]: 140,
		_TimezoneString[2326:2343]: 141,
		_TimezoneString[2343:2360]: 142,
		_TimezoneString[2360:2372]: 143,
		_TimezoneString[2372:2391]: 144,
		_TimezoneString[2391:2404]: 145,
		_TimezoneString[2404:2417]: 146,
		_TimezoneString[2417:2431]: 147,
		_TimezoneString[2431:2449]: 148,
		_TimezoneString[2449:2465]: 149,
		_TimezoneString[2465:2479]: 150,
		_TimezoneString[2479:2491]: 151,
		_TimezoneString[2491:2506]: 152,
		_TimezoneString[2506:2518]: 153,
		_TimezoneString[2518:2533]: 154,
		_TimezoneString[2533:2548]: 155,
		_TimezoneString[2548:2565]: 156,
		_TimezoneString[2565:2579]: 157,
		_TimezoneString[2579:2595]: 158,
		_TimezoneString[2595:2612]: 159,
		_TimezoneString[2612:2625]: 160,
		_TimezoneString[2625:2637]: 161,
		_TimezoneString[2637:2650]: 162,
		_TimezoneString[2650:2665]: 163,
		_TimezoneString[2665:2677]: 164,
		_TimezoneString[2677:2693]: 165,
		_TimezoneString[2693:2706]: 166,
		_TimezoneString[2706:2726]: 167,
		_TimezoneString[2726:2738]: 168,
		_TimezoneString[2738:2758]: 169,
		_TimezoneString[2758:2771]: 170,
		_TimezoneString[2771:2786]: 171,
		_TimezoneString[2786:2804]: 172,
		_TimezoneString[2804:2816]: 173,
		_TimezoneString[2816:2833]: 174,
		_TimezoneString[2833:2848]: 175,
		_TimezoneString[2848:2862]: 176,
		_TimezoneString[2862:2875]: 177,
		_TimezoneString[2875:2889]: 178,
		_TimezoneString[2889:2911]: 179,
		_TimezoneString[2911:2925]: 180,
		_TimezoneString[2925:2944]: 181,
		_TimezoneString[2944:2958]: 182,
		_TimezoneString[2958:2973]: 183,
		_TimezoneString[2973:2991]: 184,
		_TimezoneString[2991:3003]: 185,
		_TimezoneString[3003:3015]: 186,
		_TimezoneString[3015:3028]: 187,
		_TimezoneString[3028:3041]: 188,
		_TimezoneString[3041:3055]: 189,
		_TimezoneString[3055:3066]: 190,
		_TimezoneString[3066:3078]: 191,
		_TimezoneString[3078:3091]: 192,
		_TimezoneString[3091:3109]: 193,
		_TimezoneString[3109:3123]: 194,
		_TimezoneString[3123:3134]: 195,
		_TimezoneString[3134:3149]: 196,
		_TimezoneString[3149:3159]: 197,
		_TimezoneString[3159:3172]: 198,
		_TimezoneString[3172:3182]: 199,
		_TimezoneString[3182:3193]: 200,
		_TimezoneString[3193:3203]: 201,
		_TimezoneString[3203:3214]: 202,
		_TimezoneString[3214:3225]: 203,
		_TimezoneString[3225:3234]: 204,
		_TimezoneString[3234:3247]: 205,
		_TimezoneString[3247:3261]: 206,
		_TimezoneString[3261:3275]: 207,
		_TimezoneString[3275:3289]: 208,
		_TimezoneString[3289:3307]: 209,
		_TimezoneString[3307:3321]: 210,
		_TimezoneString[3321:3335]: 211,
		_TimezoneString[3335:3345]: 212,
		_TimezoneString[3345:3356]: 213,
		_TimezoneString[3356:3368]: 214,
		_TimezoneString[3368:3382]: 215,
		_TimezoneString[3382:3393]: 216,
		_TimezoneString[3393:3404]: 217,
		_TimezoneString[3404:3417]: 218,
		_TimezoneString[3417:3432]: 219,
		_TimezoneString[3432:3446]: 220,
		_TimezoneString[3446:3458]: 221,
		_TimezoneString[3458:3472]: 222,
		_TimezoneString[3472:3489]: 223,
		_TimezoneString[3489:3499]: 224,
		_TimezoneString[3499:3512]: 225,
		_TimezoneString[3512:3531]: 226,
		_TimezoneString[3531:3546]: 227,
		_TimezoneString[3546:3563]: 228,
		_TimezoneString[3563:3575]: 229,
		_TimezoneString[3575:3590]: 230,
		_TimezoneString[3590:3603]: 231,
		_TimezoneString[3603:3615]: 232,
		_TimezoneString[3615:3632]: 233,
		_TimezoneString[3632:3646]: 234,
		_TimezoneString[3646:3664]: 235,
		_TimezoneString[3664:3681]: 236,
		_TimezoneString[3681:3697]: 237,
		_TimezoneString[3697:3711]: 238,
		_TimezoneString[3711:3733]: 239,
		_TimezoneString[3733:3747]: 240,
		_TimezoneString[3747:3764]: 241,
		_TimezoneString[3764:3782]: 242,
		_TimezoneString[3782:3799]: 243,
		_TimezoneString[3799:3815]: 244,
		_TimezoneString[3815:3829]: 245,
		_TimezoneString[3829:3848]: 246,
		_TimezoneString[3848:3865]: 247,
		_TimezoneString[3865:3880]: 248,
		_TimezoneString[3880:3895]: 249,
		_TimezoneString[3895:3908]: 250,
		_TimezoneString[3908:3922]: 251,
		_TimezoneString[3922:3937]: 252,
		_TimezoneString[3937:3952]: 253,
		_TimezoneString[3952:3965]: 254,
		_TimezoneString[3965:3980]: 255,
		_TimezoneString[3980:3989]: 256,
		_TimezoneString[3989:4005]: 257,
		_TimezoneString[4005:4021]: 258,
		_TimezoneString[4021:4039]: 259,
		_TimezoneString[4039:4056]: 260,
		_TimezoneString[4056:4069]: 261,
		_TimezoneString[4069:4080]: 262,
		_TimezoneString[4080:4095]: 263,
		_TimezoneString[4095:4108]: 264,
		_TimezoneString[4108:4122]: 265,
		_TimezoneString[4122:4138]: 266,
		_TimezoneString[4138:4152]: 267,
		_TimezoneString[4152:4168]: 268,
		_TimezoneString[4168:4183]: 269,
		_TimezoneString[4183:4198]: 270,
		_TimezoneString[4198:4211]: 271,
		_TimezoneString[4211:4223]: 272,
		_TimezoneString[4223:4235]: 273,
		_TimezoneString[4235:4250]: 274,
		_TimezoneString[4250:4264]: 275,
		_TimezoneString[4264:4275]: 276,
		_TimezoneString[4275:4286]: 277,
		_TimezoneString[4286:4298]: 278,
		_TimezoneString[4298:4311]: 279,
		_TimezoneString[4311:4320]: 280,
		_TimezoneString[4320:4331]: 281,
		_TimezoneString[4331:4345]: 282,
		_TimezoneString[4345:4365]: 283,
		_TimezoneString[4365:4385]: 284,
		_TimezoneString[4385:4401]: 285,
		_TimezoneString[4401:4413]: 286,
		_TimezoneString[4413:4424]: 287,
		_TimezoneString[4424:4440]: 288,
		_TimezoneString[4440:4453]: 289,
		_TimezoneString[4453:4468]: 290,
		_TimezoneString[4468:4484]: 291,
		_TimezoneString[4484:4497]: 292,
		_TimezoneString[4497:4516]: 293,
		_TimezoneString[4516:4526]: 294,
		_TimezoneString[4526:4542]: 295,
		_TimezoneString[4542:4553]: 296,
		_TimezoneString[4553:4565]: 297,
		_TimezoneString[4565:4575]: 298,
		_TimezoneString[4575:4587]: 299,
		_TimezoneString[4587:4601]: 300,
		_TimezoneString[4601:4614]: 301,
		_TimezoneString[4614:4630]: 302,
		_TimezoneString[4630:4642]: 303,
		_TimezoneString[4642:4659]: 304,
		_TimezoneString[4659:4675]: 305,
		_TimezoneString[4675:4684]: 306,
		_TimezoneString[4684:4697]: 307,
		_TimezoneString[4697:4715]: 308,
		_TimezoneString[4715:4725]: 309,
		_TimezoneString[4725:4738]: 310,
		_TimezoneString[4738:4754]: 311,
		_TimezoneString[4754:4766]: 312,
		_TimezoneString[4766:4784]: 313,
		_TimezoneString[4784:4800]: 314,
		_TimezoneString[4800:4818]: 315,
		_TimezoneString[4818:4830]: 316,
		_TimezoneString[4830:4843]: 317,
		_TimezoneString[4843:4856]: 318,
		_TimezoneString[4856:4870]: 319,
		_TimezoneString[4870:4886]: 320,
		_TimezoneString[4886:4902]: 321,
		_TimezoneString[4902:4915]: 322,
		_TimezoneString[4915:4929]: 323,
		_TimezoneString[4929:4950]: 324,
		_TimezoneString[4950:4968]: 325,
		_TimezoneString[4968:4984]: 326,
		_TimezoneString[4984:5000]: 327,
		_TimezoneString[5000:5015]: 328,
		_TimezoneString[5015:5031]: 329,
		_TimezoneString[5031:5049]: 330,
		_TimezoneString[5049:5061]: 331,
		_TimezoneString[5061:5078]: 332,
		_TimezoneString[5078:5093]: 333,
		_TimezoneString[5093:5104]: 334,
		_TimezoneString[5104:5116]: 335,
		_TimezoneString[5116:5131]: 336,
		_TimezoneString[5131:5142]: 337,
		_TimezoneString[5142:5157]: 338,
		_TimezoneString[5157:5171]: 339,
		_TimezoneString[5171:5192]: 340,
		_TimezoneString[5192:5209]: 341,
		_TimezoneString[5209:5225]: 342,
		_TimezoneString[5225:5244]: 343,
		_TimezoneString[5244:5260]: 344,
		_TimezoneString[5260:5279]: 345,
		_TimezoneString[5279:5301]: 346,
		_TimezoneString[5301:5312]: 347,
		_TimezoneString[5312:5324]: 348,
		_TimezoneString[5324:5339]: 349,
		_TimezoneString[5339:5352]: 350,
		_TimezoneString[5352:5364]: 351,
		_TimezoneString[5364:5379]: 352,
		_TimezoneString[5379:5397]: 353,
		_TimezoneString[5397:5416]: 354,
		_TimezoneString[5416:5430]: 355,
		_TimezoneString[5430:5446]: 356,
		_TimezoneString[5446:5459]: 357,
		_TimezoneString[5459:5472]: 358,
		_TimezoneString[5472:5483]: 359,
		_TimezoneString[5483:5496]: 360,
		_TimezoneString[5496:5516]: 361,
		_TimezoneString[5516:5528]: 362,
		_TimezoneString[5528:5537]: 363,
		_TimezoneString[5537:5548]: 364,
		_TimezoneString[5548:5563]: 365,
		_TimezoneString[5563:5580]: 366,
		_TimezoneString[5580:5601]: 367,
		_TimezoneString[5601:5613]: 368,
		_TimezoneString[5613:5628]: 369,
		_TimezoneString[5628:5641]: 370,
		_TimezoneString[5641:5659]: 371,
		_TimezoneString[5659:5675]: 372,
		_TimezoneString[5675:5689]: 373,
		_TimezoneString[5689:5700]: 374,
		_TimezoneString[5700:5717]: 375,
		_TimezoneString[5717:5732]: 376,
		_TimezoneString[5732:5749]: 377,
		_TimezoneString[5749:5759]: 378,
		_TimezoneString[5759:5772]: 379,
		_TimezoneString[5772:5784]: 380,
		_TimezoneString[5784:5801]: 381,
		_TimezoneString[5801:5814]: 382,
		_TimezoneString[5814:5829]: 383,
		_TimezoneString[5829:5843]: 384,
		_TimezoneString[5843:5858]: 385,
		_TimezoneString[5858:5886]: 386,
		_TimezoneString[5886:5906]: 387,
		_TimezoneString[5906:5929]: 388,
		_TimezoneString[5929:5955]: 389,
		_TimezoneString[5955:5980]: 390,
		_TimezoneString[5980:6001]: 391,
		_TimezoneString[6001:6026]: 392,
		_TimezoneString[6026:6049]: 393,
		_TimezoneString[6049:6063]: 394,
		_TimezoneString[6063:6090]: 395,
		_TimezoneString[6090:6117]: 396,
		_TimezoneString[6117:6136]: 397,
		_TimezoneString[6136:6153]: 398,
		_TimezoneString[6153:6171]: 399,
		_TimezoneString[6171:6187]: 400,
		_TimezoneString[6187:6199]: 401,
		_TimezoneString[6199:6226]: 402,
		_TimezoneString[6226:6253]: 403,
		_TimezoneString[6253:6283]: 404,
		_TimezoneString[6283:6298]: 405,
		_TimezoneString[6298:6311]: 406,
		_TimezoneString[6311:6326]: 407,
		_TimezoneString[6326:6342]: 408,
		_TimezoneString[6342:6356]: 409,
		_TimezoneString[6356:6368]: 410,
		_TimezoneString[6368:6386]: 411,
		_TimezoneString[6386:6400]: 412,
		_TimezoneString[6400:6413]: 413,
		_TimezoneString[6413:6426]: 414,
		_TimezoneString[6426:6441]: 415,
		_TimezoneString[6441:6457]: 416,
		_TimezoneString[6457:6472]: 417,
		_TimezoneString[6472:6489]: 418,
		_TimezoneString[6489:6503]: 419,
		_TimezoneString[6503:6518]: 420,
		_TimezoneString[6518:6527]: 421,
		_TimezoneString[6527:6540]: 422,
		_TimezoneString[6540:6553]: 423,
		_TimezoneString[6553:6569]: 424,
	}
	_TimezoneLowerStringToValueMap = map[string]Timezone{
		_TimezoneLowerString[0:10]:      1,
		_TimezoneLowerString[10:23]:     2,
		_TimezoneLowerString[23:37]:     3,
		_TimezoneLowerString[37:54]:     4,
		_TimezoneLowerString[54:68]:     5,
		_TimezoneLowerString[68:81]:     6,
		_TimezoneLowerString[81:97]:     7,
		_TimezoneLowerString[97:113]:    8,
		_TimezoneLowerString[113:129]:   9,
		_TimezoneLowerString[129:154]:   10,
		_TimezoneLowerString[154:171]:   11,
		_TimezoneLowerString[171:189]:   12,
		_TimezoneLowerString[189:206]:   13,
		_TimezoneLowerString[206:224]:   14,
		_TimezoneLowerString[224:240]:   15,
		_TimezoneLowerString[240:256]:   16,
		_TimezoneLowerString[256:273]:   17,
		_TimezoneLowerString[273:288]:   18,
		_TimezoneLowerString[288:318]:   19,
		_TimezoneLowerString[318:345]:   20,
		_TimezoneLowerString[345:370]:   21,
		_TimezoneLowerString[370:393]:   22,
		_TimezoneLowerString[393:419]:   23,
		_TimezoneLowerString[419:444]:   24,
		_TimezoneLowerString[444:474]:   25,
		_TimezoneLowerString[474:497]:   26,
		_TimezoneLowerString[497:523]:   27,
		_TimezoneLowerString[523:549]:   28,
		_TimezoneLowerString[549:574]:   29,
		_TimezoneLowerString[574:599]:   30,
		_TimezoneLowerString[599:611]:   31,
		_TimezoneLowerString[611:624]:   32,
		_TimezoneLowerString[624:644]:   33,
		_TimezoneLowerString[644:662]:   34,
		_TimezoneLowerString[662:680]:   35,
		_TimezoneLowerString[680:701]:   36,
		_TimezoneLowerString[701:717]:   37,
		_TimezoneLowerString[717:732]:   38,
		_TimezoneLowerString[732:748]:   39,
		_TimezoneLowerString[748:766]:   40,
		_TimezoneLowerString[766:785]:   41,
		_TimezoneLowerString[785:804]:   42,
		_TimezoneLowerString[804:819]:   43,
		_TimezoneLowerString[819:835]:   44,
		_TimezoneLowerString[835:848]:   45,
		_TimezoneLowerString[848:857]:   46,
		_TimezoneLowerString[857:871]:   47,
		_TimezoneLowerString[871:883]:   48,
		_TimezoneLowerString[883:893]:   49,
		_TimezoneLowerString[893:909]:   50,
		_TimezoneLowerString[909:921]:   51,
		_TimezoneLowerString[921:936]:   52,
		_TimezoneLowerString[936:950]:   53,
		_TimezoneLowerString[950:967]:   54,
		_TimezoneLowerString[967:983]:   55,
		_TimezoneLowerString[983:995]:   56,
		_TimezoneLowerString[995:1009]:  57,
		_TimezoneLowerString[1009:1027]: 58,
		_TimezoneLowerString[1027:1042]: 59,
		_TimezoneLowerString[1042:1057]: 60,
		_TimezoneLowerString[1057:1074]: 61,
		_TimezoneLowerString[1074:1087]: 62,
		_TimezoneLowerString[1087:1100]: 63,
		_TimezoneLowerString[1100:1117]: 64,
		_TimezoneLowerString[1117:1137]: 65,
		_TimezoneLowerString[1137:1151]: 66,
		_TimezoneLowerString[1151:1167]: 67,
		_TimezoneLowerString[1167:1184]: 68,
		_TimezoneLowerString[1184:1198]: 69,
		_TimezoneLowerString[1198:1212]: 70,
		_TimezoneLowerString[1212:1227]: 71,
		_TimezoneLowerString[1227:1246]: 72,
		_TimezoneLowerString[1246:1260]: 73,
		_TimezoneLowerString[1260:1278]: 74,
		_TimezoneLowerString[1278:1294]: 75,
		_TimezoneLowerString[1294:1311]: 76,
		_TimezoneLowerString[1311:1324]: 77,
		_TimezoneLowerString[1324:1335]: 78,
		_TimezoneLowerString[1335:1347]: 79,
		_TimezoneLowerString[1347:1365]: 80,
		_TimezoneLowerString[1365:1381]: 81,
		_TimezoneLowerString[1381:1396]: 82,
		_TimezoneLowerString[1396:1409]: 83,
		_TimezoneLowerString[1409:1425]: 84,
		_TimezoneLowerString[1425:1445]: 85,
		_TimezoneLowerString[1445:1466]: 86,
		_TimezoneLowerString[1466:1481]: 87,
		_TimezoneLowerString[1481:1495]: 88,
		_TimezoneLowerString[1495:1515]: 89,
		_TimezoneLowerString[1515:1531]: 90,
		_TimezoneLowerString[1531:1550]: 91,
		_TimezoneLowerString[1550:1567]: 92,
		_TimezoneLowerString[1567:1584]: 93,
		_TimezoneLowerString[1584:1599]: 94,
		_TimezoneLowerString[1599:1613]: 95,
		_TimezoneLowerString[1613:1628]: 96,
		_TimezoneLowerString[1628:1643]: 97,
		_TimezoneLowerString[1643:1658]: 98,
		_TimezoneLowerString[1658:1677]: 99,
		_TimezoneLowerString[1677:1696]: 100,
		_TimezoneLowerString[1696:1716]: 101,
		_TimezoneLowerString[1716:1730]: 102,
		_TimezoneLowerString[1730:1746]: 103,
		_TimezoneLowerString[1746:1762]: 104,
		_TimezoneLowerString[1762:1783]: 105,
		_TimezoneLowerString[1783:1802]: 106,
		_TimezoneLowerString[1802:1817]: 107,
		_TimezoneLowerString[1817:1834]: 108,
		_TimezoneLowerString[1834:1852]: 109,
		_TimezoneLowerString[1852:1868]: 110,
		_TimezoneLowerString[1868:1887]: 111,
		_TimezoneLowerString[1887:1906]: 112,
		_TimezoneLowerString[1906:1920]: 113,
		_TimezoneLowerString[1920:1933]: 114,
		_TimezoneLowerString[1933:1948]: 115,
		_TimezoneLowerString[1948:1968]: 116,
		_TimezoneLowerString[1968:1984]: 117,
		_TimezoneLowerString[1984:1998]: 118,
		_TimezoneLowerString[1998:2011]: 119,
		_TimezoneLowerString[2011:2022]: 120,
		_TimezoneLowerString[2022:2038]: 121,
		_TimezoneLowerString[2038:2050]: 122,
		_TimezoneLowerString[2050:2064]: 123,
		_TimezoneLowerString[2064:2077]: 124,
		_TimezoneLowerString[2077:2095]: 125,
		_TimezoneLowerString[2095:2110]: 126,
		_TimezoneLowerString[2110:2127]: 127,
		_TimezoneLowerString[2127:2144]: 128,
		_TimezoneLowerString[2144:2162]: 129,
		_TimezoneLowerString[2162:2175]: 130,
		_TimezoneLowerString[2175:2189]: 131,
		_TimezoneLowerString[2189:2204]: 132,
		_TimezoneLowerString[2204:2218]: 133,
		_TimezoneLowerString[2218:2230]: 134,
		_TimezoneLowerString[2230:2243]: 135,
		_TimezoneLowerString[2243:2257]: 136,
		_TimezoneLowerString[2257:2274]: 137,
		_TimezoneLowerString[2274:2289]: 138,
		_TimezoneLowerString[2289:2305]: 139,
		_TimezoneLowerString[2305:2326]: 140,
		_TimezoneLowerString[2326:2343]: 141,
		_TimezoneLowerString[2343:2360]: 142,
		_TimezoneLowerString[2360:2372]: 143,
		_TimezoneLowerString[2372:2391]: 144,
		_TimezoneLowerString[2391:2404]: 145,
		_TimezoneLowerString[2404:2417]: 146,
		_TimezoneLowerString[2417:2431]: 147,
		_TimezoneLowerString[2431:2449]: 148,
		_TimezoneLowerString[2449:2465]: 149,
		_TimezoneLowerString[2465:2479]: 150,
		_TimezoneLowerString[2479:2491]: 151,
		_TimezoneLowerString[2491:2506]: 152,
		_TimezoneLowerString[2506:2518]: 153,
		_TimezoneLowerString[2518:2533]: 154,
		_TimezoneLowerString[2533:2548]: 155,
		_TimezoneLowerString[2548:2565]: 156,
		_TimezoneLowerString[2565:2579]: 157,
		_TimezoneLowerString[2579:2595]: 158,
		_TimezoneLowerString[2595:2612]: 159,
		_TimezoneLowerString[2612:2625]: 160,
		_TimezoneLowerString[2625:2637]: 161,
		_TimezoneLowerString[2637:2650]: 162,
		_TimezoneLowerString[2650:2665]: 163,
		_TimezoneLowerString[2665:2677]: 164,
		_TimezoneLowerString[2677:2693]: 165,
		_TimezoneLowerString[2693:2706]: 166,
		_TimezoneLowerString[2706:2726]: 167,
		_TimezoneLowerString[2726:2738]: 168,
		_TimezoneLowerString[2738:2758]: 169,
		_TimezoneLowerString[2758:2771]: 170,
		_TimezoneLowerString[2771:2786]: 171,
		_TimezoneLowerString[2786:2804]: 172,
		_TimezoneLowerString[2804:2816]: 173,
		_TimezoneLowerString[2816:2833]: 174,
		_TimezoneLowerString[2833:2848]: 175,
		_TimezoneLowerString[2848:2862]: 176,
		_TimezoneLowerString[2862:2875]: 177,
		_TimezoneLowerString[2875:2889]: 178,
		_TimezoneLowerString[2889:2911]: 179,
		_TimezoneLowerString[2911:2925]: 180,
		_TimezoneLowerString[2925:2944]: 181,
		_TimezoneLowerString[2944:2958]: 182,
		_TimezoneLowerString[2958:2973]: 183,
		_TimezoneLowerString[2973:2991]: 184,
		_TimezoneLowerString[2991:3003]: 185,
		_TimezoneLowerString[3003:3015]: 186,
		_TimezoneLowerString[3015:3028]: 187,
		_TimezoneLowerString[3028:3041]: 188,
		_TimezoneLowerString[3041:3055]: 189,
		_TimezoneLowerString[3055:3066]: 190,
		_TimezoneLowerString[3066:3078]: 191,
		_TimezoneLowerString[3078:3091]: 192,
		_TimezoneLowerString[3091:3109]: 193,
		_TimezoneLowerString[3109:3123]: 194,
		_TimezoneLowerString[3123:3134]: 195,
		_TimezoneLowerString[3134:3149]: 196,
		_TimezoneLowerString[3149:3159]: 197,
		_TimezoneLowerString[3159:3172]: 198,
		_TimezoneLowerString[3172:3182]: 199,
		_TimezoneLowerString[3182:3193]: 200,
		_TimezoneLowerString[3193:3203]: 201,
		_TimezoneLowerString[3203:3214]: 202,
		_TimezoneLowerString[3214:3225]: 203,
		_TimezoneLowerString[3225:3234]: 204,
		_TimezoneLowerString[3234:3247]: 205,
		_TimezoneLowerString[3247:3261]: 206,
		_TimezoneLowerString[3261:3275]: 207,
		_TimezoneLowerString[3275:3289]: 208,
		_TimezoneLowerString[3289:3307]: 209,
		_TimezoneLowerString[3307:3321]: 210,
		_TimezoneLowerString[3321:3335]: 211,
		_TimezoneLowerString[3335:3345]: 212,
		_TimezoneLowerString[3345:3356]: 213,
		_TimezoneLowerString[3356:3368]: 214,
		_TimezoneLowerString[3368:3382]: 215,
		_TimezoneLowerString[3382:3393]: 216,
		_TimezoneLowerString[3393:3404]: 217,
		_TimezoneLowerString[3404:3417]: 218,
		_TimezoneLowerString[3417:3432]: 219,
		_TimezoneLowerString[3432:3446]: 220,
		_TimezoneLowerString[3446:3458]: 221,
		_TimezoneLowerString[3458:3472]: 222,
		_TimezoneLowerString[3472:3489]: 223,
		_TimezoneLowerString[3489:3499]: 224,
		_TimezoneLowerString[3499:3512]: 225,
		_TimezoneLowerString[3512:3531]: 226,
		_TimezoneLowerString[3531:3546]: 227,
		_TimezoneLowerString[3546:3563]: 228,
		_TimezoneLowerString[3563:3575]: 229,
		_TimezoneLowerString[3575:3590]: 230,
		_TimezoneLowerString[3590:3603]: 231,
		_TimezoneLowerString[3603:3615]: 232,
		_TimezoneLowerString[3615:3632]: 233,
		_TimezoneLowerString[3632:3646]: 234,
		_TimezoneLowerString[3646:3664]: 235,
		_TimezoneLowerString[3664:3681]: 236,
		_TimezoneLowerString[3681:3697]: 237,
		_TimezoneLowerString[3697:3711]: 238,
		_TimezoneLowerString[3711:3733]: 239,
		_TimezoneLowerString[3733:3747]: 240,
		_TimezoneLowerString[3747:3764]: 241,
		_TimezoneLowerString[3764:3782]: 242,
		_TimezoneLowerString[3782:3799]: 243,
		_TimezoneLowerString[3799:3815]: 244,
		_TimezoneLowerString[3815:3829]: 245,
		_TimezoneLowerString[3829:3848]: 246,
		_TimezoneLowerString[3848:3865]: 247,
		_TimezoneLowerString[3865:3880]: 248,
		_TimezoneLowerString[3880:3895]: 249,
		_TimezoneLowerString[3895:3908]: 250,
		_TimezoneLowerString[3908:3922]: 251,
		_TimezoneLowerString[3922:3937]: 252,
		_TimezoneLowerString[3937:3952]: 253,
		_TimezoneLowerString[3952:3965]: 254,
		_TimezoneLowerString[3965:3980]: 255,
		_TimezoneLowerString[3980:3989]: 256,
		_TimezoneLowerString[3989:4005]: 257,
		_TimezoneLowerString[4005:4021]: 258,
		_TimezoneLowerString[4021:4039]: 259,
		_TimezoneLowerString[4039:4056]: 260,
		_TimezoneLowerString[4056:4069]: 261,
		_TimezoneLowerString[4069:4080]: 262,
		_TimezoneLowerString[4080:4095]: 263,
		_TimezoneLowerString[4095:4108]: 264,
		_TimezoneLowerString[4108:4122]: 265,
		_TimezoneLowerString[4122:4138]: 266,
		_TimezoneLowerString[4138:4152]: 267,
		_TimezoneLowerString[4152:4168]: 268,
		_TimezoneLowerString[4168:4183]: 269,
		_TimezoneLowerString[4183:4198]: 270,
		_TimezoneLowerString[4198:4211]: 271,
		_TimezoneLowerString[4211:4223]: 272,
		_TimezoneLowerString[4223:4235]: 273,
		_TimezoneLowerString[4235:4250]: 274,
		_TimezoneLowerString[4250:4264]: 275,
		_TimezoneLowerString[4264:4275]: 276,
		_TimezoneLowerString[4275:4286]: 277,
		_TimezoneLowerString[4286:4298]: 278,
		_TimezoneLowerString[4298:4311]: 279,
		_TimezoneLowerString[4311:4320]: 280,
		_TimezoneLowerString[4320:4331]: 281,
		_TimezoneLowerString[4331:4345]: 282,
		_TimezoneLowerString[4345:4365]: 283,
		_TimezoneLowerString[4365:4385]: 284,
		_TimezoneLowerString[4385:4401]: 285,
		_TimezoneLowerString[4401:4413]: 286,
		_TimezoneLowerString[4413:4424]: 287,
		_TimezoneLowerString[4424:4440]: 288,
		_TimezoneLowerString[4440:4453]: 289,
		_TimezoneLowerString[4453:4468]: 290,
		_TimezoneLowerString[4468:4484]: 291,
		_TimezoneLowerString[4484:4497]: 292,
		_TimezoneLowerString[4497:4516]: 293,
		_TimezoneLowerString[4516:4526]: 294,
		_TimezoneLowerString[4526:4542]: 295,
		_TimezoneLowerString[4542:4553]: 296,
		_TimezoneLowerString[4553:4565]: 297,
		_TimezoneLowerString[4565:4575]: 298,
		_TimezoneLowerString[4575:4587]: 299,
		_TimezoneLowerString[4587:4601]: 300,
		_TimezoneLowerString[4601:4614]: 301,
		_TimezoneLowerString[4614:4630]: 302,
		_TimezoneLowerString[4630:4642]: 303,
		_TimezoneLowerString[4642:4659]: 304,
		_TimezoneLowerString[4659:4675]: 305,
		_TimezoneLowerString[4675:4684]: 306,
		_TimezoneLowerString[4684:4697]: 307,
		_TimezoneLowerString[4697:4715]: 308,
		_TimezoneLowerString[4715:4725]: 309,
		_TimezoneLowerString[4725:4738]: 310,
		_TimezoneLowerString[4738:4754]: 311,
		_TimezoneLowerString[4754:4766]: 312,
		_TimezoneLowerString[4766:4784]: 313,
		_TimezoneLowerString[4784:4800]: 314,
		_TimezoneLowerString[4800:4818]: 315,
		_TimezoneLowerString[4818:4830]: 316,
		_TimezoneLowerString[4830:4843]: 317,
		_TimezoneLowerString[4843:4856]: 318,
		_TimezoneLowerString[4856:4870]: 319,
		_TimezoneLowerString[4870:4886]: 320,
		_TimezoneLowerString[4886:4902]: 321,
		_TimezoneLowerString[4902:4915]: 322,
		_TimezoneLowerString[4915:4929]: 323,
		_TimezoneLowerString[4929:4950]: 324,
		_TimezoneLowerString[4950:4968]: 325,
		_TimezoneLowerString[4968:4984]: 326,
		_TimezoneLowerString[4984:5000]: 327,
		_TimezoneLowerString[5000:5015]: 328,
		_TimezoneLowerString[5015:5031]: 329,
		_TimezoneLowerString[5031:5049]: 330,
		_TimezoneLowerString[5049:5061]: 331,
		_TimezoneLowerString[5061:5078]: 332,
		_TimezoneLowerString[5078:5093]: 333,
		_TimezoneLowerString[5093:5104]: 334,
		_TimezoneLowerString[5104:5116]: 335,
		_TimezoneLowerString[5116:5131]: 336,
		_TimezoneLowerString[5131:5142]: 337,
		_TimezoneLowerString[5142:5157]: 338,
		_TimezoneLowerString[5157:5171]: 339,
		_TimezoneLowerString[5171:5192]: 340,
		_TimezoneLowerString[5192:5209]: 341,
		_TimezoneLowerString[5209:5225]: 342,
		_TimezoneLowerString[5225:5244]: 343,
		_TimezoneLowerString[5244:5260]: 344,
		_TimezoneLowerString[5260:5279]: 345,
		_TimezoneLowerString[5279:5301]: 346,
		_TimezoneLowerString[5301:5312]: 347,
		_TimezoneLowerString[5312:5324]: 348,
		_TimezoneLowerString[5324:5339]: 349,
		_TimezoneLowerString[5339:5352]: 350,
		_TimezoneLowerString[5352:5364]: 351,
		_TimezoneLowerString[5364:5379]: 352,
		_TimezoneLowerString[5379:5397]: 353,
		_TimezoneLowerString[5397:5416]: 354,
		_TimezoneLowerString[5416:5430]: 355,
		_TimezoneLowerString[5430:5446]: 356,
		_TimezoneLowerString[5446:5459]: 357,
		_TimezoneLowerString[5459:5472]: 358,
		_TimezoneLowerString[5472:5483]: 359,
		_TimezoneLowerString[5483:5496]: 360,
		_TimezoneLowerString[5496:5516]: 361,
		_TimezoneLowerString[5516:5528]: 362,
		_TimezoneLowerString[5528:5537]: 363,
		_TimezoneLowerString[5537:5548]: 364,
		_TimezoneLowerString[5548:5563]: 365,
		_TimezoneLowerString[5563:5580]: 366,
		_TimezoneLowerString[5580:5601]: 367,
		_TimezoneLowerString[5601:5613]: 368,
		_TimezoneLowerString[5613:5628]: 369,
		_TimezoneLowerString[5628:5641]: 370,
		_TimezoneLowerString[5641:5659]: 371,
		_TimezoneLowerString[5659:5675]: 372,
		_TimezoneLowerString[5675:5689]: 373,
		_TimezoneLowerString[5689:5700]: 374,
		_TimezoneLowerString[5700:5717]: 375,
		_TimezoneLowerString[5717:5732]: 376,
		_TimezoneLowerString[5732:5749]: 377,
		_TimezoneLowerString[5749:5759]: 378,
		_TimezoneLowerString[5759:5772]: 379,
		_TimezoneLowerString[5772:5784]: 380,
		_TimezoneLowerString[5784:5801]: 381,
		_TimezoneLowerString[5801:5814]: 382,
		_TimezoneLowerString[5814:5829]: 383,
		_TimezoneLowerString[5829:5843]: 384,
		_TimezoneLowerString[5843:5858]: 385,
		_TimezoneLowerString[5858:5886]: 386,
		_TimezoneLowerString[5886:5906]: 387,
		_TimezoneLowerString[5906:5929]: 388,
		_TimezoneLowerString[5929:5955]: 389,
		_TimezoneLowerString[5955:5980]: 390,
		_TimezoneLowerString[5980:6001]: 391,
		_TimezoneLowerString[6001:6026]: 392,
		_TimezoneLowerString[6026:6049]: 393,
		_TimezoneLowerString[6049:6063]: 394,
		_TimezoneLowerString[6063:6090]: 395,
		_TimezoneLowerString[6090:6117]: 396,
		_TimezoneLowerString[6117:6136]: 397,
		_TimezoneLowerString[6136:6153]: 398,
		_TimezoneLowerString[6153:6171]: 399,
		_TimezoneLowerString[6171:6187]: 400,
		_TimezoneLowerString[6187:6199]: 401,
		_TimezoneLowerString[6199:6226]: 402,
		_TimezoneLowerString[6226:6253]: 403,
		_TimezoneLowerString[6253:6283]: 404,
		_TimezoneLowerString[6283:6298]: 405,
		_TimezoneLowerString[6298:6311]: 406,
		_TimezoneLowerString[6311:6326]: 407,
		_TimezoneLowerString[6326:6342]: 408,
		_TimezoneLowerString[6342:6356]: 409,
		_TimezoneLowerString[6356:6368]: 410,
		_TimezoneLowerString[6368:6386]: 411,
		_TimezoneLowerString[6386:6400]: 412,
		_TimezoneLowerString[6400:6413]: 413,
		_TimezoneLowerString[6413:6426]: 414,
		_TimezoneLowerString[6426:6441]: 415,
		_TimezoneLowerString[6441:6457]: 416,
		_TimezoneLowerString[6457:6472]: 417,
		_TimezoneLowerString[6472:6489]: 418,
		_TimezoneLowerString[6489:6503]: 419,
		_TimezoneLowerString[6503:6518]: 420,
		_TimezoneLowerString[6518:6527]: 421,
		_TimezoneLowerString[6527:6540]: 422,
		_TimezoneLowerString[6540:6553]: 423,
		_TimezoneLowerString[6553:6569]: 424,
	}
)

// TimezoneFromString determines the enum value with an exact case match.
func TimezoneFromString(raw string) (Timezone, bool) {
	v, ok := _TimezoneStringToValueMap[raw]
	if !ok {
		return Timezone(0), false
	}
	return v, true
}

// TimezoneFromStringIgnoreCase determines the enum value with a case-insensitive match.
func TimezoneFromStringIgnoreCase(raw string) (Timezone, bool) {
	v, ok := TimezoneFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _TimezoneLowerStringToValueMap[raw]
	if !ok {
		return Timezone(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Timezone.
func (_t Timezone) MarshalBinary() ([]byte, error) {
	if !_t.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Timezone", _t)
	}
	return []byte(_t.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Timezone.
func (_t Timezone) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_t.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Timezone: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Timezone.
func (_t Timezone) MarshalJSON() ([]byte, error) {
	if !_t.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Timezone", _t)
	}
	return json.Marshal(_t.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("Timezone should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

func (_t Timezone) Value() (driver.Value, error) {
	if !_t.IsValid() {
		return nil, fmt.Errorf("Cannot serialize invalid value %q as Timezone", _t)
	}
	return _t.String(), nil
}

func (_t *Timezone) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Timezone: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Timezone.
func (_t Timezone) MarshalText() ([]byte, error) {
	if !_t.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Timezone", _t)
	}
	return []byte(_t.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Timezone.
func (_t *Timezone) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for Timezone.
func (_t Timezone) MarshalYAML() (interface{}, error) {
	if !_t.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Timezone", _t)
	}
	return _t.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Timezone.
func (_t *Timezone) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("Timezone cannot be derived from empty string")
	}

	var ok bool
	*_t, ok = TimezoneFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Timezone", str)
	}
	return nil
}

const (
	_CurrencyString         = "USDEURYENGBPAUD"
	_CurrencyLowerString    = "usdeuryengbpaud"
	_CurrencyCanonicalValue = "US DollarEuroJapanese YenGreat British PoundAustralian Dollar"
)

var (
	_CurrencyValueRange      = [2]Currency{1, 4}
	_CurrencyValues          = []Currency{1, 2, 3, 4}
	_CurrencyStrings         = []string{_CurrencyString[0:3], _CurrencyString[3:6], _CurrencyString[6:9], _CurrencyString[9:12]}
	_CurrencyCanonicalValues = []string{_CurrencyCanonicalValue[0:9], _CurrencyCanonicalValue[9:13], _CurrencyCanonicalValue[13:25], _CurrencyCanonicalValue[25:44]}
)

// CurrencyValues returns all values of the enum.
func CurrencyValues() []Currency {
	strs := make([]Currency, len(_CurrencyValues))
	copy(strs, _CurrencyValues)
	return _CurrencyValues
}

// CurrencyStrings returns a slice of all String values of the enum.
func CurrencyStrings() []string {
	strs := make([]string, len(_CurrencyStrings))
	copy(strs, _CurrencyStrings)
	return strs
}

// IsValid inspects whether the value is valid enum value.
func (_c Currency) IsValid() bool {
	return _c >= _CurrencyValueRange[0] && _c <= _CurrencyValueRange[1]
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Currency(%d) instead.
func (_c Currency) String() string {
	if !_c.IsValid() {
		return fmt.Sprintf("Currency(%d)", _c)
	}
	idx := uint(_c) - 1
	return _CurrencyStrings[idx]
}

// CanonicalValue returns the canonical string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern Currency(%d) instead.
func (_c Currency) CanonicalValue() string {
	if !_c.IsValid() {
		return fmt.Sprintf("Currency(%d)", _c)
	}
	idx := uint(_c)
	return _CurrencyCanonicalValues[idx]
}

var (
	_CurrencyStringToValueMap = map[string]Currency{
		_CurrencyString[0:3]:   1,
		_CurrencyString[3:6]:   2,
		_CurrencyString[6:9]:   3,
		_CurrencyString[9:12]:  4,
		_CurrencyString[12:15]: 4,
	}
	_CurrencyLowerStringToValueMap = map[string]Currency{
		_CurrencyLowerString[0:3]:   1,
		_CurrencyLowerString[3:6]:   2,
		_CurrencyLowerString[6:9]:   3,
		_CurrencyLowerString[9:12]:  4,
		_CurrencyLowerString[12:15]: 4,
	}
)

// CurrencyFromString determines the enum value with an exact case match.
func CurrencyFromString(raw string) (Currency, bool) {
	v, ok := _CurrencyStringToValueMap[raw]
	if !ok {
		return Currency(0), false
	}
	return v, true
}

// CurrencyFromStringIgnoreCase determines the enum value with a case-insensitive match.
func CurrencyFromStringIgnoreCase(raw string) (Currency, bool) {
	v, ok := CurrencyFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _CurrencyLowerStringToValueMap[raw]
	if !ok {
		return Currency(0), false
	}
	return v, true
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Currency.
func (_c Currency) MarshalBinary() ([]byte, error) {
	if !_c.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Currency", _c)
	}
	return []byte(_c.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Currency.
func (_c *Currency) UnmarshalBinary(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Currency.
func (_c Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(_c.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Currency.
func (_c *Currency) UnmarshalGQL(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Currency.
func (_c Currency) MarshalJSON() ([]byte, error) {
	if !_c.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Currency", _c)
	}
	return json.Marshal(_c.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Currency.
func (_c *Currency) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("Currency should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

func (_c Currency) Value() (driver.Value, error) {
	if !_c.IsValid() {
		return nil, fmt.Errorf("Cannot serialize invalid value %q as Currency", _c)
	}
	return _c.String(), nil
}

func (_c *Currency) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for Currency.
func (_c Currency) MarshalText() ([]byte, error) {
	if !_c.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Currency", _c)
	}
	return []byte(_c.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Currency.
func (_c *Currency) UnmarshalText(text []byte) error {
	str := string(text)
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

// MarshalYAML implements a YAML Marshaler for Currency.
func (_c Currency) MarshalYAML() (interface{}, error) {
	if !_c.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as Currency", _c)
	}
	return _c.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Currency.
func (_c *Currency) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	if err := unmarshal(&str); err != nil {
		return err
	}
	if len(str) == 0 {
		return fmt.Errorf("Currency cannot be derived from empty string")
	}

	var ok bool
	*_c, ok = CurrencyFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a Currency", str)
	}
	return nil
}

const (
	_AccountStateString      = "STAGEDPROVISIONEDACTIVATEDDEACTIVATEDDEPROVISIONED"
	_AccountStateLowerString = "stagedprovisionedactivateddeactivateddeprovisioned"
)

var (
	_AccountStateValueRange = [2]AccountState{0, 4}
	_AccountStateValues     = []AccountState{0, 1, 2, 3, 4}
	_AccountStateStrings    = []string{_AccountStateString[0:6], _AccountStateString[6:17], _AccountStateString[17:26], _AccountStateString[26:37], _AccountStateString[37:50]}
)

// _AccountStateNoOp is a compile time assertion.
// An "invalid argument/out of bounds" compiler error signifies that the enum values have changed.
// Re-run the enumer command to generate an updated version of AccountState.
func _AccountStateNoOp() {
	var x [1]struct{}
	_ = x[AccountStateStaged-(0)]
	_ = x[AccountStateProvisioned-(1)]
	_ = x[AccountStateActivated-(2)]
	_ = x[AccountStateDeactivated-(3)]
	_ = x[AccountStateDeprovisioned-(4)]
}

// AccountStateValues returns all values of the enum.
func AccountStateValues() []AccountState {
	strs := make([]AccountState, len(_AccountStateValues))
	copy(strs, _AccountStateValues)
	return _AccountStateValues
}

// AccountStateStrings returns a slice of all String values of the enum.
func AccountStateStrings() []string {
	strs := make([]string, len(_AccountStateStrings))
	copy(strs, _AccountStateStrings)
	return strs
}

// IsValid inspects whether the value is valid enum value.
func (_a AccountState) IsValid() bool {
	return _a >= _AccountStateValueRange[0] && _a <= _AccountStateValueRange[1]
}

// String returns the string of the enum value.
// If the enum value is invalid, it will produce a string
// of the following pattern AccountState(%d) instead.
func (_a AccountState) String() string {
	if !_a.IsValid() {
		return fmt.Sprintf("AccountState(%d)", _a)
	}
	idx := uint(_a)
	return _AccountStateStrings[idx]
}

var (
	_AccountStateStringToValueMap = map[string]AccountState{
		_AccountStateString[0:6]:   AccountStateStaged,
		_AccountStateString[6:17]:  AccountStateProvisioned,
		_AccountStateString[17:26]: AccountStateActivated,
		_AccountStateString[26:37]: AccountStateDeactivated,
		_AccountStateString[37:50]: AccountStateDeprovisioned,
	}
	_AccountStateLowerStringToValueMap = map[string]AccountState{
		_AccountStateLowerString[0:6]:   AccountStateStaged,
		_AccountStateLowerString[6:17]:  AccountStateProvisioned,
		_AccountStateLowerString[17:26]: AccountStateActivated,
		_AccountStateLowerString[26:37]: AccountStateDeactivated,
		_AccountStateLowerString[37:50]: AccountStateDeprovisioned,
	}
)

// AccountStateFromString determines the enum value with an exact case match.
func AccountStateFromString(raw string) (AccountState, bool) {
	v, ok := _AccountStateStringToValueMap[raw]
	if !ok {
		return AccountState(0), false
	}
	return v, true
}

// AccountStateFromStringIgnoreCase determines the enum value with a case-insensitive match.
func AccountStateFromStringIgnoreCase(raw string) (AccountState, bool) {
	v, ok := AccountStateFromString(raw)
	if ok {
		return v, ok
	}
	v, ok = _AccountStateLowerStringToValueMap[raw]
	if !ok {
		return AccountState(0), false
	}
	return v, true
}

// MarshalJSON implements the json.Marshaler interface for AccountState.
func (_a AccountState) MarshalJSON() ([]byte, error) {
	if !_a.IsValid() {
		return nil, fmt.Errorf("Cannot marshal invalid value %q as AccountState", _a)
	}
	return json.Marshal(_a.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountState.
func (_a *AccountState) UnmarshalJSON(data []byte) error {
	var str string
	if err := json.Unmarshal(data, &str); err != nil {
		return fmt.Errorf("AccountState should be a string, got %q", data)
	}
	if len(str) == 0 {
		return fmt.Errorf("AccountState cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AccountStateFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AccountState", str)
	}
	return nil
}

func (_a AccountState) Value() (driver.Value, error) {
	if !_a.IsValid() {
		return nil, fmt.Errorf("Cannot serialize invalid value %q as AccountState", _a)
	}
	return _a.String(), nil
}

func (_a *AccountState) Scan(value interface{}) error {
	var str string
	switch v := value.(type) {
	case nil:
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AccountState: %[1]T(%[1]v)", value)
	}
	if len(str) == 0 {
		return fmt.Errorf("AccountState cannot be derived from empty string")
	}

	var ok bool
	*_a, ok = AccountStateFromString(str)
	if !ok {
		return fmt.Errorf("Value %q does not represent a AccountState", str)
	}
	return nil
}
